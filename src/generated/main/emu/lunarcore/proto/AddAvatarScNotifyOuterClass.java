// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class AddAvatarScNotifyOuterClass {
  /**
   * Protobuf type {@code AddAvatarScNotify}
   */
  public static final class AddAvatarScNotify extends ProtoMessage<AddAvatarScNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 base_avatar_id = 8;</code>
     */
    private int baseAvatarId;

    /**
     * <code>optional .AddAvatarSrcState src = 14;</code>
     */
    private int src;

    /**
     * <code>optional bool is_new = 12;</code>
     */
    private boolean isNew;

    /**
     * <code>optional .ItemList reward = 6;</code>
     */
    private final ItemListOuterClass.ItemList reward = ItemListOuterClass.ItemList.newInstance();

    private AddAvatarScNotify() {
    }

    /**
     * @return a new empty instance of {@code AddAvatarScNotify}
     */
    public static AddAvatarScNotify newInstance() {
      return new AddAvatarScNotify();
    }

    /**
     * <code>optional uint32 base_avatar_id = 8;</code>
     * @return whether the baseAvatarId field is set
     */
    public boolean hasBaseAvatarId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 base_avatar_id = 8;</code>
     * @return this
     */
    public AddAvatarScNotify clearBaseAvatarId() {
      bitField0_ &= ~0x00000001;
      baseAvatarId = 0;
      return this;
    }

    /**
     * <code>optional uint32 base_avatar_id = 8;</code>
     * @return the baseAvatarId
     */
    public int getBaseAvatarId() {
      return baseAvatarId;
    }

    /**
     * <code>optional uint32 base_avatar_id = 8;</code>
     * @param value the baseAvatarId to set
     * @return this
     */
    public AddAvatarScNotify setBaseAvatarId(final int value) {
      bitField0_ |= 0x00000001;
      baseAvatarId = value;
      return this;
    }

    /**
     * <code>optional .AddAvatarSrcState src = 14;</code>
     * @return whether the src field is set
     */
    public boolean hasSrc() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .AddAvatarSrcState src = 14;</code>
     * @return this
     */
    public AddAvatarScNotify clearSrc() {
      bitField0_ &= ~0x00000002;
      src = 0;
      return this;
    }

    /**
     * <code>optional .AddAvatarSrcState src = 14;</code>
     * @return the src
     */
    public AddAvatarSrcStateOuterClass.AddAvatarSrcState getSrc() {
      return AddAvatarSrcStateOuterClass.AddAvatarSrcState.forNumber(src);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link AddAvatarScNotify#getSrc()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getSrcValue() {
      return src;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link AddAvatarSrcStateOuterClass.AddAvatarSrcState}. Setting an invalid value
     * can cause {@link AddAvatarScNotify#getSrc()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public AddAvatarScNotify setSrcValue(final int value) {
      bitField0_ |= 0x00000002;
      src = value;
      return this;
    }

    /**
     * <code>optional .AddAvatarSrcState src = 14;</code>
     * @param value the src to set
     * @return this
     */
    public AddAvatarScNotify setSrc(final AddAvatarSrcStateOuterClass.AddAvatarSrcState value) {
      bitField0_ |= 0x00000002;
      src = value.getNumber();
      return this;
    }

    /**
     * <code>optional bool is_new = 12;</code>
     * @return whether the isNew field is set
     */
    public boolean hasIsNew() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool is_new = 12;</code>
     * @return this
     */
    public AddAvatarScNotify clearIsNew() {
      bitField0_ &= ~0x00000004;
      isNew = false;
      return this;
    }

    /**
     * <code>optional bool is_new = 12;</code>
     * @return the isNew
     */
    public boolean getIsNew() {
      return isNew;
    }

    /**
     * <code>optional bool is_new = 12;</code>
     * @param value the isNew to set
     * @return this
     */
    public AddAvatarScNotify setIsNew(final boolean value) {
      bitField0_ |= 0x00000004;
      isNew = value;
      return this;
    }

    /**
     * <code>optional .ItemList reward = 6;</code>
     * @return whether the reward field is set
     */
    public boolean hasReward() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .ItemList reward = 6;</code>
     * @return this
     */
    public AddAvatarScNotify clearReward() {
      bitField0_ &= ~0x00000008;
      reward.clear();
      return this;
    }

    /**
     * <code>optional .ItemList reward = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableReward()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemListOuterClass.ItemList getReward() {
      return reward;
    }

    /**
     * <code>optional .ItemList reward = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemListOuterClass.ItemList getMutableReward() {
      bitField0_ |= 0x00000008;
      return reward;
    }

    /**
     * <code>optional .ItemList reward = 6;</code>
     * @param value the reward to set
     * @return this
     */
    public AddAvatarScNotify setReward(final ItemListOuterClass.ItemList value) {
      bitField0_ |= 0x00000008;
      reward.copyFrom(value);
      return this;
    }

    @Override
    public AddAvatarScNotify copyFrom(final AddAvatarScNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        baseAvatarId = other.baseAvatarId;
        src = other.src;
        isNew = other.isNew;
        reward.copyFrom(other.reward);
      }
      return this;
    }

    @Override
    public AddAvatarScNotify mergeFrom(final AddAvatarScNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBaseAvatarId()) {
        setBaseAvatarId(other.baseAvatarId);
      }
      if (other.hasSrc()) {
        setSrcValue(other.src);
      }
      if (other.hasIsNew()) {
        setIsNew(other.isNew);
      }
      if (other.hasReward()) {
        getMutableReward().mergeFrom(other.reward);
      }
      return this;
    }

    @Override
    public AddAvatarScNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      baseAvatarId = 0;
      src = 0;
      isNew = false;
      reward.clear();
      return this;
    }

    @Override
    public AddAvatarScNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      reward.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof AddAvatarScNotify)) {
        return false;
      }
      AddAvatarScNotify other = (AddAvatarScNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasBaseAvatarId() || baseAvatarId == other.baseAvatarId)
        && (!hasSrc() || src == other.src)
        && (!hasIsNew() || isNew == other.isNew)
        && (!hasReward() || reward.equals(other.reward));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(baseAvatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeEnumNoTag(src);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeBoolNoTag(isNew);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 50);
        output.writeMessageNoTag(reward);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(baseAvatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(src);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(reward);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public AddAvatarScNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // baseAvatarId
            baseAvatarId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // src
            final int value = input.readInt32();
            if (AddAvatarSrcStateOuterClass.AddAvatarSrcState.forNumber(value) != null) {
              src = value;
              bitField0_ |= 0x00000002;
            }
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // isNew
            isNew = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // reward
            input.readMessage(reward);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.baseAvatarId, baseAvatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeEnum(FieldNames.src, src, AddAvatarSrcStateOuterClass.AddAvatarSrcState.converter());
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.isNew, isNew);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.reward, reward);
      }
      output.endObject();
    }

    @Override
    public AddAvatarScNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 118022725:
          case -1756826157: {
            if (input.isAtField(FieldNames.baseAvatarId)) {
              if (!input.trySkipNullValue()) {
                baseAvatarId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 114148: {
            if (input.isAtField(FieldNames.src)) {
              if (!input.trySkipNullValue()) {
                final AddAvatarSrcStateOuterClass.AddAvatarSrcState value = input.readEnum(AddAvatarSrcStateOuterClass.AddAvatarSrcState.converter());
                if (value != null) {
                  src = value.getNumber();
                  bitField0_ |= 0x00000002;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 100473878:
          case -1179762421: {
            if (input.isAtField(FieldNames.isNew)) {
              if (!input.trySkipNullValue()) {
                isNew = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -934326481: {
            if (input.isAtField(FieldNames.reward)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(reward);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public AddAvatarScNotify clone() {
      return new AddAvatarScNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static AddAvatarScNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new AddAvatarScNotify(), data).checkInitialized();
    }

    public static AddAvatarScNotify parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new AddAvatarScNotify(), input).checkInitialized();
    }

    public static AddAvatarScNotify parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new AddAvatarScNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating AddAvatarScNotify messages
     */
    public static MessageFactory<AddAvatarScNotify> getFactory() {
      return AddAvatarScNotifyFactory.INSTANCE;
    }

    private enum AddAvatarScNotifyFactory implements MessageFactory<AddAvatarScNotify> {
      INSTANCE;

      @Override
      public AddAvatarScNotify create() {
        return AddAvatarScNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName baseAvatarId = FieldName.forField("baseAvatarId", "base_avatar_id");

      static final FieldName src = FieldName.forField("src");

      static final FieldName isNew = FieldName.forField("isNew", "is_new");

      static final FieldName reward = FieldName.forField("reward");
    }
  }
}
