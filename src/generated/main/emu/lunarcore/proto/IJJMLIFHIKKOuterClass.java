// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class IJJMLIFHIKKOuterClass {
  /**
   * Protobuf type {@code IJJMLIFHIKK}
   */
  public static final class IJJMLIFHIKK extends ProtoMessage<IJJMLIFHIKK> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated uint32 FEHNBOKNGEK = 3;</code>
     */
    private final RepeatedInt fEHNBOKNGEK = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 BBAOBMPIDIN = 15;</code>
     */
    private final RepeatedInt bBAOBMPIDIN = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .Mission KJPABHNAICF = 11;</code>
     */
    private final RepeatedMessage<MissionOuterClass.Mission> kJPABHNAICF = RepeatedMessage.newEmptyInstance(MissionOuterClass.Mission.getFactory());

    private IJJMLIFHIKK() {
    }

    /**
     * @return a new empty instance of {@code IJJMLIFHIKK}
     */
    public static IJJMLIFHIKK newInstance() {
      return new IJJMLIFHIKK();
    }

    /**
     * <code>repeated uint32 FEHNBOKNGEK = 3;</code>
     * @return whether the fEHNBOKNGEK field is set
     */
    public boolean hasFEHNBOKNGEK() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated uint32 FEHNBOKNGEK = 3;</code>
     * @return this
     */
    public IJJMLIFHIKK clearFEHNBOKNGEK() {
      bitField0_ &= ~0x00000001;
      fEHNBOKNGEK.clear();
      return this;
    }

    /**
     * <code>repeated uint32 FEHNBOKNGEK = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFEHNBOKNGEK()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getFEHNBOKNGEK() {
      return fEHNBOKNGEK;
    }

    /**
     * <code>repeated uint32 FEHNBOKNGEK = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableFEHNBOKNGEK() {
      bitField0_ |= 0x00000001;
      return fEHNBOKNGEK;
    }

    /**
     * <code>repeated uint32 FEHNBOKNGEK = 3;</code>
     * @param value the fEHNBOKNGEK to add
     * @return this
     */
    public IJJMLIFHIKK addFEHNBOKNGEK(final int value) {
      bitField0_ |= 0x00000001;
      fEHNBOKNGEK.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 FEHNBOKNGEK = 3;</code>
     * @param values the fEHNBOKNGEK to add
     * @return this
     */
    public IJJMLIFHIKK addAllFEHNBOKNGEK(final int... values) {
      bitField0_ |= 0x00000001;
      fEHNBOKNGEK.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 BBAOBMPIDIN = 15;</code>
     * @return whether the bBAOBMPIDIN field is set
     */
    public boolean hasBBAOBMPIDIN() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 BBAOBMPIDIN = 15;</code>
     * @return this
     */
    public IJJMLIFHIKK clearBBAOBMPIDIN() {
      bitField0_ &= ~0x00000002;
      bBAOBMPIDIN.clear();
      return this;
    }

    /**
     * <code>repeated uint32 BBAOBMPIDIN = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBBAOBMPIDIN()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getBBAOBMPIDIN() {
      return bBAOBMPIDIN;
    }

    /**
     * <code>repeated uint32 BBAOBMPIDIN = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableBBAOBMPIDIN() {
      bitField0_ |= 0x00000002;
      return bBAOBMPIDIN;
    }

    /**
     * <code>repeated uint32 BBAOBMPIDIN = 15;</code>
     * @param value the bBAOBMPIDIN to add
     * @return this
     */
    public IJJMLIFHIKK addBBAOBMPIDIN(final int value) {
      bitField0_ |= 0x00000002;
      bBAOBMPIDIN.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 BBAOBMPIDIN = 15;</code>
     * @param values the bBAOBMPIDIN to add
     * @return this
     */
    public IJJMLIFHIKK addAllBBAOBMPIDIN(final int... values) {
      bitField0_ |= 0x00000002;
      bBAOBMPIDIN.addAll(values);
      return this;
    }

    /**
     * <code>repeated .Mission KJPABHNAICF = 11;</code>
     * @return whether the kJPABHNAICF field is set
     */
    public boolean hasKJPABHNAICF() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .Mission KJPABHNAICF = 11;</code>
     * @return this
     */
    public IJJMLIFHIKK clearKJPABHNAICF() {
      bitField0_ &= ~0x00000004;
      kJPABHNAICF.clear();
      return this;
    }

    /**
     * <code>repeated .Mission KJPABHNAICF = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableKJPABHNAICF()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MissionOuterClass.Mission> getKJPABHNAICF() {
      return kJPABHNAICF;
    }

    /**
     * <code>repeated .Mission KJPABHNAICF = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMutableKJPABHNAICF() {
      bitField0_ |= 0x00000004;
      return kJPABHNAICF;
    }

    /**
     * <code>repeated .Mission KJPABHNAICF = 11;</code>
     * @param value the kJPABHNAICF to add
     * @return this
     */
    public IJJMLIFHIKK addKJPABHNAICF(final MissionOuterClass.Mission value) {
      bitField0_ |= 0x00000004;
      kJPABHNAICF.add(value);
      return this;
    }

    /**
     * <code>repeated .Mission KJPABHNAICF = 11;</code>
     * @param values the kJPABHNAICF to add
     * @return this
     */
    public IJJMLIFHIKK addAllKJPABHNAICF(final MissionOuterClass.Mission... values) {
      bitField0_ |= 0x00000004;
      kJPABHNAICF.addAll(values);
      return this;
    }

    @Override
    public IJJMLIFHIKK copyFrom(final IJJMLIFHIKK other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        fEHNBOKNGEK.copyFrom(other.fEHNBOKNGEK);
        bBAOBMPIDIN.copyFrom(other.bBAOBMPIDIN);
        kJPABHNAICF.copyFrom(other.kJPABHNAICF);
      }
      return this;
    }

    @Override
    public IJJMLIFHIKK mergeFrom(final IJJMLIFHIKK other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFEHNBOKNGEK()) {
        getMutableFEHNBOKNGEK().addAll(other.fEHNBOKNGEK);
      }
      if (other.hasBBAOBMPIDIN()) {
        getMutableBBAOBMPIDIN().addAll(other.bBAOBMPIDIN);
      }
      if (other.hasKJPABHNAICF()) {
        getMutableKJPABHNAICF().addAll(other.kJPABHNAICF);
      }
      return this;
    }

    @Override
    public IJJMLIFHIKK clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fEHNBOKNGEK.clear();
      bBAOBMPIDIN.clear();
      kJPABHNAICF.clear();
      return this;
    }

    @Override
    public IJJMLIFHIKK clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fEHNBOKNGEK.clear();
      bBAOBMPIDIN.clear();
      kJPABHNAICF.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof IJJMLIFHIKK)) {
        return false;
      }
      IJJMLIFHIKK other = (IJJMLIFHIKK) o;
      return bitField0_ == other.bitField0_
        && (!hasFEHNBOKNGEK() || fEHNBOKNGEK.equals(other.fEHNBOKNGEK))
        && (!hasBBAOBMPIDIN() || bBAOBMPIDIN.equals(other.bBAOBMPIDIN))
        && (!hasKJPABHNAICF() || kJPABHNAICF.equals(other.kJPABHNAICF));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < fEHNBOKNGEK.length(); i++) {
          output.writeRawByte((byte) 24);
          output.writeUInt32NoTag(fEHNBOKNGEK.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < bBAOBMPIDIN.length(); i++) {
          output.writeRawByte((byte) 120);
          output.writeUInt32NoTag(bBAOBMPIDIN.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < kJPABHNAICF.length(); i++) {
          output.writeRawByte((byte) 90);
          output.writeMessageNoTag(kJPABHNAICF.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * fEHNBOKNGEK.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(fEHNBOKNGEK);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * bBAOBMPIDIN.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(bBAOBMPIDIN);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * kJPABHNAICF.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(kJPABHNAICF);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public IJJMLIFHIKK mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 26: {
            // fEHNBOKNGEK [packed=true]
            input.readPackedUInt32(fEHNBOKNGEK, tag);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // bBAOBMPIDIN [packed=true]
            input.readPackedUInt32(bBAOBMPIDIN, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // kJPABHNAICF
            tag = input.readRepeatedMessage(kJPABHNAICF, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 24: {
            // fEHNBOKNGEK [packed=false]
            tag = input.readRepeatedUInt32(fEHNBOKNGEK, tag);
            bitField0_ |= 0x00000001;
            break;
          }
          case 120: {
            // bBAOBMPIDIN [packed=false]
            tag = input.readRepeatedUInt32(bBAOBMPIDIN, tag);
            bitField0_ |= 0x00000002;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedUInt32(FieldNames.fEHNBOKNGEK, fEHNBOKNGEK);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.bBAOBMPIDIN, bBAOBMPIDIN);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.kJPABHNAICF, kJPABHNAICF);
      }
      output.endObject();
    }

    @Override
    public IJJMLIFHIKK mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 379505944: {
            if (input.isAtField(FieldNames.fEHNBOKNGEK)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(fEHNBOKNGEK);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1024214583: {
            if (input.isAtField(FieldNames.bBAOBMPIDIN)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(bBAOBMPIDIN);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 342632899: {
            if (input.isAtField(FieldNames.kJPABHNAICF)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(kJPABHNAICF);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public IJJMLIFHIKK clone() {
      return new IJJMLIFHIKK().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static IJJMLIFHIKK parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new IJJMLIFHIKK(), data).checkInitialized();
    }

    public static IJJMLIFHIKK parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new IJJMLIFHIKK(), input).checkInitialized();
    }

    public static IJJMLIFHIKK parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new IJJMLIFHIKK(), input).checkInitialized();
    }

    /**
     * @return factory for creating IJJMLIFHIKK messages
     */
    public static MessageFactory<IJJMLIFHIKK> getFactory() {
      return IJJMLIFHIKKFactory.INSTANCE;
    }

    private enum IJJMLIFHIKKFactory implements MessageFactory<IJJMLIFHIKK> {
      INSTANCE;

      @Override
      public IJJMLIFHIKK create() {
        return IJJMLIFHIKK.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName fEHNBOKNGEK = FieldName.forField("FEHNBOKNGEK");

      static final FieldName bBAOBMPIDIN = FieldName.forField("BBAOBMPIDIN");

      static final FieldName kJPABHNAICF = FieldName.forField("KJPABHNAICF");
    }
  }
}
