// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueCurseChestInfoOuterClass {
  /**
   * Protobuf type {@code RogueCurseChestInfo}
   */
  public static final class RogueCurseChestInfo extends ProtoMessage<RogueCurseChestInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 COPBHILIPEO = 1;</code>
     */
    private int cOPBHILIPEO;

    private RogueCurseChestInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueCurseChestInfo}
     */
    public static RogueCurseChestInfo newInstance() {
      return new RogueCurseChestInfo();
    }

    /**
     * <code>optional uint32 COPBHILIPEO = 1;</code>
     * @return whether the cOPBHILIPEO field is set
     */
    public boolean hasCOPBHILIPEO() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 COPBHILIPEO = 1;</code>
     * @return this
     */
    public RogueCurseChestInfo clearCOPBHILIPEO() {
      bitField0_ &= ~0x00000001;
      cOPBHILIPEO = 0;
      return this;
    }

    /**
     * <code>optional uint32 COPBHILIPEO = 1;</code>
     * @return the cOPBHILIPEO
     */
    public int getCOPBHILIPEO() {
      return cOPBHILIPEO;
    }

    /**
     * <code>optional uint32 COPBHILIPEO = 1;</code>
     * @param value the cOPBHILIPEO to set
     * @return this
     */
    public RogueCurseChestInfo setCOPBHILIPEO(final int value) {
      bitField0_ |= 0x00000001;
      cOPBHILIPEO = value;
      return this;
    }

    @Override
    public RogueCurseChestInfo copyFrom(final RogueCurseChestInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        cOPBHILIPEO = other.cOPBHILIPEO;
      }
      return this;
    }

    @Override
    public RogueCurseChestInfo mergeFrom(final RogueCurseChestInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCOPBHILIPEO()) {
        setCOPBHILIPEO(other.cOPBHILIPEO);
      }
      return this;
    }

    @Override
    public RogueCurseChestInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      cOPBHILIPEO = 0;
      return this;
    }

    @Override
    public RogueCurseChestInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueCurseChestInfo)) {
        return false;
      }
      RogueCurseChestInfo other = (RogueCurseChestInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasCOPBHILIPEO() || cOPBHILIPEO == other.cOPBHILIPEO);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(cOPBHILIPEO);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(cOPBHILIPEO);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueCurseChestInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // cOPBHILIPEO
            cOPBHILIPEO = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.cOPBHILIPEO, cOPBHILIPEO);
      }
      output.endObject();
    }

    @Override
    public RogueCurseChestInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -644300578: {
            if (input.isAtField(FieldNames.cOPBHILIPEO)) {
              if (!input.trySkipNullValue()) {
                cOPBHILIPEO = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueCurseChestInfo clone() {
      return new RogueCurseChestInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueCurseChestInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueCurseChestInfo(), data).checkInitialized();
    }

    public static RogueCurseChestInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCurseChestInfo(), input).checkInitialized();
    }

    public static RogueCurseChestInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueCurseChestInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueCurseChestInfo messages
     */
    public static MessageFactory<RogueCurseChestInfo> getFactory() {
      return RogueCurseChestInfoFactory.INSTANCE;
    }

    private enum RogueCurseChestInfoFactory implements MessageFactory<RogueCurseChestInfo> {
      INSTANCE;

      @Override
      public RogueCurseChestInfo create() {
        return RogueCurseChestInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName cOPBHILIPEO = FieldName.forField("COPBHILIPEO");
    }
  }
}
