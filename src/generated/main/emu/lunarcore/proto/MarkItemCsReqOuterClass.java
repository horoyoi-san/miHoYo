// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class MarkItemCsReqOuterClass {
  /**
   * Protobuf type {@code MarkItemCsReq}
   */
  public static final class MarkItemCsReq extends ProtoMessage<MarkItemCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 item_id = 10;</code>
     */
    private int itemId;

    /**
     * <code>optional bool NAEHPHHDGEK = 12;</code>
     */
    private boolean nAEHPHHDGEK;

    private MarkItemCsReq() {
    }

    /**
     * @return a new empty instance of {@code MarkItemCsReq}
     */
    public static MarkItemCsReq newInstance() {
      return new MarkItemCsReq();
    }

    /**
     * <code>optional uint32 item_id = 10;</code>
     * @return whether the itemId field is set
     */
    public boolean hasItemId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 item_id = 10;</code>
     * @return this
     */
    public MarkItemCsReq clearItemId() {
      bitField0_ &= ~0x00000001;
      itemId = 0;
      return this;
    }

    /**
     * <code>optional uint32 item_id = 10;</code>
     * @return the itemId
     */
    public int getItemId() {
      return itemId;
    }

    /**
     * <code>optional uint32 item_id = 10;</code>
     * @param value the itemId to set
     * @return this
     */
    public MarkItemCsReq setItemId(final int value) {
      bitField0_ |= 0x00000001;
      itemId = value;
      return this;
    }

    /**
     * <code>optional bool NAEHPHHDGEK = 12;</code>
     * @return whether the nAEHPHHDGEK field is set
     */
    public boolean hasNAEHPHHDGEK() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool NAEHPHHDGEK = 12;</code>
     * @return this
     */
    public MarkItemCsReq clearNAEHPHHDGEK() {
      bitField0_ &= ~0x00000002;
      nAEHPHHDGEK = false;
      return this;
    }

    /**
     * <code>optional bool NAEHPHHDGEK = 12;</code>
     * @return the nAEHPHHDGEK
     */
    public boolean getNAEHPHHDGEK() {
      return nAEHPHHDGEK;
    }

    /**
     * <code>optional bool NAEHPHHDGEK = 12;</code>
     * @param value the nAEHPHHDGEK to set
     * @return this
     */
    public MarkItemCsReq setNAEHPHHDGEK(final boolean value) {
      bitField0_ |= 0x00000002;
      nAEHPHHDGEK = value;
      return this;
    }

    @Override
    public MarkItemCsReq copyFrom(final MarkItemCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        itemId = other.itemId;
        nAEHPHHDGEK = other.nAEHPHHDGEK;
      }
      return this;
    }

    @Override
    public MarkItemCsReq mergeFrom(final MarkItemCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasItemId()) {
        setItemId(other.itemId);
      }
      if (other.hasNAEHPHHDGEK()) {
        setNAEHPHHDGEK(other.nAEHPHHDGEK);
      }
      return this;
    }

    @Override
    public MarkItemCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      itemId = 0;
      nAEHPHHDGEK = false;
      return this;
    }

    @Override
    public MarkItemCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MarkItemCsReq)) {
        return false;
      }
      MarkItemCsReq other = (MarkItemCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasItemId() || itemId == other.itemId)
        && (!hasNAEHPHHDGEK() || nAEHPHHDGEK == other.nAEHPHHDGEK);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(itemId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 96);
        output.writeBoolNoTag(nAEHPHHDGEK);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(itemId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MarkItemCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // itemId
            itemId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // nAEHPHHDGEK
            nAEHPHHDGEK = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.itemId, itemId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.nAEHPHHDGEK, nAEHPHHDGEK);
      }
      output.endObject();
    }

    @Override
    public MarkItemCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1178662002:
          case 2116204999: {
            if (input.isAtField(FieldNames.itemId)) {
              if (!input.trySkipNullValue()) {
                itemId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1728003229: {
            if (input.isAtField(FieldNames.nAEHPHHDGEK)) {
              if (!input.trySkipNullValue()) {
                nAEHPHHDGEK = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MarkItemCsReq clone() {
      return new MarkItemCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MarkItemCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MarkItemCsReq(), data).checkInitialized();
    }

    public static MarkItemCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MarkItemCsReq(), input).checkInitialized();
    }

    public static MarkItemCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MarkItemCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating MarkItemCsReq messages
     */
    public static MessageFactory<MarkItemCsReq> getFactory() {
      return MarkItemCsReqFactory.INSTANCE;
    }

    private enum MarkItemCsReqFactory implements MessageFactory<MarkItemCsReq> {
      INSTANCE;

      @Override
      public MarkItemCsReq create() {
        return MarkItemCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName itemId = FieldName.forField("itemId", "item_id");

      static final FieldName nAEHPHHDGEK = FieldName.forField("NAEHPHHDGEK");
    }
  }
}
