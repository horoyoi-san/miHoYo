// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class VirtualLineupTrialAvatarChangeScNotifyOuterClass {
  /**
   * Protobuf type {@code VirtualLineupTrialAvatarChangeScNotify}
   */
  public static final class VirtualLineupTrialAvatarChangeScNotify extends ProtoMessage<VirtualLineupTrialAvatarChangeScNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 plane_id = 4;</code>
     */
    private int planeId;

    /**
     * <code>optional bool CLIIGMNMHNA = 2;</code>
     */
    private boolean cLIIGMNMHNA;

    /**
     * <code>repeated uint32 IBLBNIANPHD = 8;</code>
     */
    private final RepeatedInt iBLBNIANPHD = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 KFMFFGGJMNE = 14;</code>
     */
    private final RepeatedInt kFMFFGGJMNE = RepeatedInt.newEmptyInstance();

    private VirtualLineupTrialAvatarChangeScNotify() {
    }

    /**
     * @return a new empty instance of {@code VirtualLineupTrialAvatarChangeScNotify}
     */
    public static VirtualLineupTrialAvatarChangeScNotify newInstance() {
      return new VirtualLineupTrialAvatarChangeScNotify();
    }

    /**
     * <code>optional uint32 plane_id = 4;</code>
     * @return whether the planeId field is set
     */
    public boolean hasPlaneId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 plane_id = 4;</code>
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify clearPlaneId() {
      bitField0_ &= ~0x00000001;
      planeId = 0;
      return this;
    }

    /**
     * <code>optional uint32 plane_id = 4;</code>
     * @return the planeId
     */
    public int getPlaneId() {
      return planeId;
    }

    /**
     * <code>optional uint32 plane_id = 4;</code>
     * @param value the planeId to set
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify setPlaneId(final int value) {
      bitField0_ |= 0x00000001;
      planeId = value;
      return this;
    }

    /**
     * <code>optional bool CLIIGMNMHNA = 2;</code>
     * @return whether the cLIIGMNMHNA field is set
     */
    public boolean hasCLIIGMNMHNA() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool CLIIGMNMHNA = 2;</code>
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify clearCLIIGMNMHNA() {
      bitField0_ &= ~0x00000002;
      cLIIGMNMHNA = false;
      return this;
    }

    /**
     * <code>optional bool CLIIGMNMHNA = 2;</code>
     * @return the cLIIGMNMHNA
     */
    public boolean getCLIIGMNMHNA() {
      return cLIIGMNMHNA;
    }

    /**
     * <code>optional bool CLIIGMNMHNA = 2;</code>
     * @param value the cLIIGMNMHNA to set
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify setCLIIGMNMHNA(final boolean value) {
      bitField0_ |= 0x00000002;
      cLIIGMNMHNA = value;
      return this;
    }

    /**
     * <code>repeated uint32 IBLBNIANPHD = 8;</code>
     * @return whether the iBLBNIANPHD field is set
     */
    public boolean hasIBLBNIANPHD() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 IBLBNIANPHD = 8;</code>
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify clearIBLBNIANPHD() {
      bitField0_ &= ~0x00000004;
      iBLBNIANPHD.clear();
      return this;
    }

    /**
     * <code>repeated uint32 IBLBNIANPHD = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableIBLBNIANPHD()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getIBLBNIANPHD() {
      return iBLBNIANPHD;
    }

    /**
     * <code>repeated uint32 IBLBNIANPHD = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableIBLBNIANPHD() {
      bitField0_ |= 0x00000004;
      return iBLBNIANPHD;
    }

    /**
     * <code>repeated uint32 IBLBNIANPHD = 8;</code>
     * @param value the iBLBNIANPHD to add
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify addIBLBNIANPHD(final int value) {
      bitField0_ |= 0x00000004;
      iBLBNIANPHD.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 IBLBNIANPHD = 8;</code>
     * @param values the iBLBNIANPHD to add
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify addAllIBLBNIANPHD(final int... values) {
      bitField0_ |= 0x00000004;
      iBLBNIANPHD.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 KFMFFGGJMNE = 14;</code>
     * @return whether the kFMFFGGJMNE field is set
     */
    public boolean hasKFMFFGGJMNE() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 KFMFFGGJMNE = 14;</code>
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify clearKFMFFGGJMNE() {
      bitField0_ &= ~0x00000008;
      kFMFFGGJMNE.clear();
      return this;
    }

    /**
     * <code>repeated uint32 KFMFFGGJMNE = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableKFMFFGGJMNE()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getKFMFFGGJMNE() {
      return kFMFFGGJMNE;
    }

    /**
     * <code>repeated uint32 KFMFFGGJMNE = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableKFMFFGGJMNE() {
      bitField0_ |= 0x00000008;
      return kFMFFGGJMNE;
    }

    /**
     * <code>repeated uint32 KFMFFGGJMNE = 14;</code>
     * @param value the kFMFFGGJMNE to add
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify addKFMFFGGJMNE(final int value) {
      bitField0_ |= 0x00000008;
      kFMFFGGJMNE.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 KFMFFGGJMNE = 14;</code>
     * @param values the kFMFFGGJMNE to add
     * @return this
     */
    public VirtualLineupTrialAvatarChangeScNotify addAllKFMFFGGJMNE(final int... values) {
      bitField0_ |= 0x00000008;
      kFMFFGGJMNE.addAll(values);
      return this;
    }

    @Override
    public VirtualLineupTrialAvatarChangeScNotify copyFrom(
        final VirtualLineupTrialAvatarChangeScNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        planeId = other.planeId;
        cLIIGMNMHNA = other.cLIIGMNMHNA;
        iBLBNIANPHD.copyFrom(other.iBLBNIANPHD);
        kFMFFGGJMNE.copyFrom(other.kFMFFGGJMNE);
      }
      return this;
    }

    @Override
    public VirtualLineupTrialAvatarChangeScNotify mergeFrom(
        final VirtualLineupTrialAvatarChangeScNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasPlaneId()) {
        setPlaneId(other.planeId);
      }
      if (other.hasCLIIGMNMHNA()) {
        setCLIIGMNMHNA(other.cLIIGMNMHNA);
      }
      if (other.hasIBLBNIANPHD()) {
        getMutableIBLBNIANPHD().addAll(other.iBLBNIANPHD);
      }
      if (other.hasKFMFFGGJMNE()) {
        getMutableKFMFFGGJMNE().addAll(other.kFMFFGGJMNE);
      }
      return this;
    }

    @Override
    public VirtualLineupTrialAvatarChangeScNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      planeId = 0;
      cLIIGMNMHNA = false;
      iBLBNIANPHD.clear();
      kFMFFGGJMNE.clear();
      return this;
    }

    @Override
    public VirtualLineupTrialAvatarChangeScNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      iBLBNIANPHD.clear();
      kFMFFGGJMNE.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof VirtualLineupTrialAvatarChangeScNotify)) {
        return false;
      }
      VirtualLineupTrialAvatarChangeScNotify other = (VirtualLineupTrialAvatarChangeScNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasPlaneId() || planeId == other.planeId)
        && (!hasCLIIGMNMHNA() || cLIIGMNMHNA == other.cLIIGMNMHNA)
        && (!hasIBLBNIANPHD() || iBLBNIANPHD.equals(other.iBLBNIANPHD))
        && (!hasKFMFFGGJMNE() || kFMFFGGJMNE.equals(other.kFMFFGGJMNE));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(planeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 16);
        output.writeBoolNoTag(cLIIGMNMHNA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < iBLBNIANPHD.length(); i++) {
          output.writeRawByte((byte) 64);
          output.writeUInt32NoTag(iBLBNIANPHD.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < kFMFFGGJMNE.length(); i++) {
          output.writeRawByte((byte) 112);
          output.writeUInt32NoTag(kFMFFGGJMNE.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(planeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * iBLBNIANPHD.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(iBLBNIANPHD);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * kFMFFGGJMNE.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(kFMFFGGJMNE);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public VirtualLineupTrialAvatarChangeScNotify mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // planeId
            planeId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // cLIIGMNMHNA
            cLIIGMNMHNA = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // iBLBNIANPHD [packed=true]
            input.readPackedUInt32(iBLBNIANPHD, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // kFMFFGGJMNE [packed=true]
            input.readPackedUInt32(kFMFFGGJMNE, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 64: {
            // iBLBNIANPHD [packed=false]
            tag = input.readRepeatedUInt32(iBLBNIANPHD, tag);
            bitField0_ |= 0x00000004;
            break;
          }
          case 112: {
            // kFMFFGGJMNE [packed=false]
            tag = input.readRepeatedUInt32(kFMFFGGJMNE, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.planeId, planeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.cLIIGMNMHNA, cLIIGMNMHNA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.iBLBNIANPHD, iBLBNIANPHD);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.kFMFFGGJMNE, kFMFFGGJMNE);
      }
      output.endObject();
    }

    @Override
    public VirtualLineupTrialAvatarChangeScNotify mergeFrom(final JsonSource input) throws
        IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -493896553:
          case 1869097438: {
            if (input.isAtField(FieldNames.planeId)) {
              if (!input.trySkipNullValue()) {
                planeId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1743738547: {
            if (input.isAtField(FieldNames.cLIIGMNMHNA)) {
              if (!input.trySkipNullValue()) {
                cLIIGMNMHNA = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -621470219: {
            if (input.isAtField(FieldNames.iBLBNIANPHD)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(iBLBNIANPHD);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1600426028: {
            if (input.isAtField(FieldNames.kFMFFGGJMNE)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(kFMFFGGJMNE);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public VirtualLineupTrialAvatarChangeScNotify clone() {
      return new VirtualLineupTrialAvatarChangeScNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static VirtualLineupTrialAvatarChangeScNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new VirtualLineupTrialAvatarChangeScNotify(), data).checkInitialized();
    }

    public static VirtualLineupTrialAvatarChangeScNotify parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new VirtualLineupTrialAvatarChangeScNotify(), input).checkInitialized();
    }

    public static VirtualLineupTrialAvatarChangeScNotify parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new VirtualLineupTrialAvatarChangeScNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating VirtualLineupTrialAvatarChangeScNotify messages
     */
    public static MessageFactory<VirtualLineupTrialAvatarChangeScNotify> getFactory() {
      return VirtualLineupTrialAvatarChangeScNotifyFactory.INSTANCE;
    }

    private enum VirtualLineupTrialAvatarChangeScNotifyFactory implements MessageFactory<VirtualLineupTrialAvatarChangeScNotify> {
      INSTANCE;

      @Override
      public VirtualLineupTrialAvatarChangeScNotify create() {
        return VirtualLineupTrialAvatarChangeScNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName planeId = FieldName.forField("planeId", "plane_id");

      static final FieldName cLIIGMNMHNA = FieldName.forField("CLIIGMNMHNA");

      static final FieldName iBLBNIANPHD = FieldName.forField("IBLBNIANPHD");

      static final FieldName kFMFFGGJMNE = FieldName.forField("KFMFFGGJMNE");
    }
  }
}
