// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChallengeLineupMemberOuterClass {
  /**
   * Protobuf type {@code ChallengeLineupMember}
   */
  public static final class ChallengeLineupMember extends ProtoMessage<ChallengeLineupMember> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 GGDIIBCDOBB = 2;</code>
     */
    private int gGDIIBCDOBB;

    /**
     * <code>optional uint32 id = 5;</code>
     */
    private int id;

    /**
     * <code>optional uint32 index = 14;</code>
     */
    private int index;

    /**
     * <code>optional uint32 level = 15;</code>
     */
    private int level;

    /**
     * <code>optional .AvatarType avatar_type = 12;</code>
     */
    private int avatarType;

    private ChallengeLineupMember() {
    }

    /**
     * @return a new empty instance of {@code ChallengeLineupMember}
     */
    public static ChallengeLineupMember newInstance() {
      return new ChallengeLineupMember();
    }

    /**
     * <code>optional uint32 GGDIIBCDOBB = 2;</code>
     * @return whether the gGDIIBCDOBB field is set
     */
    public boolean hasGGDIIBCDOBB() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 GGDIIBCDOBB = 2;</code>
     * @return this
     */
    public ChallengeLineupMember clearGGDIIBCDOBB() {
      bitField0_ &= ~0x00000001;
      gGDIIBCDOBB = 0;
      return this;
    }

    /**
     * <code>optional uint32 GGDIIBCDOBB = 2;</code>
     * @return the gGDIIBCDOBB
     */
    public int getGGDIIBCDOBB() {
      return gGDIIBCDOBB;
    }

    /**
     * <code>optional uint32 GGDIIBCDOBB = 2;</code>
     * @param value the gGDIIBCDOBB to set
     * @return this
     */
    public ChallengeLineupMember setGGDIIBCDOBB(final int value) {
      bitField0_ |= 0x00000001;
      gGDIIBCDOBB = value;
      return this;
    }

    /**
     * <code>optional uint32 id = 5;</code>
     * @return whether the id field is set
     */
    public boolean hasId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 id = 5;</code>
     * @return this
     */
    public ChallengeLineupMember clearId() {
      bitField0_ &= ~0x00000002;
      id = 0;
      return this;
    }

    /**
     * <code>optional uint32 id = 5;</code>
     * @return the id
     */
    public int getId() {
      return id;
    }

    /**
     * <code>optional uint32 id = 5;</code>
     * @param value the id to set
     * @return this
     */
    public ChallengeLineupMember setId(final int value) {
      bitField0_ |= 0x00000002;
      id = value;
      return this;
    }

    /**
     * <code>optional uint32 index = 14;</code>
     * @return whether the index field is set
     */
    public boolean hasIndex() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 index = 14;</code>
     * @return this
     */
    public ChallengeLineupMember clearIndex() {
      bitField0_ &= ~0x00000004;
      index = 0;
      return this;
    }

    /**
     * <code>optional uint32 index = 14;</code>
     * @return the index
     */
    public int getIndex() {
      return index;
    }

    /**
     * <code>optional uint32 index = 14;</code>
     * @param value the index to set
     * @return this
     */
    public ChallengeLineupMember setIndex(final int value) {
      bitField0_ |= 0x00000004;
      index = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 15;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 level = 15;</code>
     * @return this
     */
    public ChallengeLineupMember clearLevel() {
      bitField0_ &= ~0x00000008;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 15;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 15;</code>
     * @param value the level to set
     * @return this
     */
    public ChallengeLineupMember setLevel(final int value) {
      bitField0_ |= 0x00000008;
      level = value;
      return this;
    }

    /**
     * <code>optional .AvatarType avatar_type = 12;</code>
     * @return whether the avatarType field is set
     */
    public boolean hasAvatarType() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional .AvatarType avatar_type = 12;</code>
     * @return this
     */
    public ChallengeLineupMember clearAvatarType() {
      bitField0_ &= ~0x00000010;
      avatarType = 0;
      return this;
    }

    /**
     * <code>optional .AvatarType avatar_type = 12;</code>
     * @return the avatarType
     */
    public AvatarTypeOuterClass.AvatarType getAvatarType() {
      return AvatarTypeOuterClass.AvatarType.forNumber(avatarType);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link ChallengeLineupMember#getAvatarType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getAvatarTypeValue() {
      return avatarType;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link AvatarTypeOuterClass.AvatarType}. Setting an invalid value
     * can cause {@link ChallengeLineupMember#getAvatarType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public ChallengeLineupMember setAvatarTypeValue(final int value) {
      bitField0_ |= 0x00000010;
      avatarType = value;
      return this;
    }

    /**
     * <code>optional .AvatarType avatar_type = 12;</code>
     * @param value the avatarType to set
     * @return this
     */
    public ChallengeLineupMember setAvatarType(final AvatarTypeOuterClass.AvatarType value) {
      bitField0_ |= 0x00000010;
      avatarType = value.getNumber();
      return this;
    }

    @Override
    public ChallengeLineupMember copyFrom(final ChallengeLineupMember other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        gGDIIBCDOBB = other.gGDIIBCDOBB;
        id = other.id;
        index = other.index;
        level = other.level;
        avatarType = other.avatarType;
      }
      return this;
    }

    @Override
    public ChallengeLineupMember mergeFrom(final ChallengeLineupMember other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasGGDIIBCDOBB()) {
        setGGDIIBCDOBB(other.gGDIIBCDOBB);
      }
      if (other.hasId()) {
        setId(other.id);
      }
      if (other.hasIndex()) {
        setIndex(other.index);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasAvatarType()) {
        setAvatarTypeValue(other.avatarType);
      }
      return this;
    }

    @Override
    public ChallengeLineupMember clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      gGDIIBCDOBB = 0;
      id = 0;
      index = 0;
      level = 0;
      avatarType = 0;
      return this;
    }

    @Override
    public ChallengeLineupMember clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeLineupMember)) {
        return false;
      }
      ChallengeLineupMember other = (ChallengeLineupMember) o;
      return bitField0_ == other.bitField0_
        && (!hasGGDIIBCDOBB() || gGDIIBCDOBB == other.gGDIIBCDOBB)
        && (!hasId() || id == other.id)
        && (!hasIndex() || index == other.index)
        && (!hasLevel() || level == other.level)
        && (!hasAvatarType() || avatarType == other.avatarType);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(gGDIIBCDOBB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(id);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(index);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 96);
        output.writeEnumNoTag(avatarType);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(gGDIIBCDOBB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(id);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(index);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(avatarType);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeLineupMember mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // gGDIIBCDOBB
            gGDIIBCDOBB = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // id
            id = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // index
            index = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // avatarType
            final int value = input.readInt32();
            if (AvatarTypeOuterClass.AvatarType.forNumber(value) != null) {
              avatarType = value;
              bitField0_ |= 0x00000010;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.gGDIIBCDOBB, gGDIIBCDOBB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.id, id);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.index, index);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeEnum(FieldNames.avatarType, avatarType, AvatarTypeOuterClass.AvatarType.converter());
      }
      output.endObject();
    }

    @Override
    public ChallengeLineupMember mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1757005232: {
            if (input.isAtField(FieldNames.gGDIIBCDOBB)) {
              if (!input.trySkipNullValue()) {
                gGDIIBCDOBB = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3355: {
            if (input.isAtField(FieldNames.id)) {
              if (!input.trySkipNullValue()) {
                id = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 100346066: {
            if (input.isAtField(FieldNames.index)) {
              if (!input.trySkipNullValue()) {
                index = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -403148749:
          case 397309536: {
            if (input.isAtField(FieldNames.avatarType)) {
              if (!input.trySkipNullValue()) {
                final AvatarTypeOuterClass.AvatarType value = input.readEnum(AvatarTypeOuterClass.AvatarType.converter());
                if (value != null) {
                  avatarType = value.getNumber();
                  bitField0_ |= 0x00000010;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeLineupMember clone() {
      return new ChallengeLineupMember().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeLineupMember parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeLineupMember(), data).checkInitialized();
    }

    public static ChallengeLineupMember parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeLineupMember(), input).checkInitialized();
    }

    public static ChallengeLineupMember parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeLineupMember(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeLineupMember messages
     */
    public static MessageFactory<ChallengeLineupMember> getFactory() {
      return ChallengeLineupMemberFactory.INSTANCE;
    }

    private enum ChallengeLineupMemberFactory implements MessageFactory<ChallengeLineupMember> {
      INSTANCE;

      @Override
      public ChallengeLineupMember create() {
        return ChallengeLineupMember.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName gGDIIBCDOBB = FieldName.forField("GGDIIBCDOBB");

      static final FieldName id = FieldName.forField("id");

      static final FieldName index = FieldName.forField("index");

      static final FieldName level = FieldName.forField("level");

      static final FieldName avatarType = FieldName.forField("avatarType", "avatar_type");
    }
  }
}
