// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import us.hebi.quickbuf.ProtoEnum;
import us.hebi.quickbuf.ProtoUtil;

public final class MovieRacingTypeOuterClass {
  /**
   * Protobuf enum {@code MovieRacingType}
   */
  public enum MovieRacingType implements ProtoEnum<MovieRacingType> {
    /**
     * <code>MOVIE_RACING_OVER_TAKE = 0;</code>
     */
    MOVIE_RACING_OVER_TAKE("MOVIE_RACING_OVER_TAKE", 0),

    /**
     * <code>MOVIE_RACING_OVER_TAKE_ENDLESS = 1;</code>
     */
    MOVIE_RACING_OVER_TAKE_ENDLESS("MOVIE_RACING_OVER_TAKE_ENDLESS", 1),

    /**
     * <code>MOVIE_RACING_SHOOTING = 2;</code>
     */
    MOVIE_RACING_SHOOTING("MOVIE_RACING_SHOOTING", 2),

    /**
     * <code>MOVIE_RACING_SHOOTING_ENDLESS = 3;</code>
     */
    MOVIE_RACING_SHOOTING_ENDLESS("MOVIE_RACING_SHOOTING_ENDLESS", 3);

    /**
     * <code>MOVIE_RACING_OVER_TAKE = 0;</code>
     */
    public static final int MOVIE_RACING_OVER_TAKE_VALUE = 0;

    /**
     * <code>MOVIE_RACING_OVER_TAKE_ENDLESS = 1;</code>
     */
    public static final int MOVIE_RACING_OVER_TAKE_ENDLESS_VALUE = 1;

    /**
     * <code>MOVIE_RACING_SHOOTING = 2;</code>
     */
    public static final int MOVIE_RACING_SHOOTING_VALUE = 2;

    /**
     * <code>MOVIE_RACING_SHOOTING_ENDLESS = 3;</code>
     */
    public static final int MOVIE_RACING_SHOOTING_ENDLESS_VALUE = 3;

    private final String name;

    private final int number;

    private MovieRacingType(String name, int number) {
      this.name = name;
      this.number = number;
    }

    /**
     * @return the string representation of enum entry
     */
    @Override
    public String getName() {
      return name;
    }

    /**
     * @return the numeric wire value of this enum entry
     */
    @Override
    public int getNumber() {
      return number;
    }

    /**
     * @return a converter that maps between this enum's numeric and text representations
     */
    public static ProtoEnum.EnumConverter<MovieRacingType> converter() {
      return MovieRacingTypeConverter.INSTANCE;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value, or null if unknown.
     */
    public static MovieRacingType forNumber(int value) {
      return MovieRacingTypeConverter.INSTANCE.forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @param other Fallback value in case the value is not known.
     * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
     */
    public static MovieRacingType forNumberOr(int number, MovieRacingType other) {
      MovieRacingType value = forNumber(number);
      return value == null ? other : value;
    }

    enum MovieRacingTypeConverter implements ProtoEnum.EnumConverter<MovieRacingType> {
      INSTANCE;

      private static final MovieRacingType[] lookup = new MovieRacingType[4];

      static {
        lookup[0] = MOVIE_RACING_OVER_TAKE;
        lookup[1] = MOVIE_RACING_OVER_TAKE_ENDLESS;
        lookup[2] = MOVIE_RACING_SHOOTING;
        lookup[3] = MOVIE_RACING_SHOOTING_ENDLESS;
      }

      @Override
      public final MovieRacingType forNumber(final int value) {
        if (value >= 0 && value < lookup.length) {
          return lookup[value];
        }
        return null;
      }

      @Override
      public final MovieRacingType forName(final CharSequence value) {
        switch (value.length()) {
          case 21: {
            if (ProtoUtil.isEqual("MOVIE_RACING_SHOOTING", value)) {
              return MOVIE_RACING_SHOOTING;
            }
            break;
          }
          case 22: {
            if (ProtoUtil.isEqual("MOVIE_RACING_OVER_TAKE", value)) {
              return MOVIE_RACING_OVER_TAKE;
            }
            break;
          }
          case 29: {
            if (ProtoUtil.isEqual("MOVIE_RACING_SHOOTING_ENDLESS", value)) {
              return MOVIE_RACING_SHOOTING_ENDLESS;
            }
            break;
          }
          case 30: {
            if (ProtoUtil.isEqual("MOVIE_RACING_OVER_TAKE_ENDLESS", value)) {
              return MOVIE_RACING_OVER_TAKE_ENDLESS;
            }
            break;
          }
        }
        return null;
      }
    }
  }
}
