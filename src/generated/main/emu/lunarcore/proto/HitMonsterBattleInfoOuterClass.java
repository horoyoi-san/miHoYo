// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class HitMonsterBattleInfoOuterClass {
  /**
   * Protobuf type {@code HitMonsterBattleInfo}
   */
  public static final class HitMonsterBattleInfo extends ProtoMessage<HitMonsterBattleInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 target_monster_entity_id = 4;</code>
     */
    private int targetMonsterEntityId;

    /**
     * <code>optional .MonsterBattleType monster_battle_type = 10;</code>
     */
    private int monsterBattleType;

    private HitMonsterBattleInfo() {
    }

    /**
     * @return a new empty instance of {@code HitMonsterBattleInfo}
     */
    public static HitMonsterBattleInfo newInstance() {
      return new HitMonsterBattleInfo();
    }

    /**
     * <code>optional uint32 target_monster_entity_id = 4;</code>
     * @return whether the targetMonsterEntityId field is set
     */
    public boolean hasTargetMonsterEntityId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 target_monster_entity_id = 4;</code>
     * @return this
     */
    public HitMonsterBattleInfo clearTargetMonsterEntityId() {
      bitField0_ &= ~0x00000001;
      targetMonsterEntityId = 0;
      return this;
    }

    /**
     * <code>optional uint32 target_monster_entity_id = 4;</code>
     * @return the targetMonsterEntityId
     */
    public int getTargetMonsterEntityId() {
      return targetMonsterEntityId;
    }

    /**
     * <code>optional uint32 target_monster_entity_id = 4;</code>
     * @param value the targetMonsterEntityId to set
     * @return this
     */
    public HitMonsterBattleInfo setTargetMonsterEntityId(final int value) {
      bitField0_ |= 0x00000001;
      targetMonsterEntityId = value;
      return this;
    }

    /**
     * <code>optional .MonsterBattleType monster_battle_type = 10;</code>
     * @return whether the monsterBattleType field is set
     */
    public boolean hasMonsterBattleType() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .MonsterBattleType monster_battle_type = 10;</code>
     * @return this
     */
    public HitMonsterBattleInfo clearMonsterBattleType() {
      bitField0_ &= ~0x00000002;
      monsterBattleType = 0;
      return this;
    }

    /**
     * <code>optional .MonsterBattleType monster_battle_type = 10;</code>
     * @return the monsterBattleType
     */
    public MonsterBattleTypeOuterClass.MonsterBattleType getMonsterBattleType() {
      return MonsterBattleTypeOuterClass.MonsterBattleType.forNumber(monsterBattleType);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link HitMonsterBattleInfo#getMonsterBattleType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getMonsterBattleTypeValue() {
      return monsterBattleType;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link MonsterBattleTypeOuterClass.MonsterBattleType}. Setting an invalid value
     * can cause {@link HitMonsterBattleInfo#getMonsterBattleType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public HitMonsterBattleInfo setMonsterBattleTypeValue(final int value) {
      bitField0_ |= 0x00000002;
      monsterBattleType = value;
      return this;
    }

    /**
     * <code>optional .MonsterBattleType monster_battle_type = 10;</code>
     * @param value the monsterBattleType to set
     * @return this
     */
    public HitMonsterBattleInfo setMonsterBattleType(
        final MonsterBattleTypeOuterClass.MonsterBattleType value) {
      bitField0_ |= 0x00000002;
      monsterBattleType = value.getNumber();
      return this;
    }

    @Override
    public HitMonsterBattleInfo copyFrom(final HitMonsterBattleInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        targetMonsterEntityId = other.targetMonsterEntityId;
        monsterBattleType = other.monsterBattleType;
      }
      return this;
    }

    @Override
    public HitMonsterBattleInfo mergeFrom(final HitMonsterBattleInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasTargetMonsterEntityId()) {
        setTargetMonsterEntityId(other.targetMonsterEntityId);
      }
      if (other.hasMonsterBattleType()) {
        setMonsterBattleTypeValue(other.monsterBattleType);
      }
      return this;
    }

    @Override
    public HitMonsterBattleInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      targetMonsterEntityId = 0;
      monsterBattleType = 0;
      return this;
    }

    @Override
    public HitMonsterBattleInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof HitMonsterBattleInfo)) {
        return false;
      }
      HitMonsterBattleInfo other = (HitMonsterBattleInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasTargetMonsterEntityId() || targetMonsterEntityId == other.targetMonsterEntityId)
        && (!hasMonsterBattleType() || monsterBattleType == other.monsterBattleType);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(targetMonsterEntityId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeEnumNoTag(monsterBattleType);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(targetMonsterEntityId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(monsterBattleType);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public HitMonsterBattleInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // targetMonsterEntityId
            targetMonsterEntityId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // monsterBattleType
            final int value = input.readInt32();
            if (MonsterBattleTypeOuterClass.MonsterBattleType.forNumber(value) != null) {
              monsterBattleType = value;
              bitField0_ |= 0x00000002;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.targetMonsterEntityId, targetMonsterEntityId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeEnum(FieldNames.monsterBattleType, monsterBattleType, MonsterBattleTypeOuterClass.MonsterBattleType.converter());
      }
      output.endObject();
    }

    @Override
    public HitMonsterBattleInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 2083947655:
          case -340913756: {
            if (input.isAtField(FieldNames.targetMonsterEntityId)) {
              if (!input.trySkipNullValue()) {
                targetMonsterEntityId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1794911348:
          case -2099684996: {
            if (input.isAtField(FieldNames.monsterBattleType)) {
              if (!input.trySkipNullValue()) {
                final MonsterBattleTypeOuterClass.MonsterBattleType value = input.readEnum(MonsterBattleTypeOuterClass.MonsterBattleType.converter());
                if (value != null) {
                  monsterBattleType = value.getNumber();
                  bitField0_ |= 0x00000002;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public HitMonsterBattleInfo clone() {
      return new HitMonsterBattleInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static HitMonsterBattleInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new HitMonsterBattleInfo(), data).checkInitialized();
    }

    public static HitMonsterBattleInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HitMonsterBattleInfo(), input).checkInitialized();
    }

    public static HitMonsterBattleInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HitMonsterBattleInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating HitMonsterBattleInfo messages
     */
    public static MessageFactory<HitMonsterBattleInfo> getFactory() {
      return HitMonsterBattleInfoFactory.INSTANCE;
    }

    private enum HitMonsterBattleInfoFactory implements MessageFactory<HitMonsterBattleInfo> {
      INSTANCE;

      @Override
      public HitMonsterBattleInfo create() {
        return HitMonsterBattleInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName targetMonsterEntityId = FieldName.forField("targetMonsterEntityId", "target_monster_entity_id");

      static final FieldName monsterBattleType = FieldName.forField("monsterBattleType", "monster_battle_type");
    }
  }
}
