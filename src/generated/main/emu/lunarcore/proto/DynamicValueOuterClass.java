// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.ProtoUtil;
import us.hebi.quickbuf.Utf8String;

public final class DynamicValueOuterClass {
  /**
   * Protobuf type {@code DynamicValue}
   */
  public static final class DynamicValue extends ProtoMessage<DynamicValue> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional float value = 7;</code>
     */
    private float value_;

    /**
     * <code>optional string key = 3;</code>
     */
    private final Utf8String key = Utf8String.newEmptyInstance();

    private DynamicValue() {
    }

    /**
     * @return a new empty instance of {@code DynamicValue}
     */
    public static DynamicValue newInstance() {
      return new DynamicValue();
    }

    /**
     * <code>optional float value = 7;</code>
     * @return whether the value_ field is set
     */
    public boolean hasValue() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional float value = 7;</code>
     * @return this
     */
    public DynamicValue clearValue() {
      bitField0_ &= ~0x00000001;
      value_ = 0F;
      return this;
    }

    /**
     * <code>optional float value = 7;</code>
     * @return the value_
     */
    public float getValue() {
      return value_;
    }

    /**
     * <code>optional float value = 7;</code>
     * @param value the value_ to set
     * @return this
     */
    public DynamicValue setValue(final float value) {
      bitField0_ |= 0x00000001;
      value_ = value;
      return this;
    }

    /**
     * <code>optional string key = 3;</code>
     * @return whether the key field is set
     */
    public boolean hasKey() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional string key = 3;</code>
     * @return this
     */
    public DynamicValue clearKey() {
      bitField0_ &= ~0x00000002;
      key.clear();
      return this;
    }

    /**
     * <code>optional string key = 3;</code>
     * @return the key
     */
    public String getKey() {
      return key.getString();
    }

    /**
     * <code>optional string key = 3;</code>
     * @return internal {@code Utf8String} representation of key for reading
     */
    public Utf8String getKeyBytes() {
      return this.key;
    }

    /**
     * <code>optional string key = 3;</code>
     * @return internal {@code Utf8String} representation of key for modifications
     */
    public Utf8String getMutableKeyBytes() {
      bitField0_ |= 0x00000002;
      return this.key;
    }

    /**
     * <code>optional string key = 3;</code>
     * @param value the key to set
     * @return this
     */
    public DynamicValue setKey(final CharSequence value) {
      bitField0_ |= 0x00000002;
      key.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string key = 3;</code>
     * @param value the key to set
     * @return this
     */
    public DynamicValue setKey(final Utf8String value) {
      bitField0_ |= 0x00000002;
      key.copyFrom(value);
      return this;
    }

    @Override
    public DynamicValue copyFrom(final DynamicValue other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        value_ = other.value_;
        key.copyFrom(other.key);
      }
      return this;
    }

    @Override
    public DynamicValue mergeFrom(final DynamicValue other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasValue()) {
        setValue(other.value_);
      }
      if (other.hasKey()) {
        getMutableKeyBytes().copyFrom(other.key);
      }
      return this;
    }

    @Override
    public DynamicValue clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      value_ = 0F;
      key.clear();
      return this;
    }

    @Override
    public DynamicValue clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      key.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof DynamicValue)) {
        return false;
      }
      DynamicValue other = (DynamicValue) o;
      return bitField0_ == other.bitField0_
        && (!hasValue() || ProtoUtil.isEqual(value_, other.value_))
        && (!hasKey() || key.equals(other.key));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 61);
        output.writeFloatNoTag(value_);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 26);
        output.writeStringNoTag(key);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 5;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(key);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public DynamicValue mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 61: {
            // value_
            value_ = input.readFloat();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // key
            input.readString(key);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeFloat(FieldNames.value_, value_);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeString(FieldNames.key, key);
      }
      output.endObject();
    }

    @Override
    public DynamicValue mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 111972721: {
            if (input.isAtField(FieldNames.value_)) {
              if (!input.trySkipNullValue()) {
                value_ = input.readFloat();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 106079: {
            if (input.isAtField(FieldNames.key)) {
              if (!input.trySkipNullValue()) {
                input.readString(key);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public DynamicValue clone() {
      return new DynamicValue().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static DynamicValue parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new DynamicValue(), data).checkInitialized();
    }

    public static DynamicValue parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new DynamicValue(), input).checkInitialized();
    }

    public static DynamicValue parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new DynamicValue(), input).checkInitialized();
    }

    /**
     * @return factory for creating DynamicValue messages
     */
    public static MessageFactory<DynamicValue> getFactory() {
      return DynamicValueFactory.INSTANCE;
    }

    private enum DynamicValueFactory implements MessageFactory<DynamicValue> {
      INSTANCE;

      @Override
      public DynamicValue create() {
        return DynamicValue.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName value_ = FieldName.forField("value");

      static final FieldName key = FieldName.forField("key");
    }
  }
}
