// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class SceneCastSkillScRspOuterClass {
  /**
   * Protobuf type {@code SceneCastSkillScRsp}
   */
  public static final class SceneCastSkillScRsp extends ProtoMessage<SceneCastSkillScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 14;</code>
     */
    private int retcode;

    /**
     * <code>optional uint32 attacked_group_id = 15;</code>
     */
    private int attackedGroupId;

    /**
     * <code>optional .SceneBattleInfo battle_info = 9;</code>
     */
    private final SceneBattleInfoOuterClass.SceneBattleInfo battleInfo = SceneBattleInfoOuterClass.SceneBattleInfo.newInstance();

    /**
     * <code>repeated .HitMonsterBattleInfo monster_battle_info = 13;</code>
     */
    private final RepeatedMessage<HitMonsterBattleInfoOuterClass.HitMonsterBattleInfo> monsterBattleInfo = RepeatedMessage.newEmptyInstance(HitMonsterBattleInfoOuterClass.HitMonsterBattleInfo.getFactory());

    private SceneCastSkillScRsp() {
    }

    /**
     * @return a new empty instance of {@code SceneCastSkillScRsp}
     */
    public static SceneCastSkillScRsp newInstance() {
      return new SceneCastSkillScRsp();
    }

    /**
     * <code>optional uint32 retcode = 14;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 14;</code>
     * @return this
     */
    public SceneCastSkillScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 14;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 14;</code>
     * @param value the retcode to set
     * @return this
     */
    public SceneCastSkillScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional uint32 attacked_group_id = 15;</code>
     * @return whether the attackedGroupId field is set
     */
    public boolean hasAttackedGroupId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 attacked_group_id = 15;</code>
     * @return this
     */
    public SceneCastSkillScRsp clearAttackedGroupId() {
      bitField0_ &= ~0x00000002;
      attackedGroupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 attacked_group_id = 15;</code>
     * @return the attackedGroupId
     */
    public int getAttackedGroupId() {
      return attackedGroupId;
    }

    /**
     * <code>optional uint32 attacked_group_id = 15;</code>
     * @param value the attackedGroupId to set
     * @return this
     */
    public SceneCastSkillScRsp setAttackedGroupId(final int value) {
      bitField0_ |= 0x00000002;
      attackedGroupId = value;
      return this;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 9;</code>
     * @return whether the battleInfo field is set
     */
    public boolean hasBattleInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 9;</code>
     * @return this
     */
    public SceneCastSkillScRsp clearBattleInfo() {
      bitField0_ &= ~0x00000004;
      battleInfo.clear();
      return this;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBattleInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public SceneBattleInfoOuterClass.SceneBattleInfo getBattleInfo() {
      return battleInfo;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public SceneBattleInfoOuterClass.SceneBattleInfo getMutableBattleInfo() {
      bitField0_ |= 0x00000004;
      return battleInfo;
    }

    /**
     * <code>optional .SceneBattleInfo battle_info = 9;</code>
     * @param value the battleInfo to set
     * @return this
     */
    public SceneCastSkillScRsp setBattleInfo(
        final SceneBattleInfoOuterClass.SceneBattleInfo value) {
      bitField0_ |= 0x00000004;
      battleInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .HitMonsterBattleInfo monster_battle_info = 13;</code>
     * @return whether the monsterBattleInfo field is set
     */
    public boolean hasMonsterBattleInfo() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .HitMonsterBattleInfo monster_battle_info = 13;</code>
     * @return this
     */
    public SceneCastSkillScRsp clearMonsterBattleInfo() {
      bitField0_ &= ~0x00000008;
      monsterBattleInfo.clear();
      return this;
    }

    /**
     * <code>repeated .HitMonsterBattleInfo monster_battle_info = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMonsterBattleInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<HitMonsterBattleInfoOuterClass.HitMonsterBattleInfo> getMonsterBattleInfo(
        ) {
      return monsterBattleInfo;
    }

    /**
     * <code>repeated .HitMonsterBattleInfo monster_battle_info = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<HitMonsterBattleInfoOuterClass.HitMonsterBattleInfo> getMutableMonsterBattleInfo(
        ) {
      bitField0_ |= 0x00000008;
      return monsterBattleInfo;
    }

    /**
     * <code>repeated .HitMonsterBattleInfo monster_battle_info = 13;</code>
     * @param value the monsterBattleInfo to add
     * @return this
     */
    public SceneCastSkillScRsp addMonsterBattleInfo(
        final HitMonsterBattleInfoOuterClass.HitMonsterBattleInfo value) {
      bitField0_ |= 0x00000008;
      monsterBattleInfo.add(value);
      return this;
    }

    /**
     * <code>repeated .HitMonsterBattleInfo monster_battle_info = 13;</code>
     * @param values the monsterBattleInfo to add
     * @return this
     */
    public SceneCastSkillScRsp addAllMonsterBattleInfo(
        final HitMonsterBattleInfoOuterClass.HitMonsterBattleInfo... values) {
      bitField0_ |= 0x00000008;
      monsterBattleInfo.addAll(values);
      return this;
    }

    @Override
    public SceneCastSkillScRsp copyFrom(final SceneCastSkillScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        attackedGroupId = other.attackedGroupId;
        battleInfo.copyFrom(other.battleInfo);
        monsterBattleInfo.copyFrom(other.monsterBattleInfo);
      }
      return this;
    }

    @Override
    public SceneCastSkillScRsp mergeFrom(final SceneCastSkillScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasAttackedGroupId()) {
        setAttackedGroupId(other.attackedGroupId);
      }
      if (other.hasBattleInfo()) {
        getMutableBattleInfo().mergeFrom(other.battleInfo);
      }
      if (other.hasMonsterBattleInfo()) {
        getMutableMonsterBattleInfo().addAll(other.monsterBattleInfo);
      }
      return this;
    }

    @Override
    public SceneCastSkillScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      attackedGroupId = 0;
      battleInfo.clear();
      monsterBattleInfo.clear();
      return this;
    }

    @Override
    public SceneCastSkillScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      battleInfo.clearQuick();
      monsterBattleInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SceneCastSkillScRsp)) {
        return false;
      }
      SceneCastSkillScRsp other = (SceneCastSkillScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasAttackedGroupId() || attackedGroupId == other.attackedGroupId)
        && (!hasBattleInfo() || battleInfo.equals(other.battleInfo))
        && (!hasMonsterBattleInfo() || monsterBattleInfo.equals(other.monsterBattleInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(attackedGroupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 74);
        output.writeMessageNoTag(battleInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < monsterBattleInfo.length(); i++) {
          output.writeRawByte((byte) 106);
          output.writeMessageNoTag(monsterBattleInfo.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(attackedGroupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(battleInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * monsterBattleInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(monsterBattleInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SceneCastSkillScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 112: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // attackedGroupId
            attackedGroupId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // battleInfo
            input.readMessage(battleInfo);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // monsterBattleInfo
            tag = input.readRepeatedMessage(monsterBattleInfo, tag);
            bitField0_ |= 0x00000008;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.attackedGroupId, attackedGroupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.battleInfo, battleInfo);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.monsterBattleInfo, monsterBattleInfo);
      }
      output.endObject();
    }

    @Override
    public SceneCastSkillScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1725961965:
          case -715836621: {
            if (input.isAtField(FieldNames.attackedGroupId)) {
              if (!input.trySkipNullValue()) {
                attackedGroupId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2053377414:
          case -749633579: {
            if (input.isAtField(FieldNames.battleInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(battleInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1795249920:
          case -2100023568: {
            if (input.isAtField(FieldNames.monsterBattleInfo)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(monsterBattleInfo);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SceneCastSkillScRsp clone() {
      return new SceneCastSkillScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SceneCastSkillScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SceneCastSkillScRsp(), data).checkInitialized();
    }

    public static SceneCastSkillScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneCastSkillScRsp(), input).checkInitialized();
    }

    public static SceneCastSkillScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneCastSkillScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating SceneCastSkillScRsp messages
     */
    public static MessageFactory<SceneCastSkillScRsp> getFactory() {
      return SceneCastSkillScRspFactory.INSTANCE;
    }

    private enum SceneCastSkillScRspFactory implements MessageFactory<SceneCastSkillScRsp> {
      INSTANCE;

      @Override
      public SceneCastSkillScRsp create() {
        return SceneCastSkillScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName attackedGroupId = FieldName.forField("attackedGroupId", "attacked_group_id");

      static final FieldName battleInfo = FieldName.forField("battleInfo", "battle_info");

      static final FieldName monsterBattleInfo = FieldName.forField("monsterBattleInfo", "monster_battle_info");
    }
  }
}
