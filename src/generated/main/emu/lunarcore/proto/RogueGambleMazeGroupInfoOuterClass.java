// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueGambleMazeGroupInfoOuterClass {
  /**
   * Protobuf type {@code RogueGambleMazeGroupInfo}
   */
  public static final class RogueGambleMazeGroupInfo extends ProtoMessage<RogueGambleMazeGroupInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 group_id = 1;</code>
     */
    private int groupId;

    /**
     * <code>optional bool group_enable = 13;</code>
     */
    private boolean groupEnable;

    /**
     * <code>repeated .RogueGambleMazeInfo maze_list = 10;</code>
     */
    private final RepeatedMessage<RogueGambleMazeInfoOuterClass.RogueGambleMazeInfo> mazeList = RepeatedMessage.newEmptyInstance(RogueGambleMazeInfoOuterClass.RogueGambleMazeInfo.getFactory());

    private RogueGambleMazeGroupInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueGambleMazeGroupInfo}
     */
    public static RogueGambleMazeGroupInfo newInstance() {
      return new RogueGambleMazeGroupInfo();
    }

    /**
     * <code>optional uint32 group_id = 1;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 group_id = 1;</code>
     * @return this
     */
    public RogueGambleMazeGroupInfo clearGroupId() {
      bitField0_ &= ~0x00000001;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 1;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 group_id = 1;</code>
     * @param value the groupId to set
     * @return this
     */
    public RogueGambleMazeGroupInfo setGroupId(final int value) {
      bitField0_ |= 0x00000001;
      groupId = value;
      return this;
    }

    /**
     * <code>optional bool group_enable = 13;</code>
     * @return whether the groupEnable field is set
     */
    public boolean hasGroupEnable() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool group_enable = 13;</code>
     * @return this
     */
    public RogueGambleMazeGroupInfo clearGroupEnable() {
      bitField0_ &= ~0x00000002;
      groupEnable = false;
      return this;
    }

    /**
     * <code>optional bool group_enable = 13;</code>
     * @return the groupEnable
     */
    public boolean getGroupEnable() {
      return groupEnable;
    }

    /**
     * <code>optional bool group_enable = 13;</code>
     * @param value the groupEnable to set
     * @return this
     */
    public RogueGambleMazeGroupInfo setGroupEnable(final boolean value) {
      bitField0_ |= 0x00000002;
      groupEnable = value;
      return this;
    }

    /**
     * <code>repeated .RogueGambleMazeInfo maze_list = 10;</code>
     * @return whether the mazeList field is set
     */
    public boolean hasMazeList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .RogueGambleMazeInfo maze_list = 10;</code>
     * @return this
     */
    public RogueGambleMazeGroupInfo clearMazeList() {
      bitField0_ &= ~0x00000004;
      mazeList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueGambleMazeInfo maze_list = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMazeList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueGambleMazeInfoOuterClass.RogueGambleMazeInfo> getMazeList() {
      return mazeList;
    }

    /**
     * <code>repeated .RogueGambleMazeInfo maze_list = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueGambleMazeInfoOuterClass.RogueGambleMazeInfo> getMutableMazeList() {
      bitField0_ |= 0x00000004;
      return mazeList;
    }

    /**
     * <code>repeated .RogueGambleMazeInfo maze_list = 10;</code>
     * @param value the mazeList to add
     * @return this
     */
    public RogueGambleMazeGroupInfo addMazeList(
        final RogueGambleMazeInfoOuterClass.RogueGambleMazeInfo value) {
      bitField0_ |= 0x00000004;
      mazeList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueGambleMazeInfo maze_list = 10;</code>
     * @param values the mazeList to add
     * @return this
     */
    public RogueGambleMazeGroupInfo addAllMazeList(
        final RogueGambleMazeInfoOuterClass.RogueGambleMazeInfo... values) {
      bitField0_ |= 0x00000004;
      mazeList.addAll(values);
      return this;
    }

    @Override
    public RogueGambleMazeGroupInfo copyFrom(final RogueGambleMazeGroupInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        groupId = other.groupId;
        groupEnable = other.groupEnable;
        mazeList.copyFrom(other.mazeList);
      }
      return this;
    }

    @Override
    public RogueGambleMazeGroupInfo mergeFrom(final RogueGambleMazeGroupInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasGroupEnable()) {
        setGroupEnable(other.groupEnable);
      }
      if (other.hasMazeList()) {
        getMutableMazeList().addAll(other.mazeList);
      }
      return this;
    }

    @Override
    public RogueGambleMazeGroupInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      groupId = 0;
      groupEnable = false;
      mazeList.clear();
      return this;
    }

    @Override
    public RogueGambleMazeGroupInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mazeList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueGambleMazeGroupInfo)) {
        return false;
      }
      RogueGambleMazeGroupInfo other = (RogueGambleMazeGroupInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasGroupEnable() || groupEnable == other.groupEnable)
        && (!hasMazeList() || mazeList.equals(other.mazeList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeBoolNoTag(groupEnable);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < mazeList.length(); i++) {
          output.writeRawByte((byte) 82);
          output.writeMessageNoTag(mazeList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * mazeList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(mazeList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueGambleMazeGroupInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // groupEnable
            groupEnable = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // mazeList
            tag = input.readRepeatedMessage(mazeList, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.groupEnable, groupEnable);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.mazeList, mazeList);
      }
      output.endObject();
    }

    @Override
    public RogueGambleMazeGroupInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 352447714:
          case -604459197: {
            if (input.isAtField(FieldNames.groupEnable)) {
              if (!input.trySkipNullValue()) {
                groupEnable = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 469710077:
          case 1693737246: {
            if (input.isAtField(FieldNames.mazeList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(mazeList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueGambleMazeGroupInfo clone() {
      return new RogueGambleMazeGroupInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueGambleMazeGroupInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueGambleMazeGroupInfo(), data).checkInitialized();
    }

    public static RogueGambleMazeGroupInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueGambleMazeGroupInfo(), input).checkInitialized();
    }

    public static RogueGambleMazeGroupInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueGambleMazeGroupInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueGambleMazeGroupInfo messages
     */
    public static MessageFactory<RogueGambleMazeGroupInfo> getFactory() {
      return RogueGambleMazeGroupInfoFactory.INSTANCE;
    }

    private enum RogueGambleMazeGroupInfoFactory implements MessageFactory<RogueGambleMazeGroupInfo> {
      INSTANCE;

      @Override
      public RogueGambleMazeGroupInfo create() {
        return RogueGambleMazeGroupInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName groupId = FieldName.forField("groupId", "group_id");

      static final FieldName groupEnable = FieldName.forField("groupEnable", "group_enable");

      static final FieldName mazeList = FieldName.forField("mazeList", "maze_list");
    }
  }
}
