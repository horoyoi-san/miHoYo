// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueGambleMazeInfoOuterClass {
  /**
   * Protobuf type {@code RogueGambleMazeInfo}
   */
  public static final class RogueGambleMazeInfo extends ProtoMessage<RogueGambleMazeInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 maze_id = 14;</code>
     */
    private int mazeId;

    /**
     * <code>optional bool maze_enable = 10;</code>
     */
    private boolean mazeEnable;

    private RogueGambleMazeInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueGambleMazeInfo}
     */
    public static RogueGambleMazeInfo newInstance() {
      return new RogueGambleMazeInfo();
    }

    /**
     * <code>optional uint32 maze_id = 14;</code>
     * @return whether the mazeId field is set
     */
    public boolean hasMazeId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 maze_id = 14;</code>
     * @return this
     */
    public RogueGambleMazeInfo clearMazeId() {
      bitField0_ &= ~0x00000001;
      mazeId = 0;
      return this;
    }

    /**
     * <code>optional uint32 maze_id = 14;</code>
     * @return the mazeId
     */
    public int getMazeId() {
      return mazeId;
    }

    /**
     * <code>optional uint32 maze_id = 14;</code>
     * @param value the mazeId to set
     * @return this
     */
    public RogueGambleMazeInfo setMazeId(final int value) {
      bitField0_ |= 0x00000001;
      mazeId = value;
      return this;
    }

    /**
     * <code>optional bool maze_enable = 10;</code>
     * @return whether the mazeEnable field is set
     */
    public boolean hasMazeEnable() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool maze_enable = 10;</code>
     * @return this
     */
    public RogueGambleMazeInfo clearMazeEnable() {
      bitField0_ &= ~0x00000002;
      mazeEnable = false;
      return this;
    }

    /**
     * <code>optional bool maze_enable = 10;</code>
     * @return the mazeEnable
     */
    public boolean getMazeEnable() {
      return mazeEnable;
    }

    /**
     * <code>optional bool maze_enable = 10;</code>
     * @param value the mazeEnable to set
     * @return this
     */
    public RogueGambleMazeInfo setMazeEnable(final boolean value) {
      bitField0_ |= 0x00000002;
      mazeEnable = value;
      return this;
    }

    @Override
    public RogueGambleMazeInfo copyFrom(final RogueGambleMazeInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mazeId = other.mazeId;
        mazeEnable = other.mazeEnable;
      }
      return this;
    }

    @Override
    public RogueGambleMazeInfo mergeFrom(final RogueGambleMazeInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMazeId()) {
        setMazeId(other.mazeId);
      }
      if (other.hasMazeEnable()) {
        setMazeEnable(other.mazeEnable);
      }
      return this;
    }

    @Override
    public RogueGambleMazeInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mazeId = 0;
      mazeEnable = false;
      return this;
    }

    @Override
    public RogueGambleMazeInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueGambleMazeInfo)) {
        return false;
      }
      RogueGambleMazeInfo other = (RogueGambleMazeInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasMazeId() || mazeId == other.mazeId)
        && (!hasMazeEnable() || mazeEnable == other.mazeEnable);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(mazeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeBoolNoTag(mazeEnable);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(mazeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueGambleMazeInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 112: {
            // mazeId
            mazeId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // mazeEnable
            mazeEnable = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.mazeId, mazeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.mazeEnable, mazeEnable);
      }
      output.endObject();
    }

    @Override
    public RogueGambleMazeInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1081074374:
          case 846454171: {
            if (input.isAtField(FieldNames.mazeId)) {
              if (!input.trySkipNullValue()) {
                mazeId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 223481378:
          case -307448317: {
            if (input.isAtField(FieldNames.mazeEnable)) {
              if (!input.trySkipNullValue()) {
                mazeEnable = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueGambleMazeInfo clone() {
      return new RogueGambleMazeInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueGambleMazeInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueGambleMazeInfo(), data).checkInitialized();
    }

    public static RogueGambleMazeInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueGambleMazeInfo(), input).checkInitialized();
    }

    public static RogueGambleMazeInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueGambleMazeInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueGambleMazeInfo messages
     */
    public static MessageFactory<RogueGambleMazeInfo> getFactory() {
      return RogueGambleMazeInfoFactory.INSTANCE;
    }

    private enum RogueGambleMazeInfoFactory implements MessageFactory<RogueGambleMazeInfo> {
      INSTANCE;

      @Override
      public RogueGambleMazeInfo create() {
        return RogueGambleMazeInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mazeId = FieldName.forField("mazeId", "maze_id");

      static final FieldName mazeEnable = FieldName.forField("mazeEnable", "maze_enable");
    }
  }
}
