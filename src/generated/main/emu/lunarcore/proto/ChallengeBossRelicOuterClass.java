// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChallengeBossRelicOuterClass {
  /**
   * Protobuf type {@code ChallengeBossRelic}
   */
  public static final class ChallengeBossRelic extends ProtoMessage<ChallengeBossRelic> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated .ChallengeBossRelic.RelicMapEntry relic_map = 6;</code>
     */
    private final RepeatedMessage<RelicMapEntry> relicMap = RepeatedMessage.newEmptyInstance(RelicMapEntry.getFactory());

    private ChallengeBossRelic() {
    }

    /**
     * @return a new empty instance of {@code ChallengeBossRelic}
     */
    public static ChallengeBossRelic newInstance() {
      return new ChallengeBossRelic();
    }

    /**
     * <code>repeated .ChallengeBossRelic.RelicMapEntry relic_map = 6;</code>
     * @return whether the relicMap field is set
     */
    public boolean hasRelicMap() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated .ChallengeBossRelic.RelicMapEntry relic_map = 6;</code>
     * @return this
     */
    public ChallengeBossRelic clearRelicMap() {
      bitField0_ &= ~0x00000001;
      relicMap.clear();
      return this;
    }

    /**
     * <code>repeated .ChallengeBossRelic.RelicMapEntry relic_map = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRelicMap()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RelicMapEntry> getRelicMap() {
      return relicMap;
    }

    /**
     * <code>repeated .ChallengeBossRelic.RelicMapEntry relic_map = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RelicMapEntry> getMutableRelicMap() {
      bitField0_ |= 0x00000001;
      return relicMap;
    }

    /**
     * <code>repeated .ChallengeBossRelic.RelicMapEntry relic_map = 6;</code>
     * @param value the relicMap to add
     * @return this
     */
    public ChallengeBossRelic addRelicMap(final RelicMapEntry value) {
      bitField0_ |= 0x00000001;
      relicMap.add(value);
      return this;
    }

    /**
     * <code>repeated .ChallengeBossRelic.RelicMapEntry relic_map = 6;</code>
     * @param values the relicMap to add
     * @return this
     */
    public ChallengeBossRelic addAllRelicMap(final RelicMapEntry... values) {
      bitField0_ |= 0x00000001;
      relicMap.addAll(values);
      return this;
    }

    @Override
    public ChallengeBossRelic copyFrom(final ChallengeBossRelic other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        relicMap.copyFrom(other.relicMap);
      }
      return this;
    }

    @Override
    public ChallengeBossRelic mergeFrom(final ChallengeBossRelic other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRelicMap()) {
        getMutableRelicMap().addAll(other.relicMap);
      }
      return this;
    }

    @Override
    public ChallengeBossRelic clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      relicMap.clear();
      return this;
    }

    @Override
    public ChallengeBossRelic clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      relicMap.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeBossRelic)) {
        return false;
      }
      ChallengeBossRelic other = (ChallengeBossRelic) o;
      return bitField0_ == other.bitField0_
        && (!hasRelicMap() || relicMap.equals(other.relicMap));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < relicMap.length(); i++) {
          output.writeRawByte((byte) 50);
          output.writeMessageNoTag(relicMap.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * relicMap.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(relicMap);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeBossRelic mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 50: {
            // relicMap
            tag = input.readRepeatedMessage(relicMap, tag);
            bitField0_ |= 0x00000001;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedMessage(FieldNames.relicMap, relicMap);
      }
      output.endObject();
    }

    @Override
    public ChallengeBossRelic mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -547581719:
          case 205383312: {
            if (input.isAtField(FieldNames.relicMap)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(relicMap);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeBossRelic clone() {
      return new ChallengeBossRelic().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeBossRelic parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeBossRelic(), data).checkInitialized();
    }

    public static ChallengeBossRelic parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossRelic(), input).checkInitialized();
    }

    public static ChallengeBossRelic parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossRelic(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeBossRelic messages
     */
    public static MessageFactory<ChallengeBossRelic> getFactory() {
      return ChallengeBossRelicFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code RelicMapEntry}
     */
    public static final class RelicMapEntry extends ProtoMessage<RelicMapEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional .ChallengeBossRelicMap value = 2;</code>
       */
      private final ChallengeBossRelicMapOuterClass.ChallengeBossRelicMap value_ = ChallengeBossRelicMapOuterClass.ChallengeBossRelicMap.newInstance();

      private RelicMapEntry() {
      }

      /**
       * @return a new empty instance of {@code RelicMapEntry}
       */
      public static RelicMapEntry newInstance() {
        return new RelicMapEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public RelicMapEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public RelicMapEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional .ChallengeBossRelicMap value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional .ChallengeBossRelicMap value = 2;</code>
       * @return this
       */
      public RelicMapEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_.clear();
        return this;
      }

      /**
       * <code>optional .ChallengeBossRelicMap value = 2;</code>
       *
       * This method returns the internal storage object without modifying any has state.
       * The returned object should not be modified and be treated as read-only.
       *
       * Use {@link #getMutableValue()} if you want to modify it.
       *
       * @return internal storage object for reading
       */
      public ChallengeBossRelicMapOuterClass.ChallengeBossRelicMap getValue() {
        return value_;
      }

      /**
       * <code>optional .ChallengeBossRelicMap value = 2;</code>
       *
       * This method returns the internal storage object and sets the corresponding
       * has state. The returned object will become part of this message and its
       * contents may be modified as long as the has state is not cleared.
       *
       * @return internal storage object for modifications
       */
      public ChallengeBossRelicMapOuterClass.ChallengeBossRelicMap getMutableValue() {
        bitField0_ |= 0x00000002;
        return value_;
      }

      /**
       * <code>optional .ChallengeBossRelicMap value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public RelicMapEntry setValue(
          final ChallengeBossRelicMapOuterClass.ChallengeBossRelicMap value) {
        bitField0_ |= 0x00000002;
        value_.copyFrom(value);
        return this;
      }

      @Override
      public RelicMapEntry copyFrom(final RelicMapEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_.copyFrom(other.value_);
        }
        return this;
      }

      @Override
      public RelicMapEntry mergeFrom(final RelicMapEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          getMutableValue().mergeFrom(other.value_);
        }
        return this;
      }

      @Override
      public RelicMapEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_.clear();
        return this;
      }

      @Override
      public RelicMapEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        value_.clearQuick();
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof RelicMapEntry)) {
          return false;
        }
        RelicMapEntry other = (RelicMapEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_.equals(other.value_));
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 18);
          output.writeMessageNoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeMessageSizeNoTag(value_);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public RelicMapEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 18) {
                break;
              }
            }
            case 18: {
              // value_
              input.readMessage(value_);
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeMessage(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public RelicMapEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  input.readMessage(value_);
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public RelicMapEntry clone() {
        return new RelicMapEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static RelicMapEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new RelicMapEntry(), data).checkInitialized();
      }

      public static RelicMapEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new RelicMapEntry(), input).checkInitialized();
      }

      public static RelicMapEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new RelicMapEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating RelicMapEntry messages
       */
      public static MessageFactory<RelicMapEntry> getFactory() {
        return RelicMapEntryFactory.INSTANCE;
      }

      private enum RelicMapEntryFactory implements MessageFactory<RelicMapEntry> {
        INSTANCE;

        @Override
        public RelicMapEntry create() {
          return RelicMapEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    private enum ChallengeBossRelicFactory implements MessageFactory<ChallengeBossRelic> {
      INSTANCE;

      @Override
      public ChallengeBossRelic create() {
        return ChallengeBossRelic.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName relicMap = FieldName.forField("relicMap", "relic_map");
    }
  }
}
