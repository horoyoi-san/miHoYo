// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class MarkChestChangedScNotifyOuterClass {
  /**
   * Protobuf type {@code MarkChestChangedScNotify}
   */
  public static final class MarkChestChangedScNotify extends ProtoMessage<MarkChestChangedScNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated .MarkChestFuncInfo mark_chest_func_info = 11;</code>
     */
    private final RepeatedMessage<MarkChestFuncInfoOuterClass.MarkChestFuncInfo> markChestFuncInfo = RepeatedMessage.newEmptyInstance(MarkChestFuncInfoOuterClass.MarkChestFuncInfo.getFactory());

    private MarkChestChangedScNotify() {
    }

    /**
     * @return a new empty instance of {@code MarkChestChangedScNotify}
     */
    public static MarkChestChangedScNotify newInstance() {
      return new MarkChestChangedScNotify();
    }

    /**
     * <code>repeated .MarkChestFuncInfo mark_chest_func_info = 11;</code>
     * @return whether the markChestFuncInfo field is set
     */
    public boolean hasMarkChestFuncInfo() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated .MarkChestFuncInfo mark_chest_func_info = 11;</code>
     * @return this
     */
    public MarkChestChangedScNotify clearMarkChestFuncInfo() {
      bitField0_ &= ~0x00000001;
      markChestFuncInfo.clear();
      return this;
    }

    /**
     * <code>repeated .MarkChestFuncInfo mark_chest_func_info = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMarkChestFuncInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MarkChestFuncInfoOuterClass.MarkChestFuncInfo> getMarkChestFuncInfo() {
      return markChestFuncInfo;
    }

    /**
     * <code>repeated .MarkChestFuncInfo mark_chest_func_info = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MarkChestFuncInfoOuterClass.MarkChestFuncInfo> getMutableMarkChestFuncInfo(
        ) {
      bitField0_ |= 0x00000001;
      return markChestFuncInfo;
    }

    /**
     * <code>repeated .MarkChestFuncInfo mark_chest_func_info = 11;</code>
     * @param value the markChestFuncInfo to add
     * @return this
     */
    public MarkChestChangedScNotify addMarkChestFuncInfo(
        final MarkChestFuncInfoOuterClass.MarkChestFuncInfo value) {
      bitField0_ |= 0x00000001;
      markChestFuncInfo.add(value);
      return this;
    }

    /**
     * <code>repeated .MarkChestFuncInfo mark_chest_func_info = 11;</code>
     * @param values the markChestFuncInfo to add
     * @return this
     */
    public MarkChestChangedScNotify addAllMarkChestFuncInfo(
        final MarkChestFuncInfoOuterClass.MarkChestFuncInfo... values) {
      bitField0_ |= 0x00000001;
      markChestFuncInfo.addAll(values);
      return this;
    }

    @Override
    public MarkChestChangedScNotify copyFrom(final MarkChestChangedScNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        markChestFuncInfo.copyFrom(other.markChestFuncInfo);
      }
      return this;
    }

    @Override
    public MarkChestChangedScNotify mergeFrom(final MarkChestChangedScNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMarkChestFuncInfo()) {
        getMutableMarkChestFuncInfo().addAll(other.markChestFuncInfo);
      }
      return this;
    }

    @Override
    public MarkChestChangedScNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      markChestFuncInfo.clear();
      return this;
    }

    @Override
    public MarkChestChangedScNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      markChestFuncInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MarkChestChangedScNotify)) {
        return false;
      }
      MarkChestChangedScNotify other = (MarkChestChangedScNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasMarkChestFuncInfo() || markChestFuncInfo.equals(other.markChestFuncInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < markChestFuncInfo.length(); i++) {
          output.writeRawByte((byte) 90);
          output.writeMessageNoTag(markChestFuncInfo.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * markChestFuncInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(markChestFuncInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MarkChestChangedScNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 90: {
            // markChestFuncInfo
            tag = input.readRepeatedMessage(markChestFuncInfo, tag);
            bitField0_ |= 0x00000001;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedMessage(FieldNames.markChestFuncInfo, markChestFuncInfo);
      }
      output.endObject();
    }

    @Override
    public MarkChestChangedScNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -926412314:
          case -1470428135: {
            if (input.isAtField(FieldNames.markChestFuncInfo)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(markChestFuncInfo);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MarkChestChangedScNotify clone() {
      return new MarkChestChangedScNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MarkChestChangedScNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MarkChestChangedScNotify(), data).checkInitialized();
    }

    public static MarkChestChangedScNotify parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MarkChestChangedScNotify(), input).checkInitialized();
    }

    public static MarkChestChangedScNotify parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MarkChestChangedScNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating MarkChestChangedScNotify messages
     */
    public static MessageFactory<MarkChestChangedScNotify> getFactory() {
      return MarkChestChangedScNotifyFactory.INSTANCE;
    }

    private enum MarkChestChangedScNotifyFactory implements MessageFactory<MarkChestChangedScNotify> {
      INSTANCE;

      @Override
      public MarkChestChangedScNotify create() {
        return MarkChestChangedScNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName markChestFuncInfo = FieldName.forField("markChestFuncInfo", "mark_chest_func_info");
    }
  }
}
