// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChallengeRaidOuterClass {
  /**
   * Protobuf type {@code ChallengeRaid}
   */
  public static final class ChallengeRaid extends ProtoMessage<ChallengeRaid> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 stage_score = 1;</code>
     */
    private int stageScore;

    /**
     * <code>optional uint32 raid_id = 8;</code>
     */
    private int raidId;

    private ChallengeRaid() {
    }

    /**
     * @return a new empty instance of {@code ChallengeRaid}
     */
    public static ChallengeRaid newInstance() {
      return new ChallengeRaid();
    }

    /**
     * <code>optional uint32 stage_score = 1;</code>
     * @return whether the stageScore field is set
     */
    public boolean hasStageScore() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 stage_score = 1;</code>
     * @return this
     */
    public ChallengeRaid clearStageScore() {
      bitField0_ &= ~0x00000001;
      stageScore = 0;
      return this;
    }

    /**
     * <code>optional uint32 stage_score = 1;</code>
     * @return the stageScore
     */
    public int getStageScore() {
      return stageScore;
    }

    /**
     * <code>optional uint32 stage_score = 1;</code>
     * @param value the stageScore to set
     * @return this
     */
    public ChallengeRaid setStageScore(final int value) {
      bitField0_ |= 0x00000001;
      stageScore = value;
      return this;
    }

    /**
     * <code>optional uint32 raid_id = 8;</code>
     * @return whether the raidId field is set
     */
    public boolean hasRaidId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 raid_id = 8;</code>
     * @return this
     */
    public ChallengeRaid clearRaidId() {
      bitField0_ &= ~0x00000002;
      raidId = 0;
      return this;
    }

    /**
     * <code>optional uint32 raid_id = 8;</code>
     * @return the raidId
     */
    public int getRaidId() {
      return raidId;
    }

    /**
     * <code>optional uint32 raid_id = 8;</code>
     * @param value the raidId to set
     * @return this
     */
    public ChallengeRaid setRaidId(final int value) {
      bitField0_ |= 0x00000002;
      raidId = value;
      return this;
    }

    @Override
    public ChallengeRaid copyFrom(final ChallengeRaid other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        stageScore = other.stageScore;
        raidId = other.raidId;
      }
      return this;
    }

    @Override
    public ChallengeRaid mergeFrom(final ChallengeRaid other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasStageScore()) {
        setStageScore(other.stageScore);
      }
      if (other.hasRaidId()) {
        setRaidId(other.raidId);
      }
      return this;
    }

    @Override
    public ChallengeRaid clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      stageScore = 0;
      raidId = 0;
      return this;
    }

    @Override
    public ChallengeRaid clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeRaid)) {
        return false;
      }
      ChallengeRaid other = (ChallengeRaid) o;
      return bitField0_ == other.bitField0_
        && (!hasStageScore() || stageScore == other.stageScore)
        && (!hasRaidId() || raidId == other.raidId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(stageScore);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(raidId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(stageScore);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(raidId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeRaid mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // stageScore
            stageScore = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // raidId
            raidId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.stageScore, stageScore);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.raidId, raidId);
      }
      output.endObject();
    }

    @Override
    public ChallengeRaid mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1108195892:
          case 352300561: {
            if (input.isAtField(FieldNames.stageScore)) {
              if (!input.trySkipNullValue()) {
                stageScore = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -938436027:
          case 973275632: {
            if (input.isAtField(FieldNames.raidId)) {
              if (!input.trySkipNullValue()) {
                raidId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeRaid clone() {
      return new ChallengeRaid().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeRaid parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeRaid(), data).checkInitialized();
    }

    public static ChallengeRaid parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeRaid(), input).checkInitialized();
    }

    public static ChallengeRaid parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeRaid(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeRaid messages
     */
    public static MessageFactory<ChallengeRaid> getFactory() {
      return ChallengeRaidFactory.INSTANCE;
    }

    private enum ChallengeRaidFactory implements MessageFactory<ChallengeRaid> {
      INSTANCE;

      @Override
      public ChallengeRaid create() {
        return ChallengeRaid.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName stageScore = FieldName.forField("stageScore", "stage_score");

      static final FieldName raidId = FieldName.forField("raidId", "raid_id");
    }
  }
}
