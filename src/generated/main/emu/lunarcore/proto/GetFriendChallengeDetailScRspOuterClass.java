// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class GetFriendChallengeDetailScRspOuterClass {
  /**
   * Protobuf type {@code GetFriendChallengeDetailScRsp}
   */
  public static final class GetFriendChallengeDetailScRsp extends ProtoMessage<GetFriendChallengeDetailScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 challenge_id = 3;</code>
     */
    private int challengeId;

    /**
     * <code>optional uint32 uid = 7;</code>
     */
    private int uid;

    /**
     * <code>optional uint32 retcode = 11;</code>
     */
    private int retcode;

    /**
     * <code>repeated .DisplayAvatarDetailInfo CCGDMOOLHHB = 5;</code>
     */
    private final RepeatedMessage<DisplayAvatarDetailInfoOuterClass.DisplayAvatarDetailInfo> cCGDMOOLHHB = RepeatedMessage.newEmptyInstance(DisplayAvatarDetailInfoOuterClass.DisplayAvatarDetailInfo.getFactory());

    private GetFriendChallengeDetailScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetFriendChallengeDetailScRsp}
     */
    public static GetFriendChallengeDetailScRsp newInstance() {
      return new GetFriendChallengeDetailScRsp();
    }

    /**
     * <code>optional uint32 challenge_id = 3;</code>
     * @return whether the challengeId field is set
     */
    public boolean hasChallengeId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 challenge_id = 3;</code>
     * @return this
     */
    public GetFriendChallengeDetailScRsp clearChallengeId() {
      bitField0_ &= ~0x00000001;
      challengeId = 0;
      return this;
    }

    /**
     * <code>optional uint32 challenge_id = 3;</code>
     * @return the challengeId
     */
    public int getChallengeId() {
      return challengeId;
    }

    /**
     * <code>optional uint32 challenge_id = 3;</code>
     * @param value the challengeId to set
     * @return this
     */
    public GetFriendChallengeDetailScRsp setChallengeId(final int value) {
      bitField0_ |= 0x00000001;
      challengeId = value;
      return this;
    }

    /**
     * <code>optional uint32 uid = 7;</code>
     * @return whether the uid field is set
     */
    public boolean hasUid() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 uid = 7;</code>
     * @return this
     */
    public GetFriendChallengeDetailScRsp clearUid() {
      bitField0_ &= ~0x00000002;
      uid = 0;
      return this;
    }

    /**
     * <code>optional uint32 uid = 7;</code>
     * @return the uid
     */
    public int getUid() {
      return uid;
    }

    /**
     * <code>optional uint32 uid = 7;</code>
     * @param value the uid to set
     * @return this
     */
    public GetFriendChallengeDetailScRsp setUid(final int value) {
      bitField0_ |= 0x00000002;
      uid = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @return this
     */
    public GetFriendChallengeDetailScRsp clearRetcode() {
      bitField0_ &= ~0x00000004;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetFriendChallengeDetailScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000004;
      retcode = value;
      return this;
    }

    /**
     * <code>repeated .DisplayAvatarDetailInfo CCGDMOOLHHB = 5;</code>
     * @return whether the cCGDMOOLHHB field is set
     */
    public boolean hasCCGDMOOLHHB() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .DisplayAvatarDetailInfo CCGDMOOLHHB = 5;</code>
     * @return this
     */
    public GetFriendChallengeDetailScRsp clearCCGDMOOLHHB() {
      bitField0_ &= ~0x00000008;
      cCGDMOOLHHB.clear();
      return this;
    }

    /**
     * <code>repeated .DisplayAvatarDetailInfo CCGDMOOLHHB = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCCGDMOOLHHB()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<DisplayAvatarDetailInfoOuterClass.DisplayAvatarDetailInfo> getCCGDMOOLHHB(
        ) {
      return cCGDMOOLHHB;
    }

    /**
     * <code>repeated .DisplayAvatarDetailInfo CCGDMOOLHHB = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<DisplayAvatarDetailInfoOuterClass.DisplayAvatarDetailInfo> getMutableCCGDMOOLHHB(
        ) {
      bitField0_ |= 0x00000008;
      return cCGDMOOLHHB;
    }

    /**
     * <code>repeated .DisplayAvatarDetailInfo CCGDMOOLHHB = 5;</code>
     * @param value the cCGDMOOLHHB to add
     * @return this
     */
    public GetFriendChallengeDetailScRsp addCCGDMOOLHHB(
        final DisplayAvatarDetailInfoOuterClass.DisplayAvatarDetailInfo value) {
      bitField0_ |= 0x00000008;
      cCGDMOOLHHB.add(value);
      return this;
    }

    /**
     * <code>repeated .DisplayAvatarDetailInfo CCGDMOOLHHB = 5;</code>
     * @param values the cCGDMOOLHHB to add
     * @return this
     */
    public GetFriendChallengeDetailScRsp addAllCCGDMOOLHHB(
        final DisplayAvatarDetailInfoOuterClass.DisplayAvatarDetailInfo... values) {
      bitField0_ |= 0x00000008;
      cCGDMOOLHHB.addAll(values);
      return this;
    }

    @Override
    public GetFriendChallengeDetailScRsp copyFrom(final GetFriendChallengeDetailScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        challengeId = other.challengeId;
        uid = other.uid;
        retcode = other.retcode;
        cCGDMOOLHHB.copyFrom(other.cCGDMOOLHHB);
      }
      return this;
    }

    @Override
    public GetFriendChallengeDetailScRsp mergeFrom(final GetFriendChallengeDetailScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasChallengeId()) {
        setChallengeId(other.challengeId);
      }
      if (other.hasUid()) {
        setUid(other.uid);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasCCGDMOOLHHB()) {
        getMutableCCGDMOOLHHB().addAll(other.cCGDMOOLHHB);
      }
      return this;
    }

    @Override
    public GetFriendChallengeDetailScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      challengeId = 0;
      uid = 0;
      retcode = 0;
      cCGDMOOLHHB.clear();
      return this;
    }

    @Override
    public GetFriendChallengeDetailScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      cCGDMOOLHHB.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetFriendChallengeDetailScRsp)) {
        return false;
      }
      GetFriendChallengeDetailScRsp other = (GetFriendChallengeDetailScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasChallengeId() || challengeId == other.challengeId)
        && (!hasUid() || uid == other.uid)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasCCGDMOOLHHB() || cCGDMOOLHHB.equals(other.cCGDMOOLHHB));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(challengeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(uid);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < cCGDMOOLHHB.length(); i++) {
          output.writeRawByte((byte) 42);
          output.writeMessageNoTag(cCGDMOOLHHB.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(challengeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(uid);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * cCGDMOOLHHB.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(cCGDMOOLHHB);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetFriendChallengeDetailScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // challengeId
            challengeId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // uid
            uid = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // cCGDMOOLHHB
            tag = input.readRepeatedMessage(cCGDMOOLHHB, tag);
            bitField0_ |= 0x00000008;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.challengeId, challengeId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.uid, uid);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.cCGDMOOLHHB, cCGDMOOLHHB);
      }
      output.endObject();
    }

    @Override
    public GetFriendChallengeDetailScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -689112866:
          case 112359031: {
            if (input.isAtField(FieldNames.challengeId)) {
              if (!input.trySkipNullValue()) {
                challengeId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 115792: {
            if (input.isAtField(FieldNames.uid)) {
              if (!input.trySkipNullValue()) {
                uid = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 308914182: {
            if (input.isAtField(FieldNames.cCGDMOOLHHB)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(cCGDMOOLHHB);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetFriendChallengeDetailScRsp clone() {
      return new GetFriendChallengeDetailScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetFriendChallengeDetailScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetFriendChallengeDetailScRsp(), data).checkInitialized();
    }

    public static GetFriendChallengeDetailScRsp parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new GetFriendChallengeDetailScRsp(), input).checkInitialized();
    }

    public static GetFriendChallengeDetailScRsp parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new GetFriendChallengeDetailScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetFriendChallengeDetailScRsp messages
     */
    public static MessageFactory<GetFriendChallengeDetailScRsp> getFactory() {
      return GetFriendChallengeDetailScRspFactory.INSTANCE;
    }

    private enum GetFriendChallengeDetailScRspFactory implements MessageFactory<GetFriendChallengeDetailScRsp> {
      INSTANCE;

      @Override
      public GetFriendChallengeDetailScRsp create() {
        return GetFriendChallengeDetailScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName challengeId = FieldName.forField("challengeId", "challenge_id");

      static final FieldName uid = FieldName.forField("uid");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName cCGDMOOLHHB = FieldName.forField("CCGDMOOLHHB");
    }
  }
}
