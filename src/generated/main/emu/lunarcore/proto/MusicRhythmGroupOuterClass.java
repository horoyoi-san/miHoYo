// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class MusicRhythmGroupOuterClass {
  /**
   * Protobuf type {@code MusicRhythmGroup}
   */
  public static final class MusicRhythmGroup extends ProtoMessage<MusicRhythmGroup> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 music_group_id = 5;</code>
     */
    private int musicGroupId;

    /**
     * <code>optional uint32 music_group_phase = 10;</code>
     */
    private int musicGroupPhase;

    /**
     * <code>repeated uint32 MPCFOJALNHN = 3;</code>
     */
    private final RepeatedInt mPCFOJALNHN = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 OALLJLKBIOJ = 6;</code>
     */
    private final RepeatedInt oALLJLKBIOJ = RepeatedInt.newEmptyInstance();

    private MusicRhythmGroup() {
    }

    /**
     * @return a new empty instance of {@code MusicRhythmGroup}
     */
    public static MusicRhythmGroup newInstance() {
      return new MusicRhythmGroup();
    }

    /**
     * <code>optional uint32 music_group_id = 5;</code>
     * @return whether the musicGroupId field is set
     */
    public boolean hasMusicGroupId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 music_group_id = 5;</code>
     * @return this
     */
    public MusicRhythmGroup clearMusicGroupId() {
      bitField0_ &= ~0x00000001;
      musicGroupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 music_group_id = 5;</code>
     * @return the musicGroupId
     */
    public int getMusicGroupId() {
      return musicGroupId;
    }

    /**
     * <code>optional uint32 music_group_id = 5;</code>
     * @param value the musicGroupId to set
     * @return this
     */
    public MusicRhythmGroup setMusicGroupId(final int value) {
      bitField0_ |= 0x00000001;
      musicGroupId = value;
      return this;
    }

    /**
     * <code>optional uint32 music_group_phase = 10;</code>
     * @return whether the musicGroupPhase field is set
     */
    public boolean hasMusicGroupPhase() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 music_group_phase = 10;</code>
     * @return this
     */
    public MusicRhythmGroup clearMusicGroupPhase() {
      bitField0_ &= ~0x00000002;
      musicGroupPhase = 0;
      return this;
    }

    /**
     * <code>optional uint32 music_group_phase = 10;</code>
     * @return the musicGroupPhase
     */
    public int getMusicGroupPhase() {
      return musicGroupPhase;
    }

    /**
     * <code>optional uint32 music_group_phase = 10;</code>
     * @param value the musicGroupPhase to set
     * @return this
     */
    public MusicRhythmGroup setMusicGroupPhase(final int value) {
      bitField0_ |= 0x00000002;
      musicGroupPhase = value;
      return this;
    }

    /**
     * <code>repeated uint32 MPCFOJALNHN = 3;</code>
     * @return whether the mPCFOJALNHN field is set
     */
    public boolean hasMPCFOJALNHN() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 MPCFOJALNHN = 3;</code>
     * @return this
     */
    public MusicRhythmGroup clearMPCFOJALNHN() {
      bitField0_ &= ~0x00000004;
      mPCFOJALNHN.clear();
      return this;
    }

    /**
     * <code>repeated uint32 MPCFOJALNHN = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMPCFOJALNHN()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getMPCFOJALNHN() {
      return mPCFOJALNHN;
    }

    /**
     * <code>repeated uint32 MPCFOJALNHN = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableMPCFOJALNHN() {
      bitField0_ |= 0x00000004;
      return mPCFOJALNHN;
    }

    /**
     * <code>repeated uint32 MPCFOJALNHN = 3;</code>
     * @param value the mPCFOJALNHN to add
     * @return this
     */
    public MusicRhythmGroup addMPCFOJALNHN(final int value) {
      bitField0_ |= 0x00000004;
      mPCFOJALNHN.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 MPCFOJALNHN = 3;</code>
     * @param values the mPCFOJALNHN to add
     * @return this
     */
    public MusicRhythmGroup addAllMPCFOJALNHN(final int... values) {
      bitField0_ |= 0x00000004;
      mPCFOJALNHN.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 OALLJLKBIOJ = 6;</code>
     * @return whether the oALLJLKBIOJ field is set
     */
    public boolean hasOALLJLKBIOJ() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 OALLJLKBIOJ = 6;</code>
     * @return this
     */
    public MusicRhythmGroup clearOALLJLKBIOJ() {
      bitField0_ &= ~0x00000008;
      oALLJLKBIOJ.clear();
      return this;
    }

    /**
     * <code>repeated uint32 OALLJLKBIOJ = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableOALLJLKBIOJ()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getOALLJLKBIOJ() {
      return oALLJLKBIOJ;
    }

    /**
     * <code>repeated uint32 OALLJLKBIOJ = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableOALLJLKBIOJ() {
      bitField0_ |= 0x00000008;
      return oALLJLKBIOJ;
    }

    /**
     * <code>repeated uint32 OALLJLKBIOJ = 6;</code>
     * @param value the oALLJLKBIOJ to add
     * @return this
     */
    public MusicRhythmGroup addOALLJLKBIOJ(final int value) {
      bitField0_ |= 0x00000008;
      oALLJLKBIOJ.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 OALLJLKBIOJ = 6;</code>
     * @param values the oALLJLKBIOJ to add
     * @return this
     */
    public MusicRhythmGroup addAllOALLJLKBIOJ(final int... values) {
      bitField0_ |= 0x00000008;
      oALLJLKBIOJ.addAll(values);
      return this;
    }

    @Override
    public MusicRhythmGroup copyFrom(final MusicRhythmGroup other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        musicGroupId = other.musicGroupId;
        musicGroupPhase = other.musicGroupPhase;
        mPCFOJALNHN.copyFrom(other.mPCFOJALNHN);
        oALLJLKBIOJ.copyFrom(other.oALLJLKBIOJ);
      }
      return this;
    }

    @Override
    public MusicRhythmGroup mergeFrom(final MusicRhythmGroup other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMusicGroupId()) {
        setMusicGroupId(other.musicGroupId);
      }
      if (other.hasMusicGroupPhase()) {
        setMusicGroupPhase(other.musicGroupPhase);
      }
      if (other.hasMPCFOJALNHN()) {
        getMutableMPCFOJALNHN().addAll(other.mPCFOJALNHN);
      }
      if (other.hasOALLJLKBIOJ()) {
        getMutableOALLJLKBIOJ().addAll(other.oALLJLKBIOJ);
      }
      return this;
    }

    @Override
    public MusicRhythmGroup clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      musicGroupId = 0;
      musicGroupPhase = 0;
      mPCFOJALNHN.clear();
      oALLJLKBIOJ.clear();
      return this;
    }

    @Override
    public MusicRhythmGroup clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mPCFOJALNHN.clear();
      oALLJLKBIOJ.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MusicRhythmGroup)) {
        return false;
      }
      MusicRhythmGroup other = (MusicRhythmGroup) o;
      return bitField0_ == other.bitField0_
        && (!hasMusicGroupId() || musicGroupId == other.musicGroupId)
        && (!hasMusicGroupPhase() || musicGroupPhase == other.musicGroupPhase)
        && (!hasMPCFOJALNHN() || mPCFOJALNHN.equals(other.mPCFOJALNHN))
        && (!hasOALLJLKBIOJ() || oALLJLKBIOJ.equals(other.oALLJLKBIOJ));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(musicGroupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(musicGroupPhase);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < mPCFOJALNHN.length(); i++) {
          output.writeRawByte((byte) 24);
          output.writeUInt32NoTag(mPCFOJALNHN.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < oALLJLKBIOJ.length(); i++) {
          output.writeRawByte((byte) 48);
          output.writeUInt32NoTag(oALLJLKBIOJ.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(musicGroupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(musicGroupPhase);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * mPCFOJALNHN.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(mPCFOJALNHN);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * oALLJLKBIOJ.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(oALLJLKBIOJ);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MusicRhythmGroup mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // musicGroupId
            musicGroupId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // musicGroupPhase
            musicGroupPhase = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // mPCFOJALNHN [packed=true]
            input.readPackedUInt32(mPCFOJALNHN, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // oALLJLKBIOJ [packed=true]
            input.readPackedUInt32(oALLJLKBIOJ, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 24: {
            // mPCFOJALNHN [packed=false]
            tag = input.readRepeatedUInt32(mPCFOJALNHN, tag);
            bitField0_ |= 0x00000004;
            break;
          }
          case 48: {
            // oALLJLKBIOJ [packed=false]
            tag = input.readRepeatedUInt32(oALLJLKBIOJ, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.musicGroupId, musicGroupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.musicGroupPhase, musicGroupPhase);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.mPCFOJALNHN, mPCFOJALNHN);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.oALLJLKBIOJ, oALLJLKBIOJ);
      }
      output.endObject();
    }

    @Override
    public MusicRhythmGroup mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -2130525675:
          case 1340462005: {
            if (input.isAtField(FieldNames.musicGroupId)) {
              if (!input.trySkipNullValue()) {
                musicGroupId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 542997057:
          case -895646559: {
            if (input.isAtField(FieldNames.musicGroupPhase)) {
              if (!input.trySkipNullValue()) {
                musicGroupPhase = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 709036232: {
            if (input.isAtField(FieldNames.mPCFOJALNHN)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(mPCFOJALNHN);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1528784871: {
            if (input.isAtField(FieldNames.oALLJLKBIOJ)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(oALLJLKBIOJ);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MusicRhythmGroup clone() {
      return new MusicRhythmGroup().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MusicRhythmGroup parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MusicRhythmGroup(), data).checkInitialized();
    }

    public static MusicRhythmGroup parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MusicRhythmGroup(), input).checkInitialized();
    }

    public static MusicRhythmGroup parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MusicRhythmGroup(), input).checkInitialized();
    }

    /**
     * @return factory for creating MusicRhythmGroup messages
     */
    public static MessageFactory<MusicRhythmGroup> getFactory() {
      return MusicRhythmGroupFactory.INSTANCE;
    }

    private enum MusicRhythmGroupFactory implements MessageFactory<MusicRhythmGroup> {
      INSTANCE;

      @Override
      public MusicRhythmGroup create() {
        return MusicRhythmGroup.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName musicGroupId = FieldName.forField("musicGroupId", "music_group_id");

      static final FieldName musicGroupPhase = FieldName.forField("musicGroupPhase", "music_group_phase");

      static final FieldName mPCFOJALNHN = FieldName.forField("MPCFOJALNHN");

      static final FieldName oALLJLKBIOJ = FieldName.forField("OALLJLKBIOJ");
    }
  }
}
