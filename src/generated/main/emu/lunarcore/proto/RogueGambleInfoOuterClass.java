// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueGambleInfoOuterClass {
  /**
   * Protobuf type {@code RogueGambleInfo}
   */
  public static final class RogueGambleInfo extends ProtoMessage<RogueGambleInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     *  4 8
     * </pre>
     *
     * <code>optional uint32 max_game_times = 1;</code>
     */
    private int maxGameTimes;

    /**
     * <code>optional uint32 cur_times = 2;</code>
     */
    private int curTimes;

    /**
     * <code>optional uint32 ECNHEBPPMJN = 4;</code>
     */
    private int eCNHEBPPMJN;

    /**
     * <code>optional uint32 AAGHBMMPPKG = 8;</code>
     */
    private int aAGHBMMPPKG;

    /**
     * <code>optional bool can_play = 9;</code>
     */
    private boolean canPlay;

    /**
     * <code>optional .ItemCostData cur_cost_item = 12;</code>
     */
    private final ItemCostDataOuterClass.ItemCostData curCostItem = ItemCostDataOuterClass.ItemCostData.newInstance();

    /**
     * <code>repeated .RogueGambleMazeGroupInfo maze_group_list = 14;</code>
     */
    private final RepeatedMessage<RogueGambleMazeGroupInfoOuterClass.RogueGambleMazeGroupInfo> mazeGroupList = RepeatedMessage.newEmptyInstance(RogueGambleMazeGroupInfoOuterClass.RogueGambleMazeGroupInfo.getFactory());

    private RogueGambleInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueGambleInfo}
     */
    public static RogueGambleInfo newInstance() {
      return new RogueGambleInfo();
    }

    /**
     * <pre>
     *  4 8
     * </pre>
     *
     * <code>optional uint32 max_game_times = 1;</code>
     * @return whether the maxGameTimes field is set
     */
    public boolean hasMaxGameTimes() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     *  4 8
     * </pre>
     *
     * <code>optional uint32 max_game_times = 1;</code>
     * @return this
     */
    public RogueGambleInfo clearMaxGameTimes() {
      bitField0_ &= ~0x00000001;
      maxGameTimes = 0;
      return this;
    }

    /**
     * <pre>
     *  4 8
     * </pre>
     *
     * <code>optional uint32 max_game_times = 1;</code>
     * @return the maxGameTimes
     */
    public int getMaxGameTimes() {
      return maxGameTimes;
    }

    /**
     * <pre>
     *  4 8
     * </pre>
     *
     * <code>optional uint32 max_game_times = 1;</code>
     * @param value the maxGameTimes to set
     * @return this
     */
    public RogueGambleInfo setMaxGameTimes(final int value) {
      bitField0_ |= 0x00000001;
      maxGameTimes = value;
      return this;
    }

    /**
     * <code>optional uint32 cur_times = 2;</code>
     * @return whether the curTimes field is set
     */
    public boolean hasCurTimes() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 cur_times = 2;</code>
     * @return this
     */
    public RogueGambleInfo clearCurTimes() {
      bitField0_ &= ~0x00000002;
      curTimes = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_times = 2;</code>
     * @return the curTimes
     */
    public int getCurTimes() {
      return curTimes;
    }

    /**
     * <code>optional uint32 cur_times = 2;</code>
     * @param value the curTimes to set
     * @return this
     */
    public RogueGambleInfo setCurTimes(final int value) {
      bitField0_ |= 0x00000002;
      curTimes = value;
      return this;
    }

    /**
     * <code>optional uint32 ECNHEBPPMJN = 4;</code>
     * @return whether the eCNHEBPPMJN field is set
     */
    public boolean hasECNHEBPPMJN() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 ECNHEBPPMJN = 4;</code>
     * @return this
     */
    public RogueGambleInfo clearECNHEBPPMJN() {
      bitField0_ &= ~0x00000004;
      eCNHEBPPMJN = 0;
      return this;
    }

    /**
     * <code>optional uint32 ECNHEBPPMJN = 4;</code>
     * @return the eCNHEBPPMJN
     */
    public int getECNHEBPPMJN() {
      return eCNHEBPPMJN;
    }

    /**
     * <code>optional uint32 ECNHEBPPMJN = 4;</code>
     * @param value the eCNHEBPPMJN to set
     * @return this
     */
    public RogueGambleInfo setECNHEBPPMJN(final int value) {
      bitField0_ |= 0x00000004;
      eCNHEBPPMJN = value;
      return this;
    }

    /**
     * <code>optional uint32 AAGHBMMPPKG = 8;</code>
     * @return whether the aAGHBMMPPKG field is set
     */
    public boolean hasAAGHBMMPPKG() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 AAGHBMMPPKG = 8;</code>
     * @return this
     */
    public RogueGambleInfo clearAAGHBMMPPKG() {
      bitField0_ &= ~0x00000008;
      aAGHBMMPPKG = 0;
      return this;
    }

    /**
     * <code>optional uint32 AAGHBMMPPKG = 8;</code>
     * @return the aAGHBMMPPKG
     */
    public int getAAGHBMMPPKG() {
      return aAGHBMMPPKG;
    }

    /**
     * <code>optional uint32 AAGHBMMPPKG = 8;</code>
     * @param value the aAGHBMMPPKG to set
     * @return this
     */
    public RogueGambleInfo setAAGHBMMPPKG(final int value) {
      bitField0_ |= 0x00000008;
      aAGHBMMPPKG = value;
      return this;
    }

    /**
     * <code>optional bool can_play = 9;</code>
     * @return whether the canPlay field is set
     */
    public boolean hasCanPlay() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional bool can_play = 9;</code>
     * @return this
     */
    public RogueGambleInfo clearCanPlay() {
      bitField0_ &= ~0x00000010;
      canPlay = false;
      return this;
    }

    /**
     * <code>optional bool can_play = 9;</code>
     * @return the canPlay
     */
    public boolean getCanPlay() {
      return canPlay;
    }

    /**
     * <code>optional bool can_play = 9;</code>
     * @param value the canPlay to set
     * @return this
     */
    public RogueGambleInfo setCanPlay(final boolean value) {
      bitField0_ |= 0x00000010;
      canPlay = value;
      return this;
    }

    /**
     * <code>optional .ItemCostData cur_cost_item = 12;</code>
     * @return whether the curCostItem field is set
     */
    public boolean hasCurCostItem() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional .ItemCostData cur_cost_item = 12;</code>
     * @return this
     */
    public RogueGambleInfo clearCurCostItem() {
      bitField0_ &= ~0x00000020;
      curCostItem.clear();
      return this;
    }

    /**
     * <code>optional .ItemCostData cur_cost_item = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCurCostItem()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemCostDataOuterClass.ItemCostData getCurCostItem() {
      return curCostItem;
    }

    /**
     * <code>optional .ItemCostData cur_cost_item = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemCostDataOuterClass.ItemCostData getMutableCurCostItem() {
      bitField0_ |= 0x00000020;
      return curCostItem;
    }

    /**
     * <code>optional .ItemCostData cur_cost_item = 12;</code>
     * @param value the curCostItem to set
     * @return this
     */
    public RogueGambleInfo setCurCostItem(final ItemCostDataOuterClass.ItemCostData value) {
      bitField0_ |= 0x00000020;
      curCostItem.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .RogueGambleMazeGroupInfo maze_group_list = 14;</code>
     * @return whether the mazeGroupList field is set
     */
    public boolean hasMazeGroupList() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated .RogueGambleMazeGroupInfo maze_group_list = 14;</code>
     * @return this
     */
    public RogueGambleInfo clearMazeGroupList() {
      bitField0_ &= ~0x00000040;
      mazeGroupList.clear();
      return this;
    }

    /**
     * <code>repeated .RogueGambleMazeGroupInfo maze_group_list = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMazeGroupList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueGambleMazeGroupInfoOuterClass.RogueGambleMazeGroupInfo> getMazeGroupList(
        ) {
      return mazeGroupList;
    }

    /**
     * <code>repeated .RogueGambleMazeGroupInfo maze_group_list = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueGambleMazeGroupInfoOuterClass.RogueGambleMazeGroupInfo> getMutableMazeGroupList(
        ) {
      bitField0_ |= 0x00000040;
      return mazeGroupList;
    }

    /**
     * <code>repeated .RogueGambleMazeGroupInfo maze_group_list = 14;</code>
     * @param value the mazeGroupList to add
     * @return this
     */
    public RogueGambleInfo addMazeGroupList(
        final RogueGambleMazeGroupInfoOuterClass.RogueGambleMazeGroupInfo value) {
      bitField0_ |= 0x00000040;
      mazeGroupList.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueGambleMazeGroupInfo maze_group_list = 14;</code>
     * @param values the mazeGroupList to add
     * @return this
     */
    public RogueGambleInfo addAllMazeGroupList(
        final RogueGambleMazeGroupInfoOuterClass.RogueGambleMazeGroupInfo... values) {
      bitField0_ |= 0x00000040;
      mazeGroupList.addAll(values);
      return this;
    }

    @Override
    public RogueGambleInfo copyFrom(final RogueGambleInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        maxGameTimes = other.maxGameTimes;
        curTimes = other.curTimes;
        eCNHEBPPMJN = other.eCNHEBPPMJN;
        aAGHBMMPPKG = other.aAGHBMMPPKG;
        canPlay = other.canPlay;
        curCostItem.copyFrom(other.curCostItem);
        mazeGroupList.copyFrom(other.mazeGroupList);
      }
      return this;
    }

    @Override
    public RogueGambleInfo mergeFrom(final RogueGambleInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMaxGameTimes()) {
        setMaxGameTimes(other.maxGameTimes);
      }
      if (other.hasCurTimes()) {
        setCurTimes(other.curTimes);
      }
      if (other.hasECNHEBPPMJN()) {
        setECNHEBPPMJN(other.eCNHEBPPMJN);
      }
      if (other.hasAAGHBMMPPKG()) {
        setAAGHBMMPPKG(other.aAGHBMMPPKG);
      }
      if (other.hasCanPlay()) {
        setCanPlay(other.canPlay);
      }
      if (other.hasCurCostItem()) {
        getMutableCurCostItem().mergeFrom(other.curCostItem);
      }
      if (other.hasMazeGroupList()) {
        getMutableMazeGroupList().addAll(other.mazeGroupList);
      }
      return this;
    }

    @Override
    public RogueGambleInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      maxGameTimes = 0;
      curTimes = 0;
      eCNHEBPPMJN = 0;
      aAGHBMMPPKG = 0;
      canPlay = false;
      curCostItem.clear();
      mazeGroupList.clear();
      return this;
    }

    @Override
    public RogueGambleInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curCostItem.clearQuick();
      mazeGroupList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueGambleInfo)) {
        return false;
      }
      RogueGambleInfo other = (RogueGambleInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasMaxGameTimes() || maxGameTimes == other.maxGameTimes)
        && (!hasCurTimes() || curTimes == other.curTimes)
        && (!hasECNHEBPPMJN() || eCNHEBPPMJN == other.eCNHEBPPMJN)
        && (!hasAAGHBMMPPKG() || aAGHBMMPPKG == other.aAGHBMMPPKG)
        && (!hasCanPlay() || canPlay == other.canPlay)
        && (!hasCurCostItem() || curCostItem.equals(other.curCostItem))
        && (!hasMazeGroupList() || mazeGroupList.equals(other.mazeGroupList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(maxGameTimes);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(curTimes);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(eCNHEBPPMJN);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(aAGHBMMPPKG);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 72);
        output.writeBoolNoTag(canPlay);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 98);
        output.writeMessageNoTag(curCostItem);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < mazeGroupList.length(); i++) {
          output.writeRawByte((byte) 114);
          output.writeMessageNoTag(mazeGroupList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(maxGameTimes);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curTimes);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(eCNHEBPPMJN);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aAGHBMMPPKG);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(curCostItem);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * mazeGroupList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(mazeGroupList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueGambleInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // maxGameTimes
            maxGameTimes = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // curTimes
            curTimes = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // eCNHEBPPMJN
            eCNHEBPPMJN = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // aAGHBMMPPKG
            aAGHBMMPPKG = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // canPlay
            canPlay = input.readBool();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // curCostItem
            input.readMessage(curCostItem);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // mazeGroupList
            tag = input.readRepeatedMessage(mazeGroupList, tag);
            bitField0_ |= 0x00000040;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.maxGameTimes, maxGameTimes);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.curTimes, curTimes);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.eCNHEBPPMJN, eCNHEBPPMJN);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.aAGHBMMPPKG, aAGHBMMPPKG);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeBool(FieldNames.canPlay, canPlay);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeMessage(FieldNames.curCostItem, curCostItem);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedMessage(FieldNames.mazeGroupList, mazeGroupList);
      }
      output.endObject();
    }

    @Override
    public RogueGambleInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -432620176:
          case -1592221068: {
            if (input.isAtField(FieldNames.maxGameTimes)) {
              if (!input.trySkipNullValue()) {
                maxGameTimes = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 547814630:
          case 127351943: {
            if (input.isAtField(FieldNames.curTimes)) {
              if (!input.trySkipNullValue()) {
                curTimes = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 742779900: {
            if (input.isAtField(FieldNames.eCNHEBPPMJN)) {
              if (!input.trySkipNullValue()) {
                eCNHEBPPMJN = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1445566365: {
            if (input.isAtField(FieldNames.aAGHBMMPPKG)) {
              if (!input.trySkipNullValue()) {
                aAGHBMMPPKG = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 549656356:
          case -126540221: {
            if (input.isAtField(FieldNames.canPlay)) {
              if (!input.trySkipNullValue()) {
                canPlay = input.readBool();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 721458912:
          case -1512503034: {
            if (input.isAtField(FieldNames.curCostItem)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(curCostItem);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -317054274:
          case 407435998: {
            if (input.isAtField(FieldNames.mazeGroupList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(mazeGroupList);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueGambleInfo clone() {
      return new RogueGambleInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueGambleInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueGambleInfo(), data).checkInitialized();
    }

    public static RogueGambleInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueGambleInfo(), input).checkInitialized();
    }

    public static RogueGambleInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueGambleInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueGambleInfo messages
     */
    public static MessageFactory<RogueGambleInfo> getFactory() {
      return RogueGambleInfoFactory.INSTANCE;
    }

    private enum RogueGambleInfoFactory implements MessageFactory<RogueGambleInfo> {
      INSTANCE;

      @Override
      public RogueGambleInfo create() {
        return RogueGambleInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName maxGameTimes = FieldName.forField("maxGameTimes", "max_game_times");

      static final FieldName curTimes = FieldName.forField("curTimes", "cur_times");

      static final FieldName eCNHEBPPMJN = FieldName.forField("ECNHEBPPMJN");

      static final FieldName aAGHBMMPPKG = FieldName.forField("AAGHBMMPPKG");

      static final FieldName canPlay = FieldName.forField("canPlay", "can_play");

      static final FieldName curCostItem = FieldName.forField("curCostItem", "cur_cost_item");

      static final FieldName mazeGroupList = FieldName.forField("mazeGroupList", "maze_group_list");
    }
  }
}
