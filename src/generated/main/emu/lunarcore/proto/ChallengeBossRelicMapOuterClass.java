// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChallengeBossRelicMapOuterClass {
  /**
   * Protobuf type {@code ChallengeBossRelicMap}
   */
  public static final class ChallengeBossRelicMap extends ProtoMessage<ChallengeBossRelicMap> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 main_affix_id = 4;</code>
     */
    private int mainAffixId;

    /**
     * <code>optional uint32 level = 5;</code>
     */
    private int level;

    /**
     * <code>optional uint32 unique_id = 8;</code>
     */
    private int uniqueId;

    /**
     * <code>optional uint32 tid = 13;</code>
     */
    private int tid;

    /**
     * <code>repeated .RelicAffix sub_affix_list = 11;</code>
     */
    private final RepeatedMessage<RelicAffixOuterClass.RelicAffix> subAffixList = RepeatedMessage.newEmptyInstance(RelicAffixOuterClass.RelicAffix.getFactory());

    private ChallengeBossRelicMap() {
    }

    /**
     * @return a new empty instance of {@code ChallengeBossRelicMap}
     */
    public static ChallengeBossRelicMap newInstance() {
      return new ChallengeBossRelicMap();
    }

    /**
     * <code>optional uint32 main_affix_id = 4;</code>
     * @return whether the mainAffixId field is set
     */
    public boolean hasMainAffixId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 main_affix_id = 4;</code>
     * @return this
     */
    public ChallengeBossRelicMap clearMainAffixId() {
      bitField0_ &= ~0x00000001;
      mainAffixId = 0;
      return this;
    }

    /**
     * <code>optional uint32 main_affix_id = 4;</code>
     * @return the mainAffixId
     */
    public int getMainAffixId() {
      return mainAffixId;
    }

    /**
     * <code>optional uint32 main_affix_id = 4;</code>
     * @param value the mainAffixId to set
     * @return this
     */
    public ChallengeBossRelicMap setMainAffixId(final int value) {
      bitField0_ |= 0x00000001;
      mainAffixId = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 5;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 level = 5;</code>
     * @return this
     */
    public ChallengeBossRelicMap clearLevel() {
      bitField0_ &= ~0x00000002;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 5;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 5;</code>
     * @param value the level to set
     * @return this
     */
    public ChallengeBossRelicMap setLevel(final int value) {
      bitField0_ |= 0x00000002;
      level = value;
      return this;
    }

    /**
     * <code>optional uint32 unique_id = 8;</code>
     * @return whether the uniqueId field is set
     */
    public boolean hasUniqueId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 unique_id = 8;</code>
     * @return this
     */
    public ChallengeBossRelicMap clearUniqueId() {
      bitField0_ &= ~0x00000004;
      uniqueId = 0;
      return this;
    }

    /**
     * <code>optional uint32 unique_id = 8;</code>
     * @return the uniqueId
     */
    public int getUniqueId() {
      return uniqueId;
    }

    /**
     * <code>optional uint32 unique_id = 8;</code>
     * @param value the uniqueId to set
     * @return this
     */
    public ChallengeBossRelicMap setUniqueId(final int value) {
      bitField0_ |= 0x00000004;
      uniqueId = value;
      return this;
    }

    /**
     * <code>optional uint32 tid = 13;</code>
     * @return whether the tid field is set
     */
    public boolean hasTid() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 tid = 13;</code>
     * @return this
     */
    public ChallengeBossRelicMap clearTid() {
      bitField0_ &= ~0x00000008;
      tid = 0;
      return this;
    }

    /**
     * <code>optional uint32 tid = 13;</code>
     * @return the tid
     */
    public int getTid() {
      return tid;
    }

    /**
     * <code>optional uint32 tid = 13;</code>
     * @param value the tid to set
     * @return this
     */
    public ChallengeBossRelicMap setTid(final int value) {
      bitField0_ |= 0x00000008;
      tid = value;
      return this;
    }

    /**
     * <code>repeated .RelicAffix sub_affix_list = 11;</code>
     * @return whether the subAffixList field is set
     */
    public boolean hasSubAffixList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .RelicAffix sub_affix_list = 11;</code>
     * @return this
     */
    public ChallengeBossRelicMap clearSubAffixList() {
      bitField0_ &= ~0x00000010;
      subAffixList.clear();
      return this;
    }

    /**
     * <code>repeated .RelicAffix sub_affix_list = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSubAffixList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RelicAffixOuterClass.RelicAffix> getSubAffixList() {
      return subAffixList;
    }

    /**
     * <code>repeated .RelicAffix sub_affix_list = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RelicAffixOuterClass.RelicAffix> getMutableSubAffixList() {
      bitField0_ |= 0x00000010;
      return subAffixList;
    }

    /**
     * <code>repeated .RelicAffix sub_affix_list = 11;</code>
     * @param value the subAffixList to add
     * @return this
     */
    public ChallengeBossRelicMap addSubAffixList(final RelicAffixOuterClass.RelicAffix value) {
      bitField0_ |= 0x00000010;
      subAffixList.add(value);
      return this;
    }

    /**
     * <code>repeated .RelicAffix sub_affix_list = 11;</code>
     * @param values the subAffixList to add
     * @return this
     */
    public ChallengeBossRelicMap addAllSubAffixList(
        final RelicAffixOuterClass.RelicAffix... values) {
      bitField0_ |= 0x00000010;
      subAffixList.addAll(values);
      return this;
    }

    @Override
    public ChallengeBossRelicMap copyFrom(final ChallengeBossRelicMap other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mainAffixId = other.mainAffixId;
        level = other.level;
        uniqueId = other.uniqueId;
        tid = other.tid;
        subAffixList.copyFrom(other.subAffixList);
      }
      return this;
    }

    @Override
    public ChallengeBossRelicMap mergeFrom(final ChallengeBossRelicMap other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMainAffixId()) {
        setMainAffixId(other.mainAffixId);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasUniqueId()) {
        setUniqueId(other.uniqueId);
      }
      if (other.hasTid()) {
        setTid(other.tid);
      }
      if (other.hasSubAffixList()) {
        getMutableSubAffixList().addAll(other.subAffixList);
      }
      return this;
    }

    @Override
    public ChallengeBossRelicMap clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mainAffixId = 0;
      level = 0;
      uniqueId = 0;
      tid = 0;
      subAffixList.clear();
      return this;
    }

    @Override
    public ChallengeBossRelicMap clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      subAffixList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeBossRelicMap)) {
        return false;
      }
      ChallengeBossRelicMap other = (ChallengeBossRelicMap) o;
      return bitField0_ == other.bitField0_
        && (!hasMainAffixId() || mainAffixId == other.mainAffixId)
        && (!hasLevel() || level == other.level)
        && (!hasUniqueId() || uniqueId == other.uniqueId)
        && (!hasTid() || tid == other.tid)
        && (!hasSubAffixList() || subAffixList.equals(other.subAffixList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(mainAffixId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(uniqueId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(tid);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < subAffixList.length(); i++) {
          output.writeRawByte((byte) 90);
          output.writeMessageNoTag(subAffixList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(mainAffixId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(uniqueId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(tid);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * subAffixList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(subAffixList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeBossRelicMap mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // mainAffixId
            mainAffixId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // uniqueId
            uniqueId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // tid
            tid = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // subAffixList
            tag = input.readRepeatedMessage(subAffixList, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.mainAffixId, mainAffixId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.uniqueId, uniqueId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.tid, tid);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.subAffixList, subAffixList);
      }
      output.endObject();
    }

    @Override
    public ChallengeBossRelicMap mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1973876974:
          case -1426712144: {
            if (input.isAtField(FieldNames.mainAffixId)) {
              if (!input.trySkipNullValue()) {
                mainAffixId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -294460212:
          case -538310583: {
            if (input.isAtField(FieldNames.uniqueId)) {
              if (!input.trySkipNullValue()) {
                uniqueId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 114831: {
            if (input.isAtField(FieldNames.tid)) {
              if (!input.trySkipNullValue()) {
                tid = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -600836050:
          case 919890188: {
            if (input.isAtField(FieldNames.subAffixList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(subAffixList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeBossRelicMap clone() {
      return new ChallengeBossRelicMap().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeBossRelicMap parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeBossRelicMap(), data).checkInitialized();
    }

    public static ChallengeBossRelicMap parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossRelicMap(), input).checkInitialized();
    }

    public static ChallengeBossRelicMap parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossRelicMap(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeBossRelicMap messages
     */
    public static MessageFactory<ChallengeBossRelicMap> getFactory() {
      return ChallengeBossRelicMapFactory.INSTANCE;
    }

    private enum ChallengeBossRelicMapFactory implements MessageFactory<ChallengeBossRelicMap> {
      INSTANCE;

      @Override
      public ChallengeBossRelicMap create() {
        return ChallengeBossRelicMap.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mainAffixId = FieldName.forField("mainAffixId", "main_affix_id");

      static final FieldName level = FieldName.forField("level");

      static final FieldName uniqueId = FieldName.forField("uniqueId", "unique_id");

      static final FieldName tid = FieldName.forField("tid");

      static final FieldName subAffixList = FieldName.forField("subAffixList", "sub_affix_list");
    }
  }
}
