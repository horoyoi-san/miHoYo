// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ClearAetherDividePassiveSkillCsReqOuterClass {
  /**
   * Protobuf type {@code ClearAetherDividePassiveSkillCsReq}
   */
  public static final class ClearAetherDividePassiveSkillCsReq extends ProtoMessage<ClearAetherDividePassiveSkillCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 aether_avatar_id = 13;</code>
     */
    private int aetherAvatarId;

    /**
     * <code>optional uint32 slot = 15;</code>
     */
    private int slot;

    private ClearAetherDividePassiveSkillCsReq() {
    }

    /**
     * @return a new empty instance of {@code ClearAetherDividePassiveSkillCsReq}
     */
    public static ClearAetherDividePassiveSkillCsReq newInstance() {
      return new ClearAetherDividePassiveSkillCsReq();
    }

    /**
     * <code>optional uint32 aether_avatar_id = 13;</code>
     * @return whether the aetherAvatarId field is set
     */
    public boolean hasAetherAvatarId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 aether_avatar_id = 13;</code>
     * @return this
     */
    public ClearAetherDividePassiveSkillCsReq clearAetherAvatarId() {
      bitField0_ &= ~0x00000001;
      aetherAvatarId = 0;
      return this;
    }

    /**
     * <code>optional uint32 aether_avatar_id = 13;</code>
     * @return the aetherAvatarId
     */
    public int getAetherAvatarId() {
      return aetherAvatarId;
    }

    /**
     * <code>optional uint32 aether_avatar_id = 13;</code>
     * @param value the aetherAvatarId to set
     * @return this
     */
    public ClearAetherDividePassiveSkillCsReq setAetherAvatarId(final int value) {
      bitField0_ |= 0x00000001;
      aetherAvatarId = value;
      return this;
    }

    /**
     * <code>optional uint32 slot = 15;</code>
     * @return whether the slot field is set
     */
    public boolean hasSlot() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 slot = 15;</code>
     * @return this
     */
    public ClearAetherDividePassiveSkillCsReq clearSlot() {
      bitField0_ &= ~0x00000002;
      slot = 0;
      return this;
    }

    /**
     * <code>optional uint32 slot = 15;</code>
     * @return the slot
     */
    public int getSlot() {
      return slot;
    }

    /**
     * <code>optional uint32 slot = 15;</code>
     * @param value the slot to set
     * @return this
     */
    public ClearAetherDividePassiveSkillCsReq setSlot(final int value) {
      bitField0_ |= 0x00000002;
      slot = value;
      return this;
    }

    @Override
    public ClearAetherDividePassiveSkillCsReq copyFrom(
        final ClearAetherDividePassiveSkillCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        aetherAvatarId = other.aetherAvatarId;
        slot = other.slot;
      }
      return this;
    }

    @Override
    public ClearAetherDividePassiveSkillCsReq mergeFrom(
        final ClearAetherDividePassiveSkillCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAetherAvatarId()) {
        setAetherAvatarId(other.aetherAvatarId);
      }
      if (other.hasSlot()) {
        setSlot(other.slot);
      }
      return this;
    }

    @Override
    public ClearAetherDividePassiveSkillCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aetherAvatarId = 0;
      slot = 0;
      return this;
    }

    @Override
    public ClearAetherDividePassiveSkillCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ClearAetherDividePassiveSkillCsReq)) {
        return false;
      }
      ClearAetherDividePassiveSkillCsReq other = (ClearAetherDividePassiveSkillCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasAetherAvatarId() || aetherAvatarId == other.aetherAvatarId)
        && (!hasSlot() || slot == other.slot);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(aetherAvatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(slot);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aetherAvatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(slot);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ClearAetherDividePassiveSkillCsReq mergeFrom(final ProtoSource input) throws
        IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 104: {
            // aetherAvatarId
            aetherAvatarId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // slot
            slot = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.aetherAvatarId, aetherAvatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.slot, slot);
      }
      output.endObject();
    }

    @Override
    public ClearAetherDividePassiveSkillCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 2113392569:
          case 238179911: {
            if (input.isAtField(FieldNames.aetherAvatarId)) {
              if (!input.trySkipNullValue()) {
                aetherAvatarId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3533310: {
            if (input.isAtField(FieldNames.slot)) {
              if (!input.trySkipNullValue()) {
                slot = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ClearAetherDividePassiveSkillCsReq clone() {
      return new ClearAetherDividePassiveSkillCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ClearAetherDividePassiveSkillCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ClearAetherDividePassiveSkillCsReq(), data).checkInitialized();
    }

    public static ClearAetherDividePassiveSkillCsReq parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ClearAetherDividePassiveSkillCsReq(), input).checkInitialized();
    }

    public static ClearAetherDividePassiveSkillCsReq parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ClearAetherDividePassiveSkillCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating ClearAetherDividePassiveSkillCsReq messages
     */
    public static MessageFactory<ClearAetherDividePassiveSkillCsReq> getFactory() {
      return ClearAetherDividePassiveSkillCsReqFactory.INSTANCE;
    }

    private enum ClearAetherDividePassiveSkillCsReqFactory implements MessageFactory<ClearAetherDividePassiveSkillCsReq> {
      INSTANCE;

      @Override
      public ClearAetherDividePassiveSkillCsReq create() {
        return ClearAetherDividePassiveSkillCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName aetherAvatarId = FieldName.forField("aetherAvatarId", "aether_avatar_id");

      static final FieldName slot = FieldName.forField("slot");
    }
  }
}
