// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class GetPamSkinDataScRspOuterClass {
  /**
   * Protobuf type {@code GetPamSkinDataScRsp}
   */
  public static final class GetPamSkinDataScRsp extends ProtoMessage<GetPamSkinDataScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 cur_pam_skin_id = 4;</code>
     */
    private int curPamSkinId;

    /**
     * <code>optional uint32 retcode = 13;</code>
     */
    private int retcode;

    /**
     * <code>repeated uint32 pam_skin_list = 11;</code>
     */
    private final RepeatedInt pamSkinList = RepeatedInt.newEmptyInstance();

    private GetPamSkinDataScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetPamSkinDataScRsp}
     */
    public static GetPamSkinDataScRsp newInstance() {
      return new GetPamSkinDataScRsp();
    }

    /**
     * <code>optional uint32 cur_pam_skin_id = 4;</code>
     * @return whether the curPamSkinId field is set
     */
    public boolean hasCurPamSkinId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 cur_pam_skin_id = 4;</code>
     * @return this
     */
    public GetPamSkinDataScRsp clearCurPamSkinId() {
      bitField0_ &= ~0x00000001;
      curPamSkinId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_pam_skin_id = 4;</code>
     * @return the curPamSkinId
     */
    public int getCurPamSkinId() {
      return curPamSkinId;
    }

    /**
     * <code>optional uint32 cur_pam_skin_id = 4;</code>
     * @param value the curPamSkinId to set
     * @return this
     */
    public GetPamSkinDataScRsp setCurPamSkinId(final int value) {
      bitField0_ |= 0x00000001;
      curPamSkinId = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 13;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 retcode = 13;</code>
     * @return this
     */
    public GetPamSkinDataScRsp clearRetcode() {
      bitField0_ &= ~0x00000002;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 13;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 13;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetPamSkinDataScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000002;
      retcode = value;
      return this;
    }

    /**
     * <code>repeated uint32 pam_skin_list = 11;</code>
     * @return whether the pamSkinList field is set
     */
    public boolean hasPamSkinList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 pam_skin_list = 11;</code>
     * @return this
     */
    public GetPamSkinDataScRsp clearPamSkinList() {
      bitField0_ &= ~0x00000004;
      pamSkinList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 pam_skin_list = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutablePamSkinList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getPamSkinList() {
      return pamSkinList;
    }

    /**
     * <code>repeated uint32 pam_skin_list = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutablePamSkinList() {
      bitField0_ |= 0x00000004;
      return pamSkinList;
    }

    /**
     * <code>repeated uint32 pam_skin_list = 11;</code>
     * @param value the pamSkinList to add
     * @return this
     */
    public GetPamSkinDataScRsp addPamSkinList(final int value) {
      bitField0_ |= 0x00000004;
      pamSkinList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 pam_skin_list = 11;</code>
     * @param values the pamSkinList to add
     * @return this
     */
    public GetPamSkinDataScRsp addAllPamSkinList(final int... values) {
      bitField0_ |= 0x00000004;
      pamSkinList.addAll(values);
      return this;
    }

    @Override
    public GetPamSkinDataScRsp copyFrom(final GetPamSkinDataScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        curPamSkinId = other.curPamSkinId;
        retcode = other.retcode;
        pamSkinList.copyFrom(other.pamSkinList);
      }
      return this;
    }

    @Override
    public GetPamSkinDataScRsp mergeFrom(final GetPamSkinDataScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCurPamSkinId()) {
        setCurPamSkinId(other.curPamSkinId);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasPamSkinList()) {
        getMutablePamSkinList().addAll(other.pamSkinList);
      }
      return this;
    }

    @Override
    public GetPamSkinDataScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curPamSkinId = 0;
      retcode = 0;
      pamSkinList.clear();
      return this;
    }

    @Override
    public GetPamSkinDataScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      pamSkinList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetPamSkinDataScRsp)) {
        return false;
      }
      GetPamSkinDataScRsp other = (GetPamSkinDataScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasCurPamSkinId() || curPamSkinId == other.curPamSkinId)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasPamSkinList() || pamSkinList.equals(other.pamSkinList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(curPamSkinId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < pamSkinList.length(); i++) {
          output.writeRawByte((byte) 88);
          output.writeUInt32NoTag(pamSkinList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curPamSkinId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * pamSkinList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(pamSkinList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetPamSkinDataScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // curPamSkinId
            curPamSkinId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // pamSkinList [packed=true]
            input.readPackedUInt32(pamSkinList, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 88: {
            // pamSkinList [packed=false]
            tag = input.readRepeatedUInt32(pamSkinList, tag);
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.curPamSkinId, curPamSkinId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.pamSkinList, pamSkinList);
      }
      output.endObject();
    }

    @Override
    public GetPamSkinDataScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1704959788:
          case -317736197: {
            if (input.isAtField(FieldNames.curPamSkinId)) {
              if (!input.trySkipNullValue()) {
                curPamSkinId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1486929015:
          case -911211971: {
            if (input.isAtField(FieldNames.pamSkinList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(pamSkinList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetPamSkinDataScRsp clone() {
      return new GetPamSkinDataScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetPamSkinDataScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetPamSkinDataScRsp(), data).checkInitialized();
    }

    public static GetPamSkinDataScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetPamSkinDataScRsp(), input).checkInitialized();
    }

    public static GetPamSkinDataScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetPamSkinDataScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetPamSkinDataScRsp messages
     */
    public static MessageFactory<GetPamSkinDataScRsp> getFactory() {
      return GetPamSkinDataScRspFactory.INSTANCE;
    }

    private enum GetPamSkinDataScRspFactory implements MessageFactory<GetPamSkinDataScRsp> {
      INSTANCE;

      @Override
      public GetPamSkinDataScRsp create() {
        return GetPamSkinDataScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName curPamSkinId = FieldName.forField("curPamSkinId", "cur_pam_skin_id");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName pamSkinList = FieldName.forField("pamSkinList", "pam_skin_list");
    }
  }
}
