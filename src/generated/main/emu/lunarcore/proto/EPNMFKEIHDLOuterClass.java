// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import us.hebi.quickbuf.ProtoEnum;
import us.hebi.quickbuf.ProtoUtil;

public final class EPNMFKEIHDLOuterClass {
  /**
   * Protobuf enum {@code EPNMFKEIHDL}
   */
  public enum EPNMFKEIHDL implements ProtoEnum<EPNMFKEIHDL> {
    /**
     * <code>MESSAGE_SECTION_NONE = 0;</code>
     */
    MESSAGE_SECTION_NONE("MESSAGE_SECTION_NONE", 0),

    /**
     * <code>MESSAGE_SECTION_DOING = 1;</code>
     */
    MESSAGE_SECTION_DOING("MESSAGE_SECTION_DOING", 1),

    /**
     * <code>MESSAGE_SECTION_FINISH = 2;</code>
     */
    MESSAGE_SECTION_FINISH("MESSAGE_SECTION_FINISH", 2),

    /**
     * <code>MESSAGE_SECTION_FROZEN = 3;</code>
     */
    MESSAGE_SECTION_FROZEN("MESSAGE_SECTION_FROZEN", 3);

    /**
     * <code>MESSAGE_SECTION_NONE = 0;</code>
     */
    public static final int MESSAGE_SECTION_NONE_VALUE = 0;

    /**
     * <code>MESSAGE_SECTION_DOING = 1;</code>
     */
    public static final int MESSAGE_SECTION_DOING_VALUE = 1;

    /**
     * <code>MESSAGE_SECTION_FINISH = 2;</code>
     */
    public static final int MESSAGE_SECTION_FINISH_VALUE = 2;

    /**
     * <code>MESSAGE_SECTION_FROZEN = 3;</code>
     */
    public static final int MESSAGE_SECTION_FROZEN_VALUE = 3;

    private final String name;

    private final int number;

    private EPNMFKEIHDL(String name, int number) {
      this.name = name;
      this.number = number;
    }

    /**
     * @return the string representation of enum entry
     */
    @Override
    public String getName() {
      return name;
    }

    /**
     * @return the numeric wire value of this enum entry
     */
    @Override
    public int getNumber() {
      return number;
    }

    /**
     * @return a converter that maps between this enum's numeric and text representations
     */
    public static ProtoEnum.EnumConverter<EPNMFKEIHDL> converter() {
      return EPNMFKEIHDLConverter.INSTANCE;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value, or null if unknown.
     */
    public static EPNMFKEIHDL forNumber(int value) {
      return EPNMFKEIHDLConverter.INSTANCE.forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @param other Fallback value in case the value is not known.
     * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
     */
    public static EPNMFKEIHDL forNumberOr(int number, EPNMFKEIHDL other) {
      EPNMFKEIHDL value = forNumber(number);
      return value == null ? other : value;
    }

    enum EPNMFKEIHDLConverter implements ProtoEnum.EnumConverter<EPNMFKEIHDL> {
      INSTANCE;

      private static final EPNMFKEIHDL[] lookup = new EPNMFKEIHDL[4];

      static {
        lookup[0] = MESSAGE_SECTION_NONE;
        lookup[1] = MESSAGE_SECTION_DOING;
        lookup[2] = MESSAGE_SECTION_FINISH;
        lookup[3] = MESSAGE_SECTION_FROZEN;
      }

      @Override
      public final EPNMFKEIHDL forNumber(final int value) {
        if (value >= 0 && value < lookup.length) {
          return lookup[value];
        }
        return null;
      }

      @Override
      public final EPNMFKEIHDL forName(final CharSequence value) {
        if (value.length() == 20) {
          if (ProtoUtil.isEqual("MESSAGE_SECTION_NONE", value)) {
            return MESSAGE_SECTION_NONE;
          }
        }
        if (value.length() == 21) {
          if (ProtoUtil.isEqual("MESSAGE_SECTION_DOING", value)) {
            return MESSAGE_SECTION_DOING;
          }
        }
        if (value.length() == 22) {
          if (ProtoUtil.isEqual("MESSAGE_SECTION_FINISH", value)) {
            return MESSAGE_SECTION_FINISH;
          }
          if (ProtoUtil.isEqual("MESSAGE_SECTION_FROZEN", value)) {
            return MESSAGE_SECTION_FROZEN;
          }
        }
        return null;
      }
    }
  }
}
