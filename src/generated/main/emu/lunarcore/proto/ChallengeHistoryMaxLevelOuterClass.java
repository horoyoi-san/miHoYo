// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChallengeHistoryMaxLevelOuterClass {
  /**
   * Protobuf type {@code ChallengeHistoryMaxLevel}
   */
  public static final class ChallengeHistoryMaxLevel extends ProtoMessage<ChallengeHistoryMaxLevel> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 ordering_index = 6;</code>
     */
    private int orderingIndex;

    /**
     * <code>optional uint32 level = 12;</code>
     */
    private int level;

    private ChallengeHistoryMaxLevel() {
    }

    /**
     * @return a new empty instance of {@code ChallengeHistoryMaxLevel}
     */
    public static ChallengeHistoryMaxLevel newInstance() {
      return new ChallengeHistoryMaxLevel();
    }

    /**
     * <code>optional uint32 ordering_index = 6;</code>
     * @return whether the orderingIndex field is set
     */
    public boolean hasOrderingIndex() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 ordering_index = 6;</code>
     * @return this
     */
    public ChallengeHistoryMaxLevel clearOrderingIndex() {
      bitField0_ &= ~0x00000001;
      orderingIndex = 0;
      return this;
    }

    /**
     * <code>optional uint32 ordering_index = 6;</code>
     * @return the orderingIndex
     */
    public int getOrderingIndex() {
      return orderingIndex;
    }

    /**
     * <code>optional uint32 ordering_index = 6;</code>
     * @param value the orderingIndex to set
     * @return this
     */
    public ChallengeHistoryMaxLevel setOrderingIndex(final int value) {
      bitField0_ |= 0x00000001;
      orderingIndex = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 12;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 level = 12;</code>
     * @return this
     */
    public ChallengeHistoryMaxLevel clearLevel() {
      bitField0_ &= ~0x00000002;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 12;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 12;</code>
     * @param value the level to set
     * @return this
     */
    public ChallengeHistoryMaxLevel setLevel(final int value) {
      bitField0_ |= 0x00000002;
      level = value;
      return this;
    }

    @Override
    public ChallengeHistoryMaxLevel copyFrom(final ChallengeHistoryMaxLevel other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        orderingIndex = other.orderingIndex;
        level = other.level;
      }
      return this;
    }

    @Override
    public ChallengeHistoryMaxLevel mergeFrom(final ChallengeHistoryMaxLevel other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasOrderingIndex()) {
        setOrderingIndex(other.orderingIndex);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      return this;
    }

    @Override
    public ChallengeHistoryMaxLevel clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      orderingIndex = 0;
      level = 0;
      return this;
    }

    @Override
    public ChallengeHistoryMaxLevel clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeHistoryMaxLevel)) {
        return false;
      }
      ChallengeHistoryMaxLevel other = (ChallengeHistoryMaxLevel) o;
      return bitField0_ == other.bitField0_
        && (!hasOrderingIndex() || orderingIndex == other.orderingIndex)
        && (!hasLevel() || level == other.level);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(orderingIndex);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(level);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(orderingIndex);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeHistoryMaxLevel mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 48: {
            // orderingIndex
            orderingIndex = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.orderingIndex, orderingIndex);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      output.endObject();
    }

    @Override
    public ChallengeHistoryMaxLevel mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1928894302:
          case 291701415: {
            if (input.isAtField(FieldNames.orderingIndex)) {
              if (!input.trySkipNullValue()) {
                orderingIndex = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeHistoryMaxLevel clone() {
      return new ChallengeHistoryMaxLevel().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeHistoryMaxLevel parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeHistoryMaxLevel(), data).checkInitialized();
    }

    public static ChallengeHistoryMaxLevel parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeHistoryMaxLevel(), input).checkInitialized();
    }

    public static ChallengeHistoryMaxLevel parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeHistoryMaxLevel(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeHistoryMaxLevel messages
     */
    public static MessageFactory<ChallengeHistoryMaxLevel> getFactory() {
      return ChallengeHistoryMaxLevelFactory.INSTANCE;
    }

    private enum ChallengeHistoryMaxLevelFactory implements MessageFactory<ChallengeHistoryMaxLevel> {
      INSTANCE;

      @Override
      public ChallengeHistoryMaxLevel create() {
        return ChallengeHistoryMaxLevel.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName orderingIndex = FieldName.forField("orderingIndex", "ordering_index");

      static final FieldName level = FieldName.forField("level");
    }
  }
}
