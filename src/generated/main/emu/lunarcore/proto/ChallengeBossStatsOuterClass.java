// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChallengeBossStatsOuterClass {
  /**
   * Protobuf type {@code ChallengeBossStats}
   */
  public static final class ChallengeBossStats extends ProtoMessage<ChallengeBossStats> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 attempts = 15;</code>
     */
    private int attempts;

    /**
     * <code>optional .ChallengeBossClearInfo clear_info = 4;</code>
     */
    private final ChallengeBossClearInfoOuterClass.ChallengeBossClearInfo clearInfo = ChallengeBossClearInfoOuterClass.ChallengeBossClearInfo.newInstance();

    private ChallengeBossStats() {
    }

    /**
     * @return a new empty instance of {@code ChallengeBossStats}
     */
    public static ChallengeBossStats newInstance() {
      return new ChallengeBossStats();
    }

    /**
     * <code>optional uint32 attempts = 15;</code>
     * @return whether the attempts field is set
     */
    public boolean hasAttempts() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 attempts = 15;</code>
     * @return this
     */
    public ChallengeBossStats clearAttempts() {
      bitField0_ &= ~0x00000001;
      attempts = 0;
      return this;
    }

    /**
     * <code>optional uint32 attempts = 15;</code>
     * @return the attempts
     */
    public int getAttempts() {
      return attempts;
    }

    /**
     * <code>optional uint32 attempts = 15;</code>
     * @param value the attempts to set
     * @return this
     */
    public ChallengeBossStats setAttempts(final int value) {
      bitField0_ |= 0x00000001;
      attempts = value;
      return this;
    }

    /**
     * <code>optional .ChallengeBossClearInfo clear_info = 4;</code>
     * @return whether the clearInfo field is set
     */
    public boolean hasClearInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ChallengeBossClearInfo clear_info = 4;</code>
     * @return this
     */
    public ChallengeBossStats clearClearInfo() {
      bitField0_ &= ~0x00000002;
      clearInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChallengeBossClearInfo clear_info = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableClearInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeBossClearInfoOuterClass.ChallengeBossClearInfo getClearInfo() {
      return clearInfo;
    }

    /**
     * <code>optional .ChallengeBossClearInfo clear_info = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeBossClearInfoOuterClass.ChallengeBossClearInfo getMutableClearInfo() {
      bitField0_ |= 0x00000002;
      return clearInfo;
    }

    /**
     * <code>optional .ChallengeBossClearInfo clear_info = 4;</code>
     * @param value the clearInfo to set
     * @return this
     */
    public ChallengeBossStats setClearInfo(
        final ChallengeBossClearInfoOuterClass.ChallengeBossClearInfo value) {
      bitField0_ |= 0x00000002;
      clearInfo.copyFrom(value);
      return this;
    }

    @Override
    public ChallengeBossStats copyFrom(final ChallengeBossStats other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        attempts = other.attempts;
        clearInfo.copyFrom(other.clearInfo);
      }
      return this;
    }

    @Override
    public ChallengeBossStats mergeFrom(final ChallengeBossStats other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAttempts()) {
        setAttempts(other.attempts);
      }
      if (other.hasClearInfo()) {
        getMutableClearInfo().mergeFrom(other.clearInfo);
      }
      return this;
    }

    @Override
    public ChallengeBossStats clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      attempts = 0;
      clearInfo.clear();
      return this;
    }

    @Override
    public ChallengeBossStats clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      clearInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeBossStats)) {
        return false;
      }
      ChallengeBossStats other = (ChallengeBossStats) o;
      return bitField0_ == other.bitField0_
        && (!hasAttempts() || attempts == other.attempts)
        && (!hasClearInfo() || clearInfo.equals(other.clearInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(attempts);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 34);
        output.writeMessageNoTag(clearInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(attempts);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(clearInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeBossStats mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 120: {
            // attempts
            attempts = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // clearInfo
            input.readMessage(clearInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.attempts, attempts);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.clearInfo, clearInfo);
      }
      output.endObject();
    }

    @Override
    public ChallengeBossStats mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 542738246: {
            if (input.isAtField(FieldNames.attempts)) {
              if (!input.trySkipNullValue()) {
                attempts = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1271226213:
          case -733130912: {
            if (input.isAtField(FieldNames.clearInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(clearInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeBossStats clone() {
      return new ChallengeBossStats().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeBossStats parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeBossStats(), data).checkInitialized();
    }

    public static ChallengeBossStats parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossStats(), input).checkInitialized();
    }

    public static ChallengeBossStats parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossStats(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeBossStats messages
     */
    public static MessageFactory<ChallengeBossStats> getFactory() {
      return ChallengeBossStatsFactory.INSTANCE;
    }

    private enum ChallengeBossStatsFactory implements MessageFactory<ChallengeBossStats> {
      INSTANCE;

      @Override
      public ChallengeBossStats create() {
        return ChallengeBossStats.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName attempts = FieldName.forField("attempts");

      static final FieldName clearInfo = FieldName.forField("clearInfo", "clear_info");
    }
  }
}
