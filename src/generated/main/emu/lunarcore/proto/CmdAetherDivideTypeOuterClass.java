// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import us.hebi.quickbuf.ProtoEnum;
import us.hebi.quickbuf.ProtoUtil;

public final class CmdAetherDivideTypeOuterClass {
  /**
   * Protobuf enum {@code CmdAetherDivideType}
   */
  public enum CmdAetherDivideType implements ProtoEnum<CmdAetherDivideType> {
    /**
     * <code>CmdAetherDivideTypeNone = 0;</code>
     */
    CmdAetherDivideTypeNone("CmdAetherDivideTypeNone", 0),

    /**
     * <code>CmdEnterAetherDivideSceneScRsp = 4837;</code>
     */
    CmdEnterAetherDivideSceneScRsp("CmdEnterAetherDivideSceneScRsp", 4837),

    /**
     * <code>CmdAetherDivideLineupScNotify = 4831;</code>
     */
    CmdAetherDivideLineupScNotify("CmdAetherDivideLineupScNotify", 4831),

    /**
     * <code>CmdEquipAetherDividePassiveSkillScRsp = 4814;</code>
     */
    CmdEquipAetherDividePassiveSkillScRsp("CmdEquipAetherDividePassiveSkillScRsp", 4814),

    /**
     * <code>CmdAetherDivideRefreshEndlessScRsp = 4816;</code>
     */
    CmdAetherDivideRefreshEndlessScRsp("CmdAetherDivideRefreshEndlessScRsp", 4816),

    /**
     * <code>CmdEquipAetherDividePassiveSkillCsReq = 4832;</code>
     */
    CmdEquipAetherDividePassiveSkillCsReq("CmdEquipAetherDividePassiveSkillCsReq", 4832),

    /**
     * <code>CmdClearAetherDividePassiveSkillScRsp = 4810;</code>
     */
    CmdClearAetherDividePassiveSkillScRsp("CmdClearAetherDividePassiveSkillScRsp", 4810),

    /**
     * <code>CmdSwitchAetherDivideLineUpSlotCsReq = 4835;</code>
     */
    CmdSwitchAetherDivideLineUpSlotCsReq("CmdSwitchAetherDivideLineUpSlotCsReq", 4835),

    /**
     * <code>CmdAetherDivideTainerInfoScNotify = 4812;</code>
     */
    CmdAetherDivideTainerInfoScNotify("CmdAetherDivideTainerInfoScNotify", 4812),

    /**
     * <code>CmdEnterAetherDivideSceneCsReq = 4826;</code>
     */
    CmdEnterAetherDivideSceneCsReq("CmdEnterAetherDivideSceneCsReq", 4826),

    /**
     * <code>CmdSetAetherDivideLineUpCsReq = 4848;</code>
     */
    CmdSetAetherDivideLineUpCsReq("CmdSetAetherDivideLineUpCsReq", 4848),

    /**
     * <code>CmdGetAetherDivideInfoScRsp = 4802;</code>
     */
    CmdGetAetherDivideInfoScRsp("CmdGetAetherDivideInfoScRsp", 4802),

    /**
     * <code>CmdClearAetherDividePassiveSkillCsReq = 4840;</code>
     */
    CmdClearAetherDividePassiveSkillCsReq("CmdClearAetherDividePassiveSkillCsReq", 4840),

    /**
     * <code>CmdSwitchAetherDivideLineUpSlotScRsp = 4809;</code>
     */
    CmdSwitchAetherDivideLineUpSlotScRsp("CmdSwitchAetherDivideLineUpSlotScRsp", 4809),

    /**
     * <code>CmdGetAetherDivideChallengeInfoScRsp = 4803;</code>
     */
    CmdGetAetherDivideChallengeInfoScRsp("CmdGetAetherDivideChallengeInfoScRsp", 4803),

    /**
     * <code>CmdGetAetherDivideChallengeInfoCsReq = 4845;</code>
     */
    CmdGetAetherDivideChallengeInfoCsReq("CmdGetAetherDivideChallengeInfoCsReq", 4845),

    /**
     * <code>CmdAetherDivideTakeChallengeRewardScRsp = 4827;</code>
     */
    CmdAetherDivideTakeChallengeRewardScRsp("CmdAetherDivideTakeChallengeRewardScRsp", 4827),

    /**
     * <code>CmdLeaveAetherDivideSceneCsReq = 4841;</code>
     */
    CmdLeaveAetherDivideSceneCsReq("CmdLeaveAetherDivideSceneCsReq", 4841),

    /**
     * <code>CmdStartAetherDivideStageBattleScRsp = 4801;</code>
     */
    CmdStartAetherDivideStageBattleScRsp("CmdStartAetherDivideStageBattleScRsp", 4801),

    /**
     * <code>CmdAetherDivideTakeChallengeRewardCsReq = 4849;</code>
     */
    CmdAetherDivideTakeChallengeRewardCsReq("CmdAetherDivideTakeChallengeRewardCsReq", 4849),

    /**
     * <code>CmdAetherDivideSpiritExpUpScRsp = 4820;</code>
     */
    CmdAetherDivideSpiritExpUpScRsp("CmdAetherDivideSpiritExpUpScRsp", 4820),

    /**
     * <code>CmdStartAetherDivideChallengeBattleScRsp = 4829;</code>
     */
    CmdStartAetherDivideChallengeBattleScRsp("CmdStartAetherDivideChallengeBattleScRsp", 4829),

    /**
     * <code>CmdAetherDivideSpiritInfoScNotify = 4839;</code>
     */
    CmdAetherDivideSpiritInfoScNotify("CmdAetherDivideSpiritInfoScNotify", 4839),

    /**
     * <code>CmdStartAetherDivideStageBattleCsReq = 4824;</code>
     */
    CmdStartAetherDivideStageBattleCsReq("CmdStartAetherDivideStageBattleCsReq", 4824),

    /**
     * <code>CmdAetherDivideRefreshEndlessCsReq = 4834;</code>
     */
    CmdAetherDivideRefreshEndlessCsReq("CmdAetherDivideRefreshEndlessCsReq", 4834),

    /**
     * <code>CmdStartAetherDivideChallengeBattleCsReq = 4807;</code>
     */
    CmdStartAetherDivideChallengeBattleCsReq("CmdStartAetherDivideChallengeBattleCsReq", 4807),

    /**
     * <code>CmdSetAetherDivideLineUpScRsp = 4804;</code>
     */
    CmdSetAetherDivideLineUpScRsp("CmdSetAetherDivideLineUpScRsp", 4804),

    /**
     * <code>CmdGetAetherDivideInfoCsReq = 4830;</code>
     */
    CmdGetAetherDivideInfoCsReq("CmdGetAetherDivideInfoCsReq", 4830),

    /**
     * <code>CmdStartAetherDivideSceneBattleCsReq = 4806;</code>
     */
    CmdStartAetherDivideSceneBattleCsReq("CmdStartAetherDivideSceneBattleCsReq", 4806),

    /**
     * <code>CmdAetherDivideSkillItemScNotify = 4817;</code>
     */
    CmdAetherDivideSkillItemScNotify("CmdAetherDivideSkillItemScNotify", 4817),

    /**
     * <code>CmdLeaveAetherDivideSceneScRsp = 4843;</code>
     */
    CmdLeaveAetherDivideSceneScRsp("CmdLeaveAetherDivideSceneScRsp", 4843),

    /**
     * <code>CmdAetherDivideRefreshEndlessScNotify = 4846;</code>
     */
    CmdAetherDivideRefreshEndlessScNotify("CmdAetherDivideRefreshEndlessScNotify", 4846),

    /**
     * <code>CmdAetherDivideFinishChallengeScNotify = 4828;</code>
     */
    CmdAetherDivideFinishChallengeScNotify("CmdAetherDivideFinishChallengeScNotify", 4828),

    /**
     * <code>CmdAetherDivideSpiritExpUpCsReq = 4821;</code>
     */
    CmdAetherDivideSpiritExpUpCsReq("CmdAetherDivideSpiritExpUpCsReq", 4821),

    /**
     * <code>CmdStartAetherDivideSceneBattleScRsp = 4833;</code>
     */
    CmdStartAetherDivideSceneBattleScRsp("CmdStartAetherDivideSceneBattleScRsp", 4833);

    /**
     * <code>CmdAetherDivideTypeNone = 0;</code>
     */
    public static final int CmdAetherDivideTypeNone_VALUE = 0;

    /**
     * <code>CmdEnterAetherDivideSceneScRsp = 4837;</code>
     */
    public static final int CmdEnterAetherDivideSceneScRsp_VALUE = 4837;

    /**
     * <code>CmdAetherDivideLineupScNotify = 4831;</code>
     */
    public static final int CmdAetherDivideLineupScNotify_VALUE = 4831;

    /**
     * <code>CmdEquipAetherDividePassiveSkillScRsp = 4814;</code>
     */
    public static final int CmdEquipAetherDividePassiveSkillScRsp_VALUE = 4814;

    /**
     * <code>CmdAetherDivideRefreshEndlessScRsp = 4816;</code>
     */
    public static final int CmdAetherDivideRefreshEndlessScRsp_VALUE = 4816;

    /**
     * <code>CmdEquipAetherDividePassiveSkillCsReq = 4832;</code>
     */
    public static final int CmdEquipAetherDividePassiveSkillCsReq_VALUE = 4832;

    /**
     * <code>CmdClearAetherDividePassiveSkillScRsp = 4810;</code>
     */
    public static final int CmdClearAetherDividePassiveSkillScRsp_VALUE = 4810;

    /**
     * <code>CmdSwitchAetherDivideLineUpSlotCsReq = 4835;</code>
     */
    public static final int CmdSwitchAetherDivideLineUpSlotCsReq_VALUE = 4835;

    /**
     * <code>CmdAetherDivideTainerInfoScNotify = 4812;</code>
     */
    public static final int CmdAetherDivideTainerInfoScNotify_VALUE = 4812;

    /**
     * <code>CmdEnterAetherDivideSceneCsReq = 4826;</code>
     */
    public static final int CmdEnterAetherDivideSceneCsReq_VALUE = 4826;

    /**
     * <code>CmdSetAetherDivideLineUpCsReq = 4848;</code>
     */
    public static final int CmdSetAetherDivideLineUpCsReq_VALUE = 4848;

    /**
     * <code>CmdGetAetherDivideInfoScRsp = 4802;</code>
     */
    public static final int CmdGetAetherDivideInfoScRsp_VALUE = 4802;

    /**
     * <code>CmdClearAetherDividePassiveSkillCsReq = 4840;</code>
     */
    public static final int CmdClearAetherDividePassiveSkillCsReq_VALUE = 4840;

    /**
     * <code>CmdSwitchAetherDivideLineUpSlotScRsp = 4809;</code>
     */
    public static final int CmdSwitchAetherDivideLineUpSlotScRsp_VALUE = 4809;

    /**
     * <code>CmdGetAetherDivideChallengeInfoScRsp = 4803;</code>
     */
    public static final int CmdGetAetherDivideChallengeInfoScRsp_VALUE = 4803;

    /**
     * <code>CmdGetAetherDivideChallengeInfoCsReq = 4845;</code>
     */
    public static final int CmdGetAetherDivideChallengeInfoCsReq_VALUE = 4845;

    /**
     * <code>CmdAetherDivideTakeChallengeRewardScRsp = 4827;</code>
     */
    public static final int CmdAetherDivideTakeChallengeRewardScRsp_VALUE = 4827;

    /**
     * <code>CmdLeaveAetherDivideSceneCsReq = 4841;</code>
     */
    public static final int CmdLeaveAetherDivideSceneCsReq_VALUE = 4841;

    /**
     * <code>CmdStartAetherDivideStageBattleScRsp = 4801;</code>
     */
    public static final int CmdStartAetherDivideStageBattleScRsp_VALUE = 4801;

    /**
     * <code>CmdAetherDivideTakeChallengeRewardCsReq = 4849;</code>
     */
    public static final int CmdAetherDivideTakeChallengeRewardCsReq_VALUE = 4849;

    /**
     * <code>CmdAetherDivideSpiritExpUpScRsp = 4820;</code>
     */
    public static final int CmdAetherDivideSpiritExpUpScRsp_VALUE = 4820;

    /**
     * <code>CmdStartAetherDivideChallengeBattleScRsp = 4829;</code>
     */
    public static final int CmdStartAetherDivideChallengeBattleScRsp_VALUE = 4829;

    /**
     * <code>CmdAetherDivideSpiritInfoScNotify = 4839;</code>
     */
    public static final int CmdAetherDivideSpiritInfoScNotify_VALUE = 4839;

    /**
     * <code>CmdStartAetherDivideStageBattleCsReq = 4824;</code>
     */
    public static final int CmdStartAetherDivideStageBattleCsReq_VALUE = 4824;

    /**
     * <code>CmdAetherDivideRefreshEndlessCsReq = 4834;</code>
     */
    public static final int CmdAetherDivideRefreshEndlessCsReq_VALUE = 4834;

    /**
     * <code>CmdStartAetherDivideChallengeBattleCsReq = 4807;</code>
     */
    public static final int CmdStartAetherDivideChallengeBattleCsReq_VALUE = 4807;

    /**
     * <code>CmdSetAetherDivideLineUpScRsp = 4804;</code>
     */
    public static final int CmdSetAetherDivideLineUpScRsp_VALUE = 4804;

    /**
     * <code>CmdGetAetherDivideInfoCsReq = 4830;</code>
     */
    public static final int CmdGetAetherDivideInfoCsReq_VALUE = 4830;

    /**
     * <code>CmdStartAetherDivideSceneBattleCsReq = 4806;</code>
     */
    public static final int CmdStartAetherDivideSceneBattleCsReq_VALUE = 4806;

    /**
     * <code>CmdAetherDivideSkillItemScNotify = 4817;</code>
     */
    public static final int CmdAetherDivideSkillItemScNotify_VALUE = 4817;

    /**
     * <code>CmdLeaveAetherDivideSceneScRsp = 4843;</code>
     */
    public static final int CmdLeaveAetherDivideSceneScRsp_VALUE = 4843;

    /**
     * <code>CmdAetherDivideRefreshEndlessScNotify = 4846;</code>
     */
    public static final int CmdAetherDivideRefreshEndlessScNotify_VALUE = 4846;

    /**
     * <code>CmdAetherDivideFinishChallengeScNotify = 4828;</code>
     */
    public static final int CmdAetherDivideFinishChallengeScNotify_VALUE = 4828;

    /**
     * <code>CmdAetherDivideSpiritExpUpCsReq = 4821;</code>
     */
    public static final int CmdAetherDivideSpiritExpUpCsReq_VALUE = 4821;

    /**
     * <code>CmdStartAetherDivideSceneBattleScRsp = 4833;</code>
     */
    public static final int CmdStartAetherDivideSceneBattleScRsp_VALUE = 4833;

    private final String name;

    private final int number;

    private CmdAetherDivideType(String name, int number) {
      this.name = name;
      this.number = number;
    }

    /**
     * @return the string representation of enum entry
     */
    @Override
    public String getName() {
      return name;
    }

    /**
     * @return the numeric wire value of this enum entry
     */
    @Override
    public int getNumber() {
      return number;
    }

    /**
     * @return a converter that maps between this enum's numeric and text representations
     */
    public static ProtoEnum.EnumConverter<CmdAetherDivideType> converter() {
      return CmdAetherDivideTypeConverter.INSTANCE;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value, or null if unknown.
     */
    public static CmdAetherDivideType forNumber(int value) {
      return CmdAetherDivideTypeConverter.INSTANCE.forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @param other Fallback value in case the value is not known.
     * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
     */
    public static CmdAetherDivideType forNumberOr(int number, CmdAetherDivideType other) {
      CmdAetherDivideType value = forNumber(number);
      return value == null ? other : value;
    }

    enum CmdAetherDivideTypeConverter implements ProtoEnum.EnumConverter<CmdAetherDivideType> {
      INSTANCE;

      @Override
      public final CmdAetherDivideType forNumber(final int value) {
        switch(value) {
          case 0: return CmdAetherDivideTypeNone;
          case 4837: return CmdEnterAetherDivideSceneScRsp;
          case 4831: return CmdAetherDivideLineupScNotify;
          case 4814: return CmdEquipAetherDividePassiveSkillScRsp;
          case 4816: return CmdAetherDivideRefreshEndlessScRsp;
          case 4832: return CmdEquipAetherDividePassiveSkillCsReq;
          case 4810: return CmdClearAetherDividePassiveSkillScRsp;
          case 4835: return CmdSwitchAetherDivideLineUpSlotCsReq;
          case 4812: return CmdAetherDivideTainerInfoScNotify;
          case 4826: return CmdEnterAetherDivideSceneCsReq;
          case 4848: return CmdSetAetherDivideLineUpCsReq;
          case 4802: return CmdGetAetherDivideInfoScRsp;
          case 4840: return CmdClearAetherDividePassiveSkillCsReq;
          case 4809: return CmdSwitchAetherDivideLineUpSlotScRsp;
          case 4803: return CmdGetAetherDivideChallengeInfoScRsp;
          case 4845: return CmdGetAetherDivideChallengeInfoCsReq;
          case 4827: return CmdAetherDivideTakeChallengeRewardScRsp;
          case 4841: return CmdLeaveAetherDivideSceneCsReq;
          case 4801: return CmdStartAetherDivideStageBattleScRsp;
          case 4849: return CmdAetherDivideTakeChallengeRewardCsReq;
          case 4820: return CmdAetherDivideSpiritExpUpScRsp;
          case 4829: return CmdStartAetherDivideChallengeBattleScRsp;
          case 4839: return CmdAetherDivideSpiritInfoScNotify;
          case 4824: return CmdStartAetherDivideStageBattleCsReq;
          case 4834: return CmdAetherDivideRefreshEndlessCsReq;
          case 4807: return CmdStartAetherDivideChallengeBattleCsReq;
          case 4804: return CmdSetAetherDivideLineUpScRsp;
          case 4830: return CmdGetAetherDivideInfoCsReq;
          case 4806: return CmdStartAetherDivideSceneBattleCsReq;
          case 4817: return CmdAetherDivideSkillItemScNotify;
          case 4843: return CmdLeaveAetherDivideSceneScRsp;
          case 4846: return CmdAetherDivideRefreshEndlessScNotify;
          case 4828: return CmdAetherDivideFinishChallengeScNotify;
          case 4821: return CmdAetherDivideSpiritExpUpCsReq;
          case 4833: return CmdStartAetherDivideSceneBattleScRsp;
          default: return null;
        }
      }

      @Override
      public final CmdAetherDivideType forName(final CharSequence value) {
        switch (value.length()) {
          case 23: {
            if (ProtoUtil.isEqual("CmdAetherDivideTypeNone", value)) {
              return CmdAetherDivideTypeNone;
            }
            break;
          }
          case 27: {
            if (ProtoUtil.isEqual("CmdGetAetherDivideInfoScRsp", value)) {
              return CmdGetAetherDivideInfoScRsp;
            }
            if (ProtoUtil.isEqual("CmdGetAetherDivideInfoCsReq", value)) {
              return CmdGetAetherDivideInfoCsReq;
            }
            break;
          }
          case 29: {
            if (ProtoUtil.isEqual("CmdAetherDivideLineupScNotify", value)) {
              return CmdAetherDivideLineupScNotify;
            }
            if (ProtoUtil.isEqual("CmdSetAetherDivideLineUpCsReq", value)) {
              return CmdSetAetherDivideLineUpCsReq;
            }
            if (ProtoUtil.isEqual("CmdSetAetherDivideLineUpScRsp", value)) {
              return CmdSetAetherDivideLineUpScRsp;
            }
            break;
          }
          case 30: {
            if (ProtoUtil.isEqual("CmdEnterAetherDivideSceneScRsp", value)) {
              return CmdEnterAetherDivideSceneScRsp;
            }
            if (ProtoUtil.isEqual("CmdEnterAetherDivideSceneCsReq", value)) {
              return CmdEnterAetherDivideSceneCsReq;
            }
            if (ProtoUtil.isEqual("CmdLeaveAetherDivideSceneCsReq", value)) {
              return CmdLeaveAetherDivideSceneCsReq;
            }
            if (ProtoUtil.isEqual("CmdLeaveAetherDivideSceneScRsp", value)) {
              return CmdLeaveAetherDivideSceneScRsp;
            }
            break;
          }
          case 31: {
            if (ProtoUtil.isEqual("CmdAetherDivideSpiritExpUpScRsp", value)) {
              return CmdAetherDivideSpiritExpUpScRsp;
            }
            if (ProtoUtil.isEqual("CmdAetherDivideSpiritExpUpCsReq", value)) {
              return CmdAetherDivideSpiritExpUpCsReq;
            }
            break;
          }
          case 32: {
            if (ProtoUtil.isEqual("CmdAetherDivideSkillItemScNotify", value)) {
              return CmdAetherDivideSkillItemScNotify;
            }
            break;
          }
          case 33: {
            if (ProtoUtil.isEqual("CmdAetherDivideTainerInfoScNotify", value)) {
              return CmdAetherDivideTainerInfoScNotify;
            }
            if (ProtoUtil.isEqual("CmdAetherDivideSpiritInfoScNotify", value)) {
              return CmdAetherDivideSpiritInfoScNotify;
            }
            break;
          }
          case 34: {
            if (ProtoUtil.isEqual("CmdAetherDivideRefreshEndlessScRsp", value)) {
              return CmdAetherDivideRefreshEndlessScRsp;
            }
            if (ProtoUtil.isEqual("CmdAetherDivideRefreshEndlessCsReq", value)) {
              return CmdAetherDivideRefreshEndlessCsReq;
            }
            break;
          }
          case 36: {
            if (ProtoUtil.isEqual("CmdSwitchAetherDivideLineUpSlotCsReq", value)) {
              return CmdSwitchAetherDivideLineUpSlotCsReq;
            }
            if (ProtoUtil.isEqual("CmdSwitchAetherDivideLineUpSlotScRsp", value)) {
              return CmdSwitchAetherDivideLineUpSlotScRsp;
            }
            if (ProtoUtil.isEqual("CmdGetAetherDivideChallengeInfoScRsp", value)) {
              return CmdGetAetherDivideChallengeInfoScRsp;
            }
            if (ProtoUtil.isEqual("CmdGetAetherDivideChallengeInfoCsReq", value)) {
              return CmdGetAetherDivideChallengeInfoCsReq;
            }
            if (ProtoUtil.isEqual("CmdStartAetherDivideStageBattleScRsp", value)) {
              return CmdStartAetherDivideStageBattleScRsp;
            }
            if (ProtoUtil.isEqual("CmdStartAetherDivideStageBattleCsReq", value)) {
              return CmdStartAetherDivideStageBattleCsReq;
            }
            if (ProtoUtil.isEqual("CmdStartAetherDivideSceneBattleCsReq", value)) {
              return CmdStartAetherDivideSceneBattleCsReq;
            }
            if (ProtoUtil.isEqual("CmdStartAetherDivideSceneBattleScRsp", value)) {
              return CmdStartAetherDivideSceneBattleScRsp;
            }
            break;
          }
          case 37: {
            if (ProtoUtil.isEqual("CmdEquipAetherDividePassiveSkillScRsp", value)) {
              return CmdEquipAetherDividePassiveSkillScRsp;
            }
            if (ProtoUtil.isEqual("CmdEquipAetherDividePassiveSkillCsReq", value)) {
              return CmdEquipAetherDividePassiveSkillCsReq;
            }
            if (ProtoUtil.isEqual("CmdClearAetherDividePassiveSkillScRsp", value)) {
              return CmdClearAetherDividePassiveSkillScRsp;
            }
            if (ProtoUtil.isEqual("CmdClearAetherDividePassiveSkillCsReq", value)) {
              return CmdClearAetherDividePassiveSkillCsReq;
            }
            if (ProtoUtil.isEqual("CmdAetherDivideRefreshEndlessScNotify", value)) {
              return CmdAetherDivideRefreshEndlessScNotify;
            }
            break;
          }
          case 38: {
            if (ProtoUtil.isEqual("CmdAetherDivideFinishChallengeScNotify", value)) {
              return CmdAetherDivideFinishChallengeScNotify;
            }
            break;
          }
          case 39: {
            if (ProtoUtil.isEqual("CmdAetherDivideTakeChallengeRewardScRsp", value)) {
              return CmdAetherDivideTakeChallengeRewardScRsp;
            }
            if (ProtoUtil.isEqual("CmdAetherDivideTakeChallengeRewardCsReq", value)) {
              return CmdAetherDivideTakeChallengeRewardCsReq;
            }
            break;
          }
          case 40: {
            if (ProtoUtil.isEqual("CmdStartAetherDivideChallengeBattleScRsp", value)) {
              return CmdStartAetherDivideChallengeBattleScRsp;
            }
            if (ProtoUtil.isEqual("CmdStartAetherDivideChallengeBattleCsReq", value)) {
              return CmdStartAetherDivideChallengeBattleCsReq;
            }
            break;
          }
        }
        return null;
      }
    }
  }
}
