// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class GetSceneMapInfoCsReqOuterClass {
  /**
   * Protobuf type {@code GetSceneMapInfoCsReq}
   */
  public static final class GetSceneMapInfoCsReq extends ProtoMessage<GetSceneMapInfoCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 cur_map_entry_id = 8;</code>
     */
    private int curMapEntryId;

    /**
     * <code>optional uint32 map_entry_id = 11;</code>
     */
    private int mapEntryId;

    /**
     * <code>repeated uint32 floor_id_list = 1;</code>
     */
    private final RepeatedInt floorIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 entry_id_list = 5;</code>
     */
    private final RepeatedInt entryIdList = RepeatedInt.newEmptyInstance();

    private GetSceneMapInfoCsReq() {
    }

    /**
     * @return a new empty instance of {@code GetSceneMapInfoCsReq}
     */
    public static GetSceneMapInfoCsReq newInstance() {
      return new GetSceneMapInfoCsReq();
    }

    /**
     * <code>optional uint32 cur_map_entry_id = 8;</code>
     * @return whether the curMapEntryId field is set
     */
    public boolean hasCurMapEntryId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 cur_map_entry_id = 8;</code>
     * @return this
     */
    public GetSceneMapInfoCsReq clearCurMapEntryId() {
      bitField0_ &= ~0x00000001;
      curMapEntryId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_map_entry_id = 8;</code>
     * @return the curMapEntryId
     */
    public int getCurMapEntryId() {
      return curMapEntryId;
    }

    /**
     * <code>optional uint32 cur_map_entry_id = 8;</code>
     * @param value the curMapEntryId to set
     * @return this
     */
    public GetSceneMapInfoCsReq setCurMapEntryId(final int value) {
      bitField0_ |= 0x00000001;
      curMapEntryId = value;
      return this;
    }

    /**
     * <code>optional uint32 map_entry_id = 11;</code>
     * @return whether the mapEntryId field is set
     */
    public boolean hasMapEntryId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 map_entry_id = 11;</code>
     * @return this
     */
    public GetSceneMapInfoCsReq clearMapEntryId() {
      bitField0_ &= ~0x00000002;
      mapEntryId = 0;
      return this;
    }

    /**
     * <code>optional uint32 map_entry_id = 11;</code>
     * @return the mapEntryId
     */
    public int getMapEntryId() {
      return mapEntryId;
    }

    /**
     * <code>optional uint32 map_entry_id = 11;</code>
     * @param value the mapEntryId to set
     * @return this
     */
    public GetSceneMapInfoCsReq setMapEntryId(final int value) {
      bitField0_ |= 0x00000002;
      mapEntryId = value;
      return this;
    }

    /**
     * <code>repeated uint32 floor_id_list = 1;</code>
     * @return whether the floorIdList field is set
     */
    public boolean hasFloorIdList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 floor_id_list = 1;</code>
     * @return this
     */
    public GetSceneMapInfoCsReq clearFloorIdList() {
      bitField0_ &= ~0x00000004;
      floorIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 floor_id_list = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFloorIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getFloorIdList() {
      return floorIdList;
    }

    /**
     * <code>repeated uint32 floor_id_list = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableFloorIdList() {
      bitField0_ |= 0x00000004;
      return floorIdList;
    }

    /**
     * <code>repeated uint32 floor_id_list = 1;</code>
     * @param value the floorIdList to add
     * @return this
     */
    public GetSceneMapInfoCsReq addFloorIdList(final int value) {
      bitField0_ |= 0x00000004;
      floorIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 floor_id_list = 1;</code>
     * @param values the floorIdList to add
     * @return this
     */
    public GetSceneMapInfoCsReq addAllFloorIdList(final int... values) {
      bitField0_ |= 0x00000004;
      floorIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 entry_id_list = 5;</code>
     * @return whether the entryIdList field is set
     */
    public boolean hasEntryIdList() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 entry_id_list = 5;</code>
     * @return this
     */
    public GetSceneMapInfoCsReq clearEntryIdList() {
      bitField0_ &= ~0x00000008;
      entryIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 entry_id_list = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEntryIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getEntryIdList() {
      return entryIdList;
    }

    /**
     * <code>repeated uint32 entry_id_list = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableEntryIdList() {
      bitField0_ |= 0x00000008;
      return entryIdList;
    }

    /**
     * <code>repeated uint32 entry_id_list = 5;</code>
     * @param value the entryIdList to add
     * @return this
     */
    public GetSceneMapInfoCsReq addEntryIdList(final int value) {
      bitField0_ |= 0x00000008;
      entryIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 entry_id_list = 5;</code>
     * @param values the entryIdList to add
     * @return this
     */
    public GetSceneMapInfoCsReq addAllEntryIdList(final int... values) {
      bitField0_ |= 0x00000008;
      entryIdList.addAll(values);
      return this;
    }

    @Override
    public GetSceneMapInfoCsReq copyFrom(final GetSceneMapInfoCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        curMapEntryId = other.curMapEntryId;
        mapEntryId = other.mapEntryId;
        floorIdList.copyFrom(other.floorIdList);
        entryIdList.copyFrom(other.entryIdList);
      }
      return this;
    }

    @Override
    public GetSceneMapInfoCsReq mergeFrom(final GetSceneMapInfoCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCurMapEntryId()) {
        setCurMapEntryId(other.curMapEntryId);
      }
      if (other.hasMapEntryId()) {
        setMapEntryId(other.mapEntryId);
      }
      if (other.hasFloorIdList()) {
        getMutableFloorIdList().addAll(other.floorIdList);
      }
      if (other.hasEntryIdList()) {
        getMutableEntryIdList().addAll(other.entryIdList);
      }
      return this;
    }

    @Override
    public GetSceneMapInfoCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curMapEntryId = 0;
      mapEntryId = 0;
      floorIdList.clear();
      entryIdList.clear();
      return this;
    }

    @Override
    public GetSceneMapInfoCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      floorIdList.clear();
      entryIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetSceneMapInfoCsReq)) {
        return false;
      }
      GetSceneMapInfoCsReq other = (GetSceneMapInfoCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasCurMapEntryId() || curMapEntryId == other.curMapEntryId)
        && (!hasMapEntryId() || mapEntryId == other.mapEntryId)
        && (!hasFloorIdList() || floorIdList.equals(other.floorIdList))
        && (!hasEntryIdList() || entryIdList.equals(other.entryIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(curMapEntryId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(mapEntryId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < floorIdList.length(); i++) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(floorIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < entryIdList.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(entryIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curMapEntryId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(mapEntryId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * floorIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(floorIdList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * entryIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(entryIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetSceneMapInfoCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // curMapEntryId
            curMapEntryId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // mapEntryId
            mapEntryId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // floorIdList [packed=true]
            input.readPackedUInt32(floorIdList, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // entryIdList [packed=true]
            input.readPackedUInt32(entryIdList, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 8: {
            // floorIdList [packed=false]
            tag = input.readRepeatedUInt32(floorIdList, tag);
            bitField0_ |= 0x00000004;
            break;
          }
          case 40: {
            // entryIdList [packed=false]
            tag = input.readRepeatedUInt32(entryIdList, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.curMapEntryId, curMapEntryId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.mapEntryId, mapEntryId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.floorIdList, floorIdList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.entryIdList, entryIdList);
      }
      output.endObject();
    }

    @Override
    public GetSceneMapInfoCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 764919441:
          case 2115673898: {
            if (input.isAtField(FieldNames.curMapEntryId)) {
              if (!input.trySkipNullValue()) {
                curMapEntryId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1475203023:
          case 436670347: {
            if (input.isAtField(FieldNames.mapEntryId)) {
              if (!input.trySkipNullValue()) {
                mapEntryId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -953744507:
          case -1213115377: {
            if (input.isAtField(FieldNames.floorIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(floorIdList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1441102997:
          case -1413189003: {
            if (input.isAtField(FieldNames.entryIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(entryIdList);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetSceneMapInfoCsReq clone() {
      return new GetSceneMapInfoCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetSceneMapInfoCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetSceneMapInfoCsReq(), data).checkInitialized();
    }

    public static GetSceneMapInfoCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetSceneMapInfoCsReq(), input).checkInitialized();
    }

    public static GetSceneMapInfoCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetSceneMapInfoCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetSceneMapInfoCsReq messages
     */
    public static MessageFactory<GetSceneMapInfoCsReq> getFactory() {
      return GetSceneMapInfoCsReqFactory.INSTANCE;
    }

    private enum GetSceneMapInfoCsReqFactory implements MessageFactory<GetSceneMapInfoCsReq> {
      INSTANCE;

      @Override
      public GetSceneMapInfoCsReq create() {
        return GetSceneMapInfoCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName curMapEntryId = FieldName.forField("curMapEntryId", "cur_map_entry_id");

      static final FieldName mapEntryId = FieldName.forField("mapEntryId", "map_entry_id");

      static final FieldName floorIdList = FieldName.forField("floorIdList", "floor_id_list");

      static final FieldName entryIdList = FieldName.forField("entryIdList", "entry_id_list");
    }
  }
}
