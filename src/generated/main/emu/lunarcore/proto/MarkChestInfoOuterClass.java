// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class MarkChestInfoOuterClass {
  /**
   * Protobuf type {@code MarkChestInfo}
   */
  public static final class MarkChestInfo extends ProtoMessage<MarkChestInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 group_id = 3;</code>
     */
    private int groupId;

    /**
     * <code>optional uint32 config_id = 5;</code>
     */
    private int configId;

    /**
     * <code>optional uint32 plane_id = 10;</code>
     */
    private int planeId;

    /**
     * <code>optional uint32 floor_id = 15;</code>
     */
    private int floorId;

    private MarkChestInfo() {
    }

    /**
     * @return a new empty instance of {@code MarkChestInfo}
     */
    public static MarkChestInfo newInstance() {
      return new MarkChestInfo();
    }

    /**
     * <code>optional uint32 group_id = 3;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 group_id = 3;</code>
     * @return this
     */
    public MarkChestInfo clearGroupId() {
      bitField0_ &= ~0x00000001;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 3;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 group_id = 3;</code>
     * @param value the groupId to set
     * @return this
     */
    public MarkChestInfo setGroupId(final int value) {
      bitField0_ |= 0x00000001;
      groupId = value;
      return this;
    }

    /**
     * <code>optional uint32 config_id = 5;</code>
     * @return whether the configId field is set
     */
    public boolean hasConfigId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 config_id = 5;</code>
     * @return this
     */
    public MarkChestInfo clearConfigId() {
      bitField0_ &= ~0x00000002;
      configId = 0;
      return this;
    }

    /**
     * <code>optional uint32 config_id = 5;</code>
     * @return the configId
     */
    public int getConfigId() {
      return configId;
    }

    /**
     * <code>optional uint32 config_id = 5;</code>
     * @param value the configId to set
     * @return this
     */
    public MarkChestInfo setConfigId(final int value) {
      bitField0_ |= 0x00000002;
      configId = value;
      return this;
    }

    /**
     * <code>optional uint32 plane_id = 10;</code>
     * @return whether the planeId field is set
     */
    public boolean hasPlaneId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 plane_id = 10;</code>
     * @return this
     */
    public MarkChestInfo clearPlaneId() {
      bitField0_ &= ~0x00000004;
      planeId = 0;
      return this;
    }

    /**
     * <code>optional uint32 plane_id = 10;</code>
     * @return the planeId
     */
    public int getPlaneId() {
      return planeId;
    }

    /**
     * <code>optional uint32 plane_id = 10;</code>
     * @param value the planeId to set
     * @return this
     */
    public MarkChestInfo setPlaneId(final int value) {
      bitField0_ |= 0x00000004;
      planeId = value;
      return this;
    }

    /**
     * <code>optional uint32 floor_id = 15;</code>
     * @return whether the floorId field is set
     */
    public boolean hasFloorId() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 floor_id = 15;</code>
     * @return this
     */
    public MarkChestInfo clearFloorId() {
      bitField0_ &= ~0x00000008;
      floorId = 0;
      return this;
    }

    /**
     * <code>optional uint32 floor_id = 15;</code>
     * @return the floorId
     */
    public int getFloorId() {
      return floorId;
    }

    /**
     * <code>optional uint32 floor_id = 15;</code>
     * @param value the floorId to set
     * @return this
     */
    public MarkChestInfo setFloorId(final int value) {
      bitField0_ |= 0x00000008;
      floorId = value;
      return this;
    }

    @Override
    public MarkChestInfo copyFrom(final MarkChestInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        groupId = other.groupId;
        configId = other.configId;
        planeId = other.planeId;
        floorId = other.floorId;
      }
      return this;
    }

    @Override
    public MarkChestInfo mergeFrom(final MarkChestInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasConfigId()) {
        setConfigId(other.configId);
      }
      if (other.hasPlaneId()) {
        setPlaneId(other.planeId);
      }
      if (other.hasFloorId()) {
        setFloorId(other.floorId);
      }
      return this;
    }

    @Override
    public MarkChestInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      groupId = 0;
      configId = 0;
      planeId = 0;
      floorId = 0;
      return this;
    }

    @Override
    public MarkChestInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MarkChestInfo)) {
        return false;
      }
      MarkChestInfo other = (MarkChestInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasConfigId() || configId == other.configId)
        && (!hasPlaneId() || planeId == other.planeId)
        && (!hasFloorId() || floorId == other.floorId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(configId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(planeId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(floorId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(configId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(planeId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(floorId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MarkChestInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // configId
            configId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // planeId
            planeId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // floorId
            floorId = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.configId, configId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.planeId, planeId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.floorId, floorId);
      }
      output.endObject();
    }

    @Override
    public MarkChestInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -580140035:
          case -804450504: {
            if (input.isAtField(FieldNames.configId)) {
              if (!input.trySkipNullValue()) {
                configId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -493896553:
          case 1869097438: {
            if (input.isAtField(FieldNames.planeId)) {
              if (!input.trySkipNullValue()) {
                planeId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -766027193:
          case 2022982190: {
            if (input.isAtField(FieldNames.floorId)) {
              if (!input.trySkipNullValue()) {
                floorId = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MarkChestInfo clone() {
      return new MarkChestInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MarkChestInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MarkChestInfo(), data).checkInitialized();
    }

    public static MarkChestInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MarkChestInfo(), input).checkInitialized();
    }

    public static MarkChestInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MarkChestInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating MarkChestInfo messages
     */
    public static MessageFactory<MarkChestInfo> getFactory() {
      return MarkChestInfoFactory.INSTANCE;
    }

    private enum MarkChestInfoFactory implements MessageFactory<MarkChestInfo> {
      INSTANCE;

      @Override
      public MarkChestInfo create() {
        return MarkChestInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName groupId = FieldName.forField("groupId", "group_id");

      static final FieldName configId = FieldName.forField("configId", "config_id");

      static final FieldName planeId = FieldName.forField("planeId", "plane_id");

      static final FieldName floorId = FieldName.forField("floorId", "floor_id");
    }
  }
}
