// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class GetAetherDivideChallengeInfoScRspOuterClass {
  /**
   * Protobuf type {@code GetAetherDivideChallengeInfoScRsp}
   */
  public static final class GetAetherDivideChallengeInfoScRsp extends ProtoMessage<GetAetherDivideChallengeInfoScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 1;</code>
     */
    private int retcode;

    /**
     * <code>optional uint32 PCNNMJBJIOC = 7;</code>
     */
    private int pCNNMJBJIOC;

    /**
     * <code>repeated uint32 GKHJKFCCCGP = 12;</code>
     */
    private final RepeatedInt gKHJKFCCCGP = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 BFDIPGBLMMO = 15;</code>
     */
    private final RepeatedInt bFDIPGBLMMO = RepeatedInt.newEmptyInstance();

    private GetAetherDivideChallengeInfoScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetAetherDivideChallengeInfoScRsp}
     */
    public static GetAetherDivideChallengeInfoScRsp newInstance() {
      return new GetAetherDivideChallengeInfoScRsp();
    }

    /**
     * <code>optional uint32 retcode = 1;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 1;</code>
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 1;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 1;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional uint32 PCNNMJBJIOC = 7;</code>
     * @return whether the pCNNMJBJIOC field is set
     */
    public boolean hasPCNNMJBJIOC() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 PCNNMJBJIOC = 7;</code>
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp clearPCNNMJBJIOC() {
      bitField0_ &= ~0x00000002;
      pCNNMJBJIOC = 0;
      return this;
    }

    /**
     * <code>optional uint32 PCNNMJBJIOC = 7;</code>
     * @return the pCNNMJBJIOC
     */
    public int getPCNNMJBJIOC() {
      return pCNNMJBJIOC;
    }

    /**
     * <code>optional uint32 PCNNMJBJIOC = 7;</code>
     * @param value the pCNNMJBJIOC to set
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp setPCNNMJBJIOC(final int value) {
      bitField0_ |= 0x00000002;
      pCNNMJBJIOC = value;
      return this;
    }

    /**
     * <code>repeated uint32 GKHJKFCCCGP = 12;</code>
     * @return whether the gKHJKFCCCGP field is set
     */
    public boolean hasGKHJKFCCCGP() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 GKHJKFCCCGP = 12;</code>
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp clearGKHJKFCCCGP() {
      bitField0_ &= ~0x00000004;
      gKHJKFCCCGP.clear();
      return this;
    }

    /**
     * <code>repeated uint32 GKHJKFCCCGP = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableGKHJKFCCCGP()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getGKHJKFCCCGP() {
      return gKHJKFCCCGP;
    }

    /**
     * <code>repeated uint32 GKHJKFCCCGP = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableGKHJKFCCCGP() {
      bitField0_ |= 0x00000004;
      return gKHJKFCCCGP;
    }

    /**
     * <code>repeated uint32 GKHJKFCCCGP = 12;</code>
     * @param value the gKHJKFCCCGP to add
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp addGKHJKFCCCGP(final int value) {
      bitField0_ |= 0x00000004;
      gKHJKFCCCGP.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 GKHJKFCCCGP = 12;</code>
     * @param values the gKHJKFCCCGP to add
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp addAllGKHJKFCCCGP(final int... values) {
      bitField0_ |= 0x00000004;
      gKHJKFCCCGP.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 BFDIPGBLMMO = 15;</code>
     * @return whether the bFDIPGBLMMO field is set
     */
    public boolean hasBFDIPGBLMMO() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 BFDIPGBLMMO = 15;</code>
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp clearBFDIPGBLMMO() {
      bitField0_ &= ~0x00000008;
      bFDIPGBLMMO.clear();
      return this;
    }

    /**
     * <code>repeated uint32 BFDIPGBLMMO = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBFDIPGBLMMO()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getBFDIPGBLMMO() {
      return bFDIPGBLMMO;
    }

    /**
     * <code>repeated uint32 BFDIPGBLMMO = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableBFDIPGBLMMO() {
      bitField0_ |= 0x00000008;
      return bFDIPGBLMMO;
    }

    /**
     * <code>repeated uint32 BFDIPGBLMMO = 15;</code>
     * @param value the bFDIPGBLMMO to add
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp addBFDIPGBLMMO(final int value) {
      bitField0_ |= 0x00000008;
      bFDIPGBLMMO.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 BFDIPGBLMMO = 15;</code>
     * @param values the bFDIPGBLMMO to add
     * @return this
     */
    public GetAetherDivideChallengeInfoScRsp addAllBFDIPGBLMMO(final int... values) {
      bitField0_ |= 0x00000008;
      bFDIPGBLMMO.addAll(values);
      return this;
    }

    @Override
    public GetAetherDivideChallengeInfoScRsp copyFrom(
        final GetAetherDivideChallengeInfoScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        pCNNMJBJIOC = other.pCNNMJBJIOC;
        gKHJKFCCCGP.copyFrom(other.gKHJKFCCCGP);
        bFDIPGBLMMO.copyFrom(other.bFDIPGBLMMO);
      }
      return this;
    }

    @Override
    public GetAetherDivideChallengeInfoScRsp mergeFrom(
        final GetAetherDivideChallengeInfoScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasPCNNMJBJIOC()) {
        setPCNNMJBJIOC(other.pCNNMJBJIOC);
      }
      if (other.hasGKHJKFCCCGP()) {
        getMutableGKHJKFCCCGP().addAll(other.gKHJKFCCCGP);
      }
      if (other.hasBFDIPGBLMMO()) {
        getMutableBFDIPGBLMMO().addAll(other.bFDIPGBLMMO);
      }
      return this;
    }

    @Override
    public GetAetherDivideChallengeInfoScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      pCNNMJBJIOC = 0;
      gKHJKFCCCGP.clear();
      bFDIPGBLMMO.clear();
      return this;
    }

    @Override
    public GetAetherDivideChallengeInfoScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      gKHJKFCCCGP.clear();
      bFDIPGBLMMO.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetAetherDivideChallengeInfoScRsp)) {
        return false;
      }
      GetAetherDivideChallengeInfoScRsp other = (GetAetherDivideChallengeInfoScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasPCNNMJBJIOC() || pCNNMJBJIOC == other.pCNNMJBJIOC)
        && (!hasGKHJKFCCCGP() || gKHJKFCCCGP.equals(other.gKHJKFCCCGP))
        && (!hasBFDIPGBLMMO() || bFDIPGBLMMO.equals(other.bFDIPGBLMMO));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(pCNNMJBJIOC);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < gKHJKFCCCGP.length(); i++) {
          output.writeRawByte((byte) 96);
          output.writeUInt32NoTag(gKHJKFCCCGP.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < bFDIPGBLMMO.length(); i++) {
          output.writeRawByte((byte) 120);
          output.writeUInt32NoTag(bFDIPGBLMMO.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(pCNNMJBJIOC);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * gKHJKFCCCGP.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(gKHJKFCCCGP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * bFDIPGBLMMO.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(bFDIPGBLMMO);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetAetherDivideChallengeInfoScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // pCNNMJBJIOC
            pCNNMJBJIOC = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // gKHJKFCCCGP [packed=true]
            input.readPackedUInt32(gKHJKFCCCGP, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // bFDIPGBLMMO [packed=true]
            input.readPackedUInt32(bFDIPGBLMMO, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 96: {
            // gKHJKFCCCGP [packed=false]
            tag = input.readRepeatedUInt32(gKHJKFCCCGP, tag);
            bitField0_ |= 0x00000004;
            break;
          }
          case 120: {
            // bFDIPGBLMMO [packed=false]
            tag = input.readRepeatedUInt32(bFDIPGBLMMO, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.pCNNMJBJIOC, pCNNMJBJIOC);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.gKHJKFCCCGP, gKHJKFCCCGP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.bFDIPGBLMMO, bFDIPGBLMMO);
      }
      output.endObject();
    }

    @Override
    public GetAetherDivideChallengeInfoScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1250872123: {
            if (input.isAtField(FieldNames.pCNNMJBJIOC)) {
              if (!input.trySkipNullValue()) {
                pCNNMJBJIOC = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1845616661: {
            if (input.isAtField(FieldNames.gKHJKFCCCGP)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(gKHJKFCCCGP);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 894347941: {
            if (input.isAtField(FieldNames.bFDIPGBLMMO)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(bFDIPGBLMMO);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetAetherDivideChallengeInfoScRsp clone() {
      return new GetAetherDivideChallengeInfoScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetAetherDivideChallengeInfoScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetAetherDivideChallengeInfoScRsp(), data).checkInitialized();
    }

    public static GetAetherDivideChallengeInfoScRsp parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new GetAetherDivideChallengeInfoScRsp(), input).checkInitialized();
    }

    public static GetAetherDivideChallengeInfoScRsp parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new GetAetherDivideChallengeInfoScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetAetherDivideChallengeInfoScRsp messages
     */
    public static MessageFactory<GetAetherDivideChallengeInfoScRsp> getFactory() {
      return GetAetherDivideChallengeInfoScRspFactory.INSTANCE;
    }

    private enum GetAetherDivideChallengeInfoScRspFactory implements MessageFactory<GetAetherDivideChallengeInfoScRsp> {
      INSTANCE;

      @Override
      public GetAetherDivideChallengeInfoScRsp create() {
        return GetAetherDivideChallengeInfoScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName pCNNMJBJIOC = FieldName.forField("PCNNMJBJIOC");

      static final FieldName gKHJKFCCCGP = FieldName.forField("GKHJKFCCCGP");

      static final FieldName bFDIPGBLMMO = FieldName.forField("BFDIPGBLMMO");
    }
  }
}
