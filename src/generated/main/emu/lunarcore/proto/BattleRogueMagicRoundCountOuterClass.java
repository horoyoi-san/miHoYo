// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class BattleRogueMagicRoundCountOuterClass {
  /**
   * Protobuf type {@code BattleRogueMagicRoundCount}
   */
  public static final class BattleRogueMagicRoundCount extends ProtoMessage<BattleRogueMagicRoundCount> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 jnejloobmad = 1;</code>
     */
    private int jnejloobmad;

    /**
     * <code>optional uint32 jfaidmkbmof = 2;</code>
     */
    private int jfaidmkbmof;

    private BattleRogueMagicRoundCount() {
    }

    /**
     * @return a new empty instance of {@code BattleRogueMagicRoundCount}
     */
    public static BattleRogueMagicRoundCount newInstance() {
      return new BattleRogueMagicRoundCount();
    }

    /**
     * <code>optional uint32 jnejloobmad = 1;</code>
     * @return whether the jnejloobmad field is set
     */
    public boolean hasJnejloobmad() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 jnejloobmad = 1;</code>
     * @return this
     */
    public BattleRogueMagicRoundCount clearJnejloobmad() {
      bitField0_ &= ~0x00000001;
      jnejloobmad = 0;
      return this;
    }

    /**
     * <code>optional uint32 jnejloobmad = 1;</code>
     * @return the jnejloobmad
     */
    public int getJnejloobmad() {
      return jnejloobmad;
    }

    /**
     * <code>optional uint32 jnejloobmad = 1;</code>
     * @param value the jnejloobmad to set
     * @return this
     */
    public BattleRogueMagicRoundCount setJnejloobmad(final int value) {
      bitField0_ |= 0x00000001;
      jnejloobmad = value;
      return this;
    }

    /**
     * <code>optional uint32 jfaidmkbmof = 2;</code>
     * @return whether the jfaidmkbmof field is set
     */
    public boolean hasJfaidmkbmof() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 jfaidmkbmof = 2;</code>
     * @return this
     */
    public BattleRogueMagicRoundCount clearJfaidmkbmof() {
      bitField0_ &= ~0x00000002;
      jfaidmkbmof = 0;
      return this;
    }

    /**
     * <code>optional uint32 jfaidmkbmof = 2;</code>
     * @return the jfaidmkbmof
     */
    public int getJfaidmkbmof() {
      return jfaidmkbmof;
    }

    /**
     * <code>optional uint32 jfaidmkbmof = 2;</code>
     * @param value the jfaidmkbmof to set
     * @return this
     */
    public BattleRogueMagicRoundCount setJfaidmkbmof(final int value) {
      bitField0_ |= 0x00000002;
      jfaidmkbmof = value;
      return this;
    }

    @Override
    public BattleRogueMagicRoundCount copyFrom(final BattleRogueMagicRoundCount other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        jnejloobmad = other.jnejloobmad;
        jfaidmkbmof = other.jfaidmkbmof;
      }
      return this;
    }

    @Override
    public BattleRogueMagicRoundCount mergeFrom(final BattleRogueMagicRoundCount other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasJnejloobmad()) {
        setJnejloobmad(other.jnejloobmad);
      }
      if (other.hasJfaidmkbmof()) {
        setJfaidmkbmof(other.jfaidmkbmof);
      }
      return this;
    }

    @Override
    public BattleRogueMagicRoundCount clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      jnejloobmad = 0;
      jfaidmkbmof = 0;
      return this;
    }

    @Override
    public BattleRogueMagicRoundCount clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof BattleRogueMagicRoundCount)) {
        return false;
      }
      BattleRogueMagicRoundCount other = (BattleRogueMagicRoundCount) o;
      return bitField0_ == other.bitField0_
        && (!hasJnejloobmad() || jnejloobmad == other.jnejloobmad)
        && (!hasJfaidmkbmof() || jfaidmkbmof == other.jfaidmkbmof);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(jnejloobmad);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(jfaidmkbmof);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(jnejloobmad);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(jfaidmkbmof);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public BattleRogueMagicRoundCount mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // jnejloobmad
            jnejloobmad = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // jfaidmkbmof
            jfaidmkbmof = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.jnejloobmad, jnejloobmad);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.jfaidmkbmof, jfaidmkbmof);
      }
      output.endObject();
    }

    @Override
    public BattleRogueMagicRoundCount mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 894586353: {
            if (input.isAtField(FieldNames.jnejloobmad)) {
              if (!input.trySkipNullValue()) {
                jnejloobmad = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 792720512: {
            if (input.isAtField(FieldNames.jfaidmkbmof)) {
              if (!input.trySkipNullValue()) {
                jfaidmkbmof = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public BattleRogueMagicRoundCount clone() {
      return new BattleRogueMagicRoundCount().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static BattleRogueMagicRoundCount parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicRoundCount(), data).checkInitialized();
    }

    public static BattleRogueMagicRoundCount parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicRoundCount(), input).checkInitialized();
    }

    public static BattleRogueMagicRoundCount parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicRoundCount(), input).checkInitialized();
    }

    /**
     * @return factory for creating BattleRogueMagicRoundCount messages
     */
    public static MessageFactory<BattleRogueMagicRoundCount> getFactory() {
      return BattleRogueMagicRoundCountFactory.INSTANCE;
    }

    private enum BattleRogueMagicRoundCountFactory implements MessageFactory<BattleRogueMagicRoundCount> {
      INSTANCE;

      @Override
      public BattleRogueMagicRoundCount create() {
        return BattleRogueMagicRoundCount.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName jnejloobmad = FieldName.forField("jnejloobmad");

      static final FieldName jfaidmkbmof = FieldName.forField("jfaidmkbmof");
    }
  }
}
