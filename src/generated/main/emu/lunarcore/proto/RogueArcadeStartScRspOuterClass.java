// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueArcadeStartScRspOuterClass {
  /**
   * Protobuf type {@code RogueArcadeStartScRsp}
   */
  public static final class RogueArcadeStartScRsp extends ProtoMessage<RogueArcadeStartScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 room_id = 5;</code>
     */
    private int roomId;

    /**
     * <code>optional uint32 retcode = 9;</code>
     */
    private int retcode;

    /**
     * <code>optional .ABFBLEKMNME rogue_tourn_cur_scene_info = 2;</code>
     */
    private final ABFBLEKMNMEOuterClass.ABFBLEKMNME rogueTournCurSceneInfo = ABFBLEKMNMEOuterClass.ABFBLEKMNME.newInstance();

    private RogueArcadeStartScRsp() {
    }

    /**
     * @return a new empty instance of {@code RogueArcadeStartScRsp}
     */
    public static RogueArcadeStartScRsp newInstance() {
      return new RogueArcadeStartScRsp();
    }

    /**
     * <code>optional uint32 room_id = 5;</code>
     * @return whether the roomId field is set
     */
    public boolean hasRoomId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 room_id = 5;</code>
     * @return this
     */
    public RogueArcadeStartScRsp clearRoomId() {
      bitField0_ &= ~0x00000001;
      roomId = 0;
      return this;
    }

    /**
     * <code>optional uint32 room_id = 5;</code>
     * @return the roomId
     */
    public int getRoomId() {
      return roomId;
    }

    /**
     * <code>optional uint32 room_id = 5;</code>
     * @param value the roomId to set
     * @return this
     */
    public RogueArcadeStartScRsp setRoomId(final int value) {
      bitField0_ |= 0x00000001;
      roomId = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 9;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 retcode = 9;</code>
     * @return this
     */
    public RogueArcadeStartScRsp clearRetcode() {
      bitField0_ &= ~0x00000002;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 9;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 9;</code>
     * @param value the retcode to set
     * @return this
     */
    public RogueArcadeStartScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000002;
      retcode = value;
      return this;
    }

    /**
     * <code>optional .ABFBLEKMNME rogue_tourn_cur_scene_info = 2;</code>
     * @return whether the rogueTournCurSceneInfo field is set
     */
    public boolean hasRogueTournCurSceneInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ABFBLEKMNME rogue_tourn_cur_scene_info = 2;</code>
     * @return this
     */
    public RogueArcadeStartScRsp clearRogueTournCurSceneInfo() {
      bitField0_ &= ~0x00000004;
      rogueTournCurSceneInfo.clear();
      return this;
    }

    /**
     * <code>optional .ABFBLEKMNME rogue_tourn_cur_scene_info = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueTournCurSceneInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ABFBLEKMNMEOuterClass.ABFBLEKMNME getRogueTournCurSceneInfo() {
      return rogueTournCurSceneInfo;
    }

    /**
     * <code>optional .ABFBLEKMNME rogue_tourn_cur_scene_info = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ABFBLEKMNMEOuterClass.ABFBLEKMNME getMutableRogueTournCurSceneInfo() {
      bitField0_ |= 0x00000004;
      return rogueTournCurSceneInfo;
    }

    /**
     * <code>optional .ABFBLEKMNME rogue_tourn_cur_scene_info = 2;</code>
     * @param value the rogueTournCurSceneInfo to set
     * @return this
     */
    public RogueArcadeStartScRsp setRogueTournCurSceneInfo(
        final ABFBLEKMNMEOuterClass.ABFBLEKMNME value) {
      bitField0_ |= 0x00000004;
      rogueTournCurSceneInfo.copyFrom(value);
      return this;
    }

    @Override
    public RogueArcadeStartScRsp copyFrom(final RogueArcadeStartScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        roomId = other.roomId;
        retcode = other.retcode;
        rogueTournCurSceneInfo.copyFrom(other.rogueTournCurSceneInfo);
      }
      return this;
    }

    @Override
    public RogueArcadeStartScRsp mergeFrom(final RogueArcadeStartScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRoomId()) {
        setRoomId(other.roomId);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasRogueTournCurSceneInfo()) {
        getMutableRogueTournCurSceneInfo().mergeFrom(other.rogueTournCurSceneInfo);
      }
      return this;
    }

    @Override
    public RogueArcadeStartScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      roomId = 0;
      retcode = 0;
      rogueTournCurSceneInfo.clear();
      return this;
    }

    @Override
    public RogueArcadeStartScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rogueTournCurSceneInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueArcadeStartScRsp)) {
        return false;
      }
      RogueArcadeStartScRsp other = (RogueArcadeStartScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRoomId() || roomId == other.roomId)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasRogueTournCurSceneInfo() || rogueTournCurSceneInfo.equals(other.rogueTournCurSceneInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(roomId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 18);
        output.writeMessageNoTag(rogueTournCurSceneInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(roomId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rogueTournCurSceneInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueArcadeStartScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // roomId
            roomId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // rogueTournCurSceneInfo
            input.readMessage(rogueTournCurSceneInfo);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.roomId, roomId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.rogueTournCurSceneInfo, rogueTournCurSceneInfo);
      }
      output.endObject();
    }

    @Override
    public RogueArcadeStartScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -925319338:
          case 1379892991: {
            if (input.isAtField(FieldNames.roomId)) {
              if (!input.trySkipNullValue()) {
                roomId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1006052982:
          case -557215890: {
            if (input.isAtField(FieldNames.rogueTournCurSceneInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rogueTournCurSceneInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueArcadeStartScRsp clone() {
      return new RogueArcadeStartScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueArcadeStartScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueArcadeStartScRsp(), data).checkInitialized();
    }

    public static RogueArcadeStartScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueArcadeStartScRsp(), input).checkInitialized();
    }

    public static RogueArcadeStartScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueArcadeStartScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueArcadeStartScRsp messages
     */
    public static MessageFactory<RogueArcadeStartScRsp> getFactory() {
      return RogueArcadeStartScRspFactory.INSTANCE;
    }

    private enum RogueArcadeStartScRspFactory implements MessageFactory<RogueArcadeStartScRsp> {
      INSTANCE;

      @Override
      public RogueArcadeStartScRsp create() {
        return RogueArcadeStartScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName roomId = FieldName.forField("roomId", "room_id");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName rogueTournCurSceneInfo = FieldName.forField("rogueTournCurSceneInfo", "rogue_tourn_cur_scene_info");
    }
  }
}
