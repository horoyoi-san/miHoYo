// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import us.hebi.quickbuf.ProtoEnum;
import us.hebi.quickbuf.ProtoUtil;

public final class KickTypeOuterClass {
  /**
   * Protobuf enum {@code KickType}
   */
  public enum KickType implements ProtoEnum<KickType> {
    /**
     * <code>KICK_SQUEEZED = 0;</code>
     */
    KICK_SQUEEZED("KICK_SQUEEZED", 0),

    /**
     * <code>KICK_BLACK = 1;</code>
     */
    KICK_BLACK("KICK_BLACK", 1),

    /**
     * <code>KICK_CHANGE_PWD = 2;</code>
     */
    KICK_CHANGE_PWD("KICK_CHANGE_PWD", 2),

    /**
     * <code>KICK_LOGIN_WHITE_TIMEOUT = 3;</code>
     */
    KICK_LOGIN_WHITE_TIMEOUT("KICK_LOGIN_WHITE_TIMEOUT", 3),

    /**
     * <code>KICK_ACE_ANTI_CHEATER = 4;</code>
     */
    KICK_ACE_ANTI_CHEATER("KICK_ACE_ANTI_CHEATER", 4),

    /**
     * <code>KICK_BY_GM = 5;</code>
     */
    KICK_BY_GM("KICK_BY_GM", 5);

    /**
     * <code>KICK_SQUEEZED = 0;</code>
     */
    public static final int KICK_SQUEEZED_VALUE = 0;

    /**
     * <code>KICK_BLACK = 1;</code>
     */
    public static final int KICK_BLACK_VALUE = 1;

    /**
     * <code>KICK_CHANGE_PWD = 2;</code>
     */
    public static final int KICK_CHANGE_PWD_VALUE = 2;

    /**
     * <code>KICK_LOGIN_WHITE_TIMEOUT = 3;</code>
     */
    public static final int KICK_LOGIN_WHITE_TIMEOUT_VALUE = 3;

    /**
     * <code>KICK_ACE_ANTI_CHEATER = 4;</code>
     */
    public static final int KICK_ACE_ANTI_CHEATER_VALUE = 4;

    /**
     * <code>KICK_BY_GM = 5;</code>
     */
    public static final int KICK_BY_GM_VALUE = 5;

    private final String name;

    private final int number;

    private KickType(String name, int number) {
      this.name = name;
      this.number = number;
    }

    /**
     * @return the string representation of enum entry
     */
    @Override
    public String getName() {
      return name;
    }

    /**
     * @return the numeric wire value of this enum entry
     */
    @Override
    public int getNumber() {
      return number;
    }

    /**
     * @return a converter that maps between this enum's numeric and text representations
     */
    public static ProtoEnum.EnumConverter<KickType> converter() {
      return KickTypeConverter.INSTANCE;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value, or null if unknown.
     */
    public static KickType forNumber(int value) {
      return KickTypeConverter.INSTANCE.forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @param other Fallback value in case the value is not known.
     * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
     */
    public static KickType forNumberOr(int number, KickType other) {
      KickType value = forNumber(number);
      return value == null ? other : value;
    }

    enum KickTypeConverter implements ProtoEnum.EnumConverter<KickType> {
      INSTANCE;

      private static final KickType[] lookup = new KickType[6];

      static {
        lookup[0] = KICK_SQUEEZED;
        lookup[1] = KICK_BLACK;
        lookup[2] = KICK_CHANGE_PWD;
        lookup[3] = KICK_LOGIN_WHITE_TIMEOUT;
        lookup[4] = KICK_ACE_ANTI_CHEATER;
        lookup[5] = KICK_BY_GM;
      }

      @Override
      public final KickType forNumber(final int value) {
        if (value >= 0 && value < lookup.length) {
          return lookup[value];
        }
        return null;
      }

      @Override
      public final KickType forName(final CharSequence value) {
        switch (value.length()) {
          case 10: {
            if (ProtoUtil.isEqual("KICK_BLACK", value)) {
              return KICK_BLACK;
            }
            if (ProtoUtil.isEqual("KICK_BY_GM", value)) {
              return KICK_BY_GM;
            }
            break;
          }
          case 13: {
            if (ProtoUtil.isEqual("KICK_SQUEEZED", value)) {
              return KICK_SQUEEZED;
            }
            break;
          }
          case 15: {
            if (ProtoUtil.isEqual("KICK_CHANGE_PWD", value)) {
              return KICK_CHANGE_PWD;
            }
            break;
          }
          case 21: {
            if (ProtoUtil.isEqual("KICK_ACE_ANTI_CHEATER", value)) {
              return KICK_ACE_ANTI_CHEATER;
            }
            break;
          }
          case 24: {
            if (ProtoUtil.isEqual("KICK_LOGIN_WHITE_TIMEOUT", value)) {
              return KICK_LOGIN_WHITE_TIMEOUT;
            }
            break;
          }
        }
        return null;
      }
    }
  }
}
