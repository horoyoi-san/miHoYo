// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import us.hebi.quickbuf.ProtoEnum;
import us.hebi.quickbuf.ProtoUtil;

public final class CmdMarkChestTypeOuterClass {
  /**
   * Protobuf enum {@code CmdMarkChestType}
   */
  public enum CmdMarkChestType implements ProtoEnum<CmdMarkChestType> {
    /**
     * <code>CmdMarkChestTypeNone = 0;</code>
     */
    CmdMarkChestTypeNone("CmdMarkChestTypeNone", 0),

    /**
     * <code>CmdUpdateMarkChestCsReq = 8187;</code>
     */
    CmdUpdateMarkChestCsReq("CmdUpdateMarkChestCsReq", 8187),

    /**
     * <code>CmdMarkChestChangedScNotify = 8197;</code>
     */
    CmdMarkChestChangedScNotify("CmdMarkChestChangedScNotify", 8197),

    /**
     * <code>CmdGetMarkChestCsReq = 8200;</code>
     */
    CmdGetMarkChestCsReq("CmdGetMarkChestCsReq", 8200),

    /**
     * <code>CmdUpdateMarkChestScRsp = 8183;</code>
     */
    CmdUpdateMarkChestScRsp("CmdUpdateMarkChestScRsp", 8183),

    /**
     * <code>CmdGetMarkChestScRsp = 8195;</code>
     */
    CmdGetMarkChestScRsp("CmdGetMarkChestScRsp", 8195);

    /**
     * <code>CmdMarkChestTypeNone = 0;</code>
     */
    public static final int CmdMarkChestTypeNone_VALUE = 0;

    /**
     * <code>CmdUpdateMarkChestCsReq = 8187;</code>
     */
    public static final int CmdUpdateMarkChestCsReq_VALUE = 8187;

    /**
     * <code>CmdMarkChestChangedScNotify = 8197;</code>
     */
    public static final int CmdMarkChestChangedScNotify_VALUE = 8197;

    /**
     * <code>CmdGetMarkChestCsReq = 8200;</code>
     */
    public static final int CmdGetMarkChestCsReq_VALUE = 8200;

    /**
     * <code>CmdUpdateMarkChestScRsp = 8183;</code>
     */
    public static final int CmdUpdateMarkChestScRsp_VALUE = 8183;

    /**
     * <code>CmdGetMarkChestScRsp = 8195;</code>
     */
    public static final int CmdGetMarkChestScRsp_VALUE = 8195;

    private final String name;

    private final int number;

    private CmdMarkChestType(String name, int number) {
      this.name = name;
      this.number = number;
    }

    /**
     * @return the string representation of enum entry
     */
    @Override
    public String getName() {
      return name;
    }

    /**
     * @return the numeric wire value of this enum entry
     */
    @Override
    public int getNumber() {
      return number;
    }

    /**
     * @return a converter that maps between this enum's numeric and text representations
     */
    public static ProtoEnum.EnumConverter<CmdMarkChestType> converter() {
      return CmdMarkChestTypeConverter.INSTANCE;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value, or null if unknown.
     */
    public static CmdMarkChestType forNumber(int value) {
      return CmdMarkChestTypeConverter.INSTANCE.forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @param other Fallback value in case the value is not known.
     * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
     */
    public static CmdMarkChestType forNumberOr(int number, CmdMarkChestType other) {
      CmdMarkChestType value = forNumber(number);
      return value == null ? other : value;
    }

    enum CmdMarkChestTypeConverter implements ProtoEnum.EnumConverter<CmdMarkChestType> {
      INSTANCE;

      @Override
      public final CmdMarkChestType forNumber(final int value) {
        switch(value) {
          case 0: return CmdMarkChestTypeNone;
          case 8187: return CmdUpdateMarkChestCsReq;
          case 8197: return CmdMarkChestChangedScNotify;
          case 8200: return CmdGetMarkChestCsReq;
          case 8183: return CmdUpdateMarkChestScRsp;
          case 8195: return CmdGetMarkChestScRsp;
          default: return null;
        }
      }

      @Override
      public final CmdMarkChestType forName(final CharSequence value) {
        if (value.length() == 20) {
          if (ProtoUtil.isEqual("CmdMarkChestTypeNone", value)) {
            return CmdMarkChestTypeNone;
          }
          if (ProtoUtil.isEqual("CmdGetMarkChestCsReq", value)) {
            return CmdGetMarkChestCsReq;
          }
          if (ProtoUtil.isEqual("CmdGetMarkChestScRsp", value)) {
            return CmdGetMarkChestScRsp;
          }
        }
        if (value.length() == 23) {
          if (ProtoUtil.isEqual("CmdUpdateMarkChestCsReq", value)) {
            return CmdUpdateMarkChestCsReq;
          }
          if (ProtoUtil.isEqual("CmdUpdateMarkChestScRsp", value)) {
            return CmdUpdateMarkChestScRsp;
          }
        }
        if (value.length() == 27) {
          if (ProtoUtil.isEqual("CmdMarkChestChangedScNotify", value)) {
            return CmdMarkChestChangedScNotify;
          }
        }
        return null;
      }
    }
  }
}
