// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class GmTalkCsReqOuterClass {
  /**
   * Protobuf type {@code GmTalkCsReq}
   */
  public static final class GmTalkCsReq extends ProtoMessage<GmTalkCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional string msg = 6;</code>
     */
    private final Utf8String msg = Utf8String.newEmptyInstance();

    private GmTalkCsReq() {
    }

    /**
     * @return a new empty instance of {@code GmTalkCsReq}
     */
    public static GmTalkCsReq newInstance() {
      return new GmTalkCsReq();
    }

    /**
     * <code>optional string msg = 6;</code>
     * @return whether the msg field is set
     */
    public boolean hasMsg() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional string msg = 6;</code>
     * @return this
     */
    public GmTalkCsReq clearMsg() {
      bitField0_ &= ~0x00000001;
      msg.clear();
      return this;
    }

    /**
     * <code>optional string msg = 6;</code>
     * @return the msg
     */
    public String getMsg() {
      return msg.getString();
    }

    /**
     * <code>optional string msg = 6;</code>
     * @return internal {@code Utf8String} representation of msg for reading
     */
    public Utf8String getMsgBytes() {
      return this.msg;
    }

    /**
     * <code>optional string msg = 6;</code>
     * @return internal {@code Utf8String} representation of msg for modifications
     */
    public Utf8String getMutableMsgBytes() {
      bitField0_ |= 0x00000001;
      return this.msg;
    }

    /**
     * <code>optional string msg = 6;</code>
     * @param value the msg to set
     * @return this
     */
    public GmTalkCsReq setMsg(final CharSequence value) {
      bitField0_ |= 0x00000001;
      msg.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string msg = 6;</code>
     * @param value the msg to set
     * @return this
     */
    public GmTalkCsReq setMsg(final Utf8String value) {
      bitField0_ |= 0x00000001;
      msg.copyFrom(value);
      return this;
    }

    @Override
    public GmTalkCsReq copyFrom(final GmTalkCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        msg.copyFrom(other.msg);
      }
      return this;
    }

    @Override
    public GmTalkCsReq mergeFrom(final GmTalkCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMsg()) {
        getMutableMsgBytes().copyFrom(other.msg);
      }
      return this;
    }

    @Override
    public GmTalkCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      msg.clear();
      return this;
    }

    @Override
    public GmTalkCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      msg.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GmTalkCsReq)) {
        return false;
      }
      GmTalkCsReq other = (GmTalkCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasMsg() || msg.equals(other.msg));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 50);
        output.writeStringNoTag(msg);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(msg);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GmTalkCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 50: {
            // msg
            input.readString(msg);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeString(FieldNames.msg, msg);
      }
      output.endObject();
    }

    @Override
    public GmTalkCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 108417: {
            if (input.isAtField(FieldNames.msg)) {
              if (!input.trySkipNullValue()) {
                input.readString(msg);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GmTalkCsReq clone() {
      return new GmTalkCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GmTalkCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GmTalkCsReq(), data).checkInitialized();
    }

    public static GmTalkCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GmTalkCsReq(), input).checkInitialized();
    }

    public static GmTalkCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GmTalkCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating GmTalkCsReq messages
     */
    public static MessageFactory<GmTalkCsReq> getFactory() {
      return GmTalkCsReqFactory.INSTANCE;
    }

    private enum GmTalkCsReqFactory implements MessageFactory<GmTalkCsReq> {
      INSTANCE;

      @Override
      public GmTalkCsReq create() {
        return GmTalkCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName msg = FieldName.forField("msg");
    }
  }
}
