// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class GetChallengeGroupStatisticsScRspOuterClass {
  /**
   * Protobuf type {@code GetChallengeGroupStatisticsScRsp}
   */
  public static final class GetChallengeGroupStatisticsScRsp extends ProtoMessage<GetChallengeGroupStatisticsScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 2;</code>
     */
    private int retcode;

    /**
     * <code>optional uint32 group_id = 14;</code>
     */
    private int groupId;

    /**
     * <code>optional .ChallengeBossStats boss_stats = 7;</code>
     */
    private final ChallengeBossStatsOuterClass.ChallengeBossStats bossStats = ChallengeBossStatsOuterClass.ChallengeBossStats.newInstance();

    /**
     * <code>optional .ChallengeStoryStats story_stats = 10;</code>
     */
    private final ChallengeStoryStatsOuterClass.ChallengeStoryStats storyStats = ChallengeStoryStatsOuterClass.ChallengeStoryStats.newInstance();

    /**
     * <code>optional .ChallengeMemoryStats memory_stats = 13;</code>
     */
    private final ChallengeMemoryStatsOuterClass.ChallengeMemoryStats memoryStats = ChallengeMemoryStatsOuterClass.ChallengeMemoryStats.newInstance();

    private GetChallengeGroupStatisticsScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetChallengeGroupStatisticsScRsp}
     */
    public static GetChallengeGroupStatisticsScRsp newInstance() {
      return new GetChallengeGroupStatisticsScRsp();
    }

    public boolean hasGroupInfoCase() {
      return (((bitField0_ & 0x00000007)) != 0);
    }

    public GetChallengeGroupStatisticsScRsp clearGroupInfoCase() {
      if (hasGroupInfoCase()) {
        clearBossStats();
        clearStoryStats();
        clearMemoryStats();
      }
      return this;
    }

    private void clearGroupInfoCaseOtherBossStats() {
      if ((((bitField0_ & 0x00000006)) != 0)) {
        clearStoryStats();
        clearMemoryStats();
      }
    }

    private void clearGroupInfoCaseOtherStoryStats() {
      if ((((bitField0_ & 0x00000005)) != 0)) {
        clearBossStats();
        clearMemoryStats();
      }
    }

    private void clearGroupInfoCaseOtherMemoryStats() {
      if ((((bitField0_ & 0x00000003)) != 0)) {
        clearBossStats();
        clearStoryStats();
      }
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp clearRetcode() {
      bitField0_ &= ~0x00000008;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000008;
      retcode = value;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 14;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 group_id = 14;</code>
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp clearGroupId() {
      bitField0_ &= ~0x00000010;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 14;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 group_id = 14;</code>
     * @param value the groupId to set
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp setGroupId(final int value) {
      bitField0_ |= 0x00000010;
      groupId = value;
      return this;
    }

    /**
     * <code>optional .ChallengeBossStats boss_stats = 7;</code>
     * @return whether the bossStats field is set
     */
    public boolean hasBossStats() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .ChallengeBossStats boss_stats = 7;</code>
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp clearBossStats() {
      bitField0_ &= ~0x00000001;
      bossStats.clear();
      return this;
    }

    /**
     * <code>optional .ChallengeBossStats boss_stats = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBossStats()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeBossStatsOuterClass.ChallengeBossStats getBossStats() {
      return bossStats;
    }

    /**
     * <code>optional .ChallengeBossStats boss_stats = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeBossStatsOuterClass.ChallengeBossStats getMutableBossStats() {
      clearGroupInfoCaseOtherBossStats();
      bitField0_ |= 0x00000001;
      return bossStats;
    }

    /**
     * <code>optional .ChallengeBossStats boss_stats = 7;</code>
     * @param value the bossStats to set
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp setBossStats(
        final ChallengeBossStatsOuterClass.ChallengeBossStats value) {
      clearGroupInfoCaseOtherBossStats();
      bitField0_ |= 0x00000001;
      bossStats.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChallengeStoryStats story_stats = 10;</code>
     * @return whether the storyStats field is set
     */
    public boolean hasStoryStats() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ChallengeStoryStats story_stats = 10;</code>
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp clearStoryStats() {
      bitField0_ &= ~0x00000002;
      storyStats.clear();
      return this;
    }

    /**
     * <code>optional .ChallengeStoryStats story_stats = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableStoryStats()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeStoryStatsOuterClass.ChallengeStoryStats getStoryStats() {
      return storyStats;
    }

    /**
     * <code>optional .ChallengeStoryStats story_stats = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeStoryStatsOuterClass.ChallengeStoryStats getMutableStoryStats() {
      clearGroupInfoCaseOtherStoryStats();
      bitField0_ |= 0x00000002;
      return storyStats;
    }

    /**
     * <code>optional .ChallengeStoryStats story_stats = 10;</code>
     * @param value the storyStats to set
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp setStoryStats(
        final ChallengeStoryStatsOuterClass.ChallengeStoryStats value) {
      clearGroupInfoCaseOtherStoryStats();
      bitField0_ |= 0x00000002;
      storyStats.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChallengeMemoryStats memory_stats = 13;</code>
     * @return whether the memoryStats field is set
     */
    public boolean hasMemoryStats() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ChallengeMemoryStats memory_stats = 13;</code>
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp clearMemoryStats() {
      bitField0_ &= ~0x00000004;
      memoryStats.clear();
      return this;
    }

    /**
     * <code>optional .ChallengeMemoryStats memory_stats = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMemoryStats()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeMemoryStatsOuterClass.ChallengeMemoryStats getMemoryStats() {
      return memoryStats;
    }

    /**
     * <code>optional .ChallengeMemoryStats memory_stats = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeMemoryStatsOuterClass.ChallengeMemoryStats getMutableMemoryStats() {
      clearGroupInfoCaseOtherMemoryStats();
      bitField0_ |= 0x00000004;
      return memoryStats;
    }

    /**
     * <code>optional .ChallengeMemoryStats memory_stats = 13;</code>
     * @param value the memoryStats to set
     * @return this
     */
    public GetChallengeGroupStatisticsScRsp setMemoryStats(
        final ChallengeMemoryStatsOuterClass.ChallengeMemoryStats value) {
      clearGroupInfoCaseOtherMemoryStats();
      bitField0_ |= 0x00000004;
      memoryStats.copyFrom(value);
      return this;
    }

    @Override
    public GetChallengeGroupStatisticsScRsp copyFrom(final GetChallengeGroupStatisticsScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        groupId = other.groupId;
        bossStats.copyFrom(other.bossStats);
        storyStats.copyFrom(other.storyStats);
        memoryStats.copyFrom(other.memoryStats);
      }
      return this;
    }

    @Override
    public GetChallengeGroupStatisticsScRsp mergeFrom(
        final GetChallengeGroupStatisticsScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasBossStats()) {
        getMutableBossStats().mergeFrom(other.bossStats);
      }
      if (other.hasStoryStats()) {
        getMutableStoryStats().mergeFrom(other.storyStats);
      }
      if (other.hasMemoryStats()) {
        getMutableMemoryStats().mergeFrom(other.memoryStats);
      }
      return this;
    }

    @Override
    public GetChallengeGroupStatisticsScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      groupId = 0;
      bossStats.clear();
      storyStats.clear();
      memoryStats.clear();
      return this;
    }

    @Override
    public GetChallengeGroupStatisticsScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bossStats.clearQuick();
      storyStats.clearQuick();
      memoryStats.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetChallengeGroupStatisticsScRsp)) {
        return false;
      }
      GetChallengeGroupStatisticsScRsp other = (GetChallengeGroupStatisticsScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasBossStats() || bossStats.equals(other.bossStats))
        && (!hasStoryStats() || storyStats.equals(other.storyStats))
        && (!hasMemoryStats() || memoryStats.equals(other.memoryStats));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 58);
        output.writeMessageNoTag(bossStats);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 82);
        output.writeMessageNoTag(storyStats);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 106);
        output.writeMessageNoTag(memoryStats);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(bossStats);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(storyStats);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(memoryStats);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetChallengeGroupStatisticsScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // bossStats
            clearGroupInfoCaseOtherBossStats();
            input.readMessage(bossStats);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // storyStats
            clearGroupInfoCaseOtherStoryStats();
            input.readMessage(storyStats);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // memoryStats
            clearGroupInfoCaseOtherMemoryStats();
            input.readMessage(memoryStats);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.bossStats, bossStats);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.storyStats, storyStats);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.memoryStats, memoryStats);
      }
      output.endObject();
    }

    @Override
    public GetChallengeGroupStatisticsScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1497806130:
          case -469476019: {
            if (input.isAtField(FieldNames.bossStats)) {
              if (!input.trySkipNullValue()) {
                clearGroupInfoCaseOtherBossStats();
                input.readMessage(bossStats);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1483418794:
          case -915483435: {
            if (input.isAtField(FieldNames.storyStats)) {
              if (!input.trySkipNullValue()) {
                clearGroupInfoCaseOtherStoryStats();
                input.readMessage(storyStats);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1407717406:
          case 1032740833: {
            if (input.isAtField(FieldNames.memoryStats)) {
              if (!input.trySkipNullValue()) {
                clearGroupInfoCaseOtherMemoryStats();
                input.readMessage(memoryStats);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetChallengeGroupStatisticsScRsp clone() {
      return new GetChallengeGroupStatisticsScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetChallengeGroupStatisticsScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetChallengeGroupStatisticsScRsp(), data).checkInitialized();
    }

    public static GetChallengeGroupStatisticsScRsp parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new GetChallengeGroupStatisticsScRsp(), input).checkInitialized();
    }

    public static GetChallengeGroupStatisticsScRsp parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new GetChallengeGroupStatisticsScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetChallengeGroupStatisticsScRsp messages
     */
    public static MessageFactory<GetChallengeGroupStatisticsScRsp> getFactory() {
      return GetChallengeGroupStatisticsScRspFactory.INSTANCE;
    }

    private enum GetChallengeGroupStatisticsScRspFactory implements MessageFactory<GetChallengeGroupStatisticsScRsp> {
      INSTANCE;

      @Override
      public GetChallengeGroupStatisticsScRsp create() {
        return GetChallengeGroupStatisticsScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName groupId = FieldName.forField("groupId", "group_id");

      static final FieldName bossStats = FieldName.forField("bossStats", "boss_stats");

      static final FieldName storyStats = FieldName.forField("storyStats", "story_stats");

      static final FieldName memoryStats = FieldName.forField("memoryStats", "memory_stats");
    }
  }
}
