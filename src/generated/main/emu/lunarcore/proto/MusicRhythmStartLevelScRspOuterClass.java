// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class MusicRhythmStartLevelScRspOuterClass {
  /**
   * Protobuf type {@code MusicRhythmStartLevelScRsp}
   */
  public static final class MusicRhythmStartLevelScRsp extends ProtoMessage<MusicRhythmStartLevelScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 level_id = 3;</code>
     */
    private int levelId;

    /**
     * <code>optional uint32 retcode = 6;</code>
     */
    private int retcode;

    /**
     * <code>optional string NJOONPFKHGE = 8;</code>
     */
    private final Utf8String nJOONPFKHGE = Utf8String.newEmptyInstance();

    private MusicRhythmStartLevelScRsp() {
    }

    /**
     * @return a new empty instance of {@code MusicRhythmStartLevelScRsp}
     */
    public static MusicRhythmStartLevelScRsp newInstance() {
      return new MusicRhythmStartLevelScRsp();
    }

    /**
     * <code>optional uint32 level_id = 3;</code>
     * @return whether the levelId field is set
     */
    public boolean hasLevelId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 level_id = 3;</code>
     * @return this
     */
    public MusicRhythmStartLevelScRsp clearLevelId() {
      bitField0_ &= ~0x00000001;
      levelId = 0;
      return this;
    }

    /**
     * <code>optional uint32 level_id = 3;</code>
     * @return the levelId
     */
    public int getLevelId() {
      return levelId;
    }

    /**
     * <code>optional uint32 level_id = 3;</code>
     * @param value the levelId to set
     * @return this
     */
    public MusicRhythmStartLevelScRsp setLevelId(final int value) {
      bitField0_ |= 0x00000001;
      levelId = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 6;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 retcode = 6;</code>
     * @return this
     */
    public MusicRhythmStartLevelScRsp clearRetcode() {
      bitField0_ &= ~0x00000002;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 6;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 6;</code>
     * @param value the retcode to set
     * @return this
     */
    public MusicRhythmStartLevelScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000002;
      retcode = value;
      return this;
    }

    /**
     * <code>optional string NJOONPFKHGE = 8;</code>
     * @return whether the nJOONPFKHGE field is set
     */
    public boolean hasNJOONPFKHGE() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional string NJOONPFKHGE = 8;</code>
     * @return this
     */
    public MusicRhythmStartLevelScRsp clearNJOONPFKHGE() {
      bitField0_ &= ~0x00000004;
      nJOONPFKHGE.clear();
      return this;
    }

    /**
     * <code>optional string NJOONPFKHGE = 8;</code>
     * @return the nJOONPFKHGE
     */
    public String getNJOONPFKHGE() {
      return nJOONPFKHGE.getString();
    }

    /**
     * <code>optional string NJOONPFKHGE = 8;</code>
     * @return internal {@code Utf8String} representation of nJOONPFKHGE for reading
     */
    public Utf8String getNJOONPFKHGEBytes() {
      return this.nJOONPFKHGE;
    }

    /**
     * <code>optional string NJOONPFKHGE = 8;</code>
     * @return internal {@code Utf8String} representation of nJOONPFKHGE for modifications
     */
    public Utf8String getMutableNJOONPFKHGEBytes() {
      bitField0_ |= 0x00000004;
      return this.nJOONPFKHGE;
    }

    /**
     * <code>optional string NJOONPFKHGE = 8;</code>
     * @param value the nJOONPFKHGE to set
     * @return this
     */
    public MusicRhythmStartLevelScRsp setNJOONPFKHGE(final CharSequence value) {
      bitField0_ |= 0x00000004;
      nJOONPFKHGE.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string NJOONPFKHGE = 8;</code>
     * @param value the nJOONPFKHGE to set
     * @return this
     */
    public MusicRhythmStartLevelScRsp setNJOONPFKHGE(final Utf8String value) {
      bitField0_ |= 0x00000004;
      nJOONPFKHGE.copyFrom(value);
      return this;
    }

    @Override
    public MusicRhythmStartLevelScRsp copyFrom(final MusicRhythmStartLevelScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        levelId = other.levelId;
        retcode = other.retcode;
        nJOONPFKHGE.copyFrom(other.nJOONPFKHGE);
      }
      return this;
    }

    @Override
    public MusicRhythmStartLevelScRsp mergeFrom(final MusicRhythmStartLevelScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLevelId()) {
        setLevelId(other.levelId);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasNJOONPFKHGE()) {
        getMutableNJOONPFKHGEBytes().copyFrom(other.nJOONPFKHGE);
      }
      return this;
    }

    @Override
    public MusicRhythmStartLevelScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      levelId = 0;
      retcode = 0;
      nJOONPFKHGE.clear();
      return this;
    }

    @Override
    public MusicRhythmStartLevelScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      nJOONPFKHGE.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MusicRhythmStartLevelScRsp)) {
        return false;
      }
      MusicRhythmStartLevelScRsp other = (MusicRhythmStartLevelScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasLevelId() || levelId == other.levelId)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasNJOONPFKHGE() || nJOONPFKHGE.equals(other.nJOONPFKHGE));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(levelId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 66);
        output.writeStringNoTag(nJOONPFKHGE);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(levelId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(nJOONPFKHGE);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MusicRhythmStartLevelScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // levelId
            levelId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // nJOONPFKHGE
            input.readString(nJOONPFKHGE);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.levelId, levelId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeString(FieldNames.nJOONPFKHGE, nJOONPFKHGE);
      }
      output.endObject();
    }

    @Override
    public MusicRhythmStartLevelScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 69784511:
          case -2131626058: {
            if (input.isAtField(FieldNames.levelId)) {
              if (!input.trySkipNullValue()) {
                levelId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1965793187: {
            if (input.isAtField(FieldNames.nJOONPFKHGE)) {
              if (!input.trySkipNullValue()) {
                input.readString(nJOONPFKHGE);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MusicRhythmStartLevelScRsp clone() {
      return new MusicRhythmStartLevelScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MusicRhythmStartLevelScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MusicRhythmStartLevelScRsp(), data).checkInitialized();
    }

    public static MusicRhythmStartLevelScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MusicRhythmStartLevelScRsp(), input).checkInitialized();
    }

    public static MusicRhythmStartLevelScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MusicRhythmStartLevelScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating MusicRhythmStartLevelScRsp messages
     */
    public static MessageFactory<MusicRhythmStartLevelScRsp> getFactory() {
      return MusicRhythmStartLevelScRspFactory.INSTANCE;
    }

    private enum MusicRhythmStartLevelScRspFactory implements MessageFactory<MusicRhythmStartLevelScRsp> {
      INSTANCE;

      @Override
      public MusicRhythmStartLevelScRsp create() {
        return MusicRhythmStartLevelScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName levelId = FieldName.forField("levelId", "level_id");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName nJOONPFKHGE = FieldName.forField("NJOONPFKHGE");
    }
  }
}
