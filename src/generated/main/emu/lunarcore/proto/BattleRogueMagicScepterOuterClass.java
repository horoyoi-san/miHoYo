// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class BattleRogueMagicScepterOuterClass {
  /**
   * Protobuf type {@code BattleRogueMagicScepter}
   */
  public static final class BattleRogueMagicScepter extends ProtoMessage<BattleRogueMagicScepter> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 scepter_id = 1;</code>
     */
    private int scepterId;

    /**
     * <code>optional uint32 level = 3;</code>
     */
    private int level;

    /**
     * <code>repeated .BattleRogueMagicUnit magic_list = 2;</code>
     */
    private final RepeatedMessage<BattleRogueMagicUnitOuterClass.BattleRogueMagicUnit> magicList = RepeatedMessage.newEmptyInstance(BattleRogueMagicUnitOuterClass.BattleRogueMagicUnit.getFactory());

    /**
     * <code>repeated .BattleRogueMagicScepter.TrenchCountEntry trench_count = 4;</code>
     */
    private final RepeatedMessage<TrenchCountEntry> trenchCount = RepeatedMessage.newEmptyInstance(TrenchCountEntry.getFactory());

    private BattleRogueMagicScepter() {
    }

    /**
     * @return a new empty instance of {@code BattleRogueMagicScepter}
     */
    public static BattleRogueMagicScepter newInstance() {
      return new BattleRogueMagicScepter();
    }

    /**
     * <code>optional uint32 scepter_id = 1;</code>
     * @return whether the scepterId field is set
     */
    public boolean hasScepterId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 scepter_id = 1;</code>
     * @return this
     */
    public BattleRogueMagicScepter clearScepterId() {
      bitField0_ &= ~0x00000001;
      scepterId = 0;
      return this;
    }

    /**
     * <code>optional uint32 scepter_id = 1;</code>
     * @return the scepterId
     */
    public int getScepterId() {
      return scepterId;
    }

    /**
     * <code>optional uint32 scepter_id = 1;</code>
     * @param value the scepterId to set
     * @return this
     */
    public BattleRogueMagicScepter setScepterId(final int value) {
      bitField0_ |= 0x00000001;
      scepterId = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 3;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 level = 3;</code>
     * @return this
     */
    public BattleRogueMagicScepter clearLevel() {
      bitField0_ &= ~0x00000002;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 3;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 3;</code>
     * @param value the level to set
     * @return this
     */
    public BattleRogueMagicScepter setLevel(final int value) {
      bitField0_ |= 0x00000002;
      level = value;
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit magic_list = 2;</code>
     * @return whether the magicList field is set
     */
    public boolean hasMagicList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit magic_list = 2;</code>
     * @return this
     */
    public BattleRogueMagicScepter clearMagicList() {
      bitField0_ &= ~0x00000004;
      magicList.clear();
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit magic_list = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMagicList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<BattleRogueMagicUnitOuterClass.BattleRogueMagicUnit> getMagicList() {
      return magicList;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit magic_list = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<BattleRogueMagicUnitOuterClass.BattleRogueMagicUnit> getMutableMagicList(
        ) {
      bitField0_ |= 0x00000004;
      return magicList;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit magic_list = 2;</code>
     * @param value the magicList to add
     * @return this
     */
    public BattleRogueMagicScepter addMagicList(
        final BattleRogueMagicUnitOuterClass.BattleRogueMagicUnit value) {
      bitField0_ |= 0x00000004;
      magicList.add(value);
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit magic_list = 2;</code>
     * @param values the magicList to add
     * @return this
     */
    public BattleRogueMagicScepter addAllMagicList(
        final BattleRogueMagicUnitOuterClass.BattleRogueMagicUnit... values) {
      bitField0_ |= 0x00000004;
      magicList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter.TrenchCountEntry trench_count = 4;</code>
     * @return whether the trenchCount field is set
     */
    public boolean hasTrenchCount() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter.TrenchCountEntry trench_count = 4;</code>
     * @return this
     */
    public BattleRogueMagicScepter clearTrenchCount() {
      bitField0_ &= ~0x00000008;
      trenchCount.clear();
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter.TrenchCountEntry trench_count = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableTrenchCount()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<TrenchCountEntry> getTrenchCount() {
      return trenchCount;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter.TrenchCountEntry trench_count = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<TrenchCountEntry> getMutableTrenchCount() {
      bitField0_ |= 0x00000008;
      return trenchCount;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter.TrenchCountEntry trench_count = 4;</code>
     * @param value the trenchCount to add
     * @return this
     */
    public BattleRogueMagicScepter addTrenchCount(final TrenchCountEntry value) {
      bitField0_ |= 0x00000008;
      trenchCount.add(value);
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter.TrenchCountEntry trench_count = 4;</code>
     * @param values the trenchCount to add
     * @return this
     */
    public BattleRogueMagicScepter addAllTrenchCount(final TrenchCountEntry... values) {
      bitField0_ |= 0x00000008;
      trenchCount.addAll(values);
      return this;
    }

    @Override
    public BattleRogueMagicScepter copyFrom(final BattleRogueMagicScepter other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        scepterId = other.scepterId;
        level = other.level;
        magicList.copyFrom(other.magicList);
        trenchCount.copyFrom(other.trenchCount);
      }
      return this;
    }

    @Override
    public BattleRogueMagicScepter mergeFrom(final BattleRogueMagicScepter other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasScepterId()) {
        setScepterId(other.scepterId);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasMagicList()) {
        getMutableMagicList().addAll(other.magicList);
      }
      if (other.hasTrenchCount()) {
        getMutableTrenchCount().addAll(other.trenchCount);
      }
      return this;
    }

    @Override
    public BattleRogueMagicScepter clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      scepterId = 0;
      level = 0;
      magicList.clear();
      trenchCount.clear();
      return this;
    }

    @Override
    public BattleRogueMagicScepter clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      magicList.clearQuick();
      trenchCount.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof BattleRogueMagicScepter)) {
        return false;
      }
      BattleRogueMagicScepter other = (BattleRogueMagicScepter) o;
      return bitField0_ == other.bitField0_
        && (!hasScepterId() || scepterId == other.scepterId)
        && (!hasLevel() || level == other.level)
        && (!hasMagicList() || magicList.equals(other.magicList))
        && (!hasTrenchCount() || trenchCount.equals(other.trenchCount));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(scepterId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < magicList.length(); i++) {
          output.writeRawByte((byte) 18);
          output.writeMessageNoTag(magicList.get(i));
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < trenchCount.length(); i++) {
          output.writeRawByte((byte) 34);
          output.writeMessageNoTag(trenchCount.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(scepterId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * magicList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(magicList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * trenchCount.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(trenchCount);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public BattleRogueMagicScepter mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // scepterId
            scepterId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // magicList
            tag = input.readRepeatedMessage(magicList, tag);
            bitField0_ |= 0x00000004;
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // trenchCount
            tag = input.readRepeatedMessage(trenchCount, tag);
            bitField0_ |= 0x00000008;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.scepterId, scepterId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.magicList, magicList);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.trenchCount, trenchCount);
      }
      output.endObject();
    }

    @Override
    public BattleRogueMagicScepter mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1800971009:
          case -4452172: {
            if (input.isAtField(FieldNames.scepterId)) {
              if (!input.trySkipNullValue()) {
                scepterId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2128293867:
          case 1570227184: {
            if (input.isAtField(FieldNames.magicList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(magicList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1938047453:
          case 840432988: {
            if (input.isAtField(FieldNames.trenchCount)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(trenchCount);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public BattleRogueMagicScepter clone() {
      return new BattleRogueMagicScepter().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static BattleRogueMagicScepter parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicScepter(), data).checkInitialized();
    }

    public static BattleRogueMagicScepter parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicScepter(), input).checkInitialized();
    }

    public static BattleRogueMagicScepter parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicScepter(), input).checkInitialized();
    }

    /**
     * @return factory for creating BattleRogueMagicScepter messages
     */
    public static MessageFactory<BattleRogueMagicScepter> getFactory() {
      return BattleRogueMagicScepterFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code TrenchCountEntry}
     */
    public static final class TrenchCountEntry extends ProtoMessage<TrenchCountEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional uint32 value = 2;</code>
       */
      private int value_;

      private TrenchCountEntry() {
      }

      /**
       * @return a new empty instance of {@code TrenchCountEntry}
       */
      public static TrenchCountEntry newInstance() {
        return new TrenchCountEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public TrenchCountEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public TrenchCountEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return this
       */
      public TrenchCountEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_ = 0;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return the value_
       */
      public int getValue() {
        return value_;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public TrenchCountEntry setValue(final int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        return this;
      }

      @Override
      public TrenchCountEntry copyFrom(final TrenchCountEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_ = other.value_;
        }
        return this;
      }

      @Override
      public TrenchCountEntry mergeFrom(final TrenchCountEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          setValue(other.value_);
        }
        return this;
      }

      @Override
      public TrenchCountEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_ = 0;
        return this;
      }

      @Override
      public TrenchCountEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof TrenchCountEntry)) {
          return false;
        }
        TrenchCountEntry other = (TrenchCountEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_ == other.value_);
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(value_);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public TrenchCountEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 16) {
                break;
              }
            }
            case 16: {
              // value_
              value_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeUInt32(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public TrenchCountEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  value_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public TrenchCountEntry clone() {
        return new TrenchCountEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static TrenchCountEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new TrenchCountEntry(), data).checkInitialized();
      }

      public static TrenchCountEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new TrenchCountEntry(), input).checkInitialized();
      }

      public static TrenchCountEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new TrenchCountEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating TrenchCountEntry messages
       */
      public static MessageFactory<TrenchCountEntry> getFactory() {
        return TrenchCountEntryFactory.INSTANCE;
      }

      private enum TrenchCountEntryFactory implements MessageFactory<TrenchCountEntry> {
        INSTANCE;

        @Override
        public TrenchCountEntry create() {
          return TrenchCountEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    private enum BattleRogueMagicScepterFactory implements MessageFactory<BattleRogueMagicScepter> {
      INSTANCE;

      @Override
      public BattleRogueMagicScepter create() {
        return BattleRogueMagicScepter.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName scepterId = FieldName.forField("scepterId", "scepter_id");

      static final FieldName level = FieldName.forField("level");

      static final FieldName magicList = FieldName.forField("magicList", "magic_list");

      static final FieldName trenchCount = FieldName.forField("trenchCount", "trench_count");
    }
  }
}
