// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class TakeTalkRewardCsReqOuterClass {
  /**
   * Protobuf type {@code TakeTalkRewardCsReq}
   */
  public static final class TakeTalkRewardCsReq extends ProtoMessage<TakeTalkRewardCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 KPMHFBKEKDG = 11;</code>
     */
    private int kPMHFBKEKDG;

    /**
     * <code>optional .Vector ADIELMGNMMA = 4;</code>
     */
    private final VectorOuterClass.Vector aDIELMGNMMA = VectorOuterClass.Vector.newInstance();

    private TakeTalkRewardCsReq() {
    }

    /**
     * @return a new empty instance of {@code TakeTalkRewardCsReq}
     */
    public static TakeTalkRewardCsReq newInstance() {
      return new TakeTalkRewardCsReq();
    }

    /**
     * <code>optional uint32 KPMHFBKEKDG = 11;</code>
     * @return whether the kPMHFBKEKDG field is set
     */
    public boolean hasKPMHFBKEKDG() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 KPMHFBKEKDG = 11;</code>
     * @return this
     */
    public TakeTalkRewardCsReq clearKPMHFBKEKDG() {
      bitField0_ &= ~0x00000001;
      kPMHFBKEKDG = 0;
      return this;
    }

    /**
     * <code>optional uint32 KPMHFBKEKDG = 11;</code>
     * @return the kPMHFBKEKDG
     */
    public int getKPMHFBKEKDG() {
      return kPMHFBKEKDG;
    }

    /**
     * <code>optional uint32 KPMHFBKEKDG = 11;</code>
     * @param value the kPMHFBKEKDG to set
     * @return this
     */
    public TakeTalkRewardCsReq setKPMHFBKEKDG(final int value) {
      bitField0_ |= 0x00000001;
      kPMHFBKEKDG = value;
      return this;
    }

    /**
     * <code>optional .Vector ADIELMGNMMA = 4;</code>
     * @return whether the aDIELMGNMMA field is set
     */
    public boolean hasADIELMGNMMA() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .Vector ADIELMGNMMA = 4;</code>
     * @return this
     */
    public TakeTalkRewardCsReq clearADIELMGNMMA() {
      bitField0_ &= ~0x00000002;
      aDIELMGNMMA.clear();
      return this;
    }

    /**
     * <code>optional .Vector ADIELMGNMMA = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableADIELMGNMMA()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public VectorOuterClass.Vector getADIELMGNMMA() {
      return aDIELMGNMMA;
    }

    /**
     * <code>optional .Vector ADIELMGNMMA = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public VectorOuterClass.Vector getMutableADIELMGNMMA() {
      bitField0_ |= 0x00000002;
      return aDIELMGNMMA;
    }

    /**
     * <code>optional .Vector ADIELMGNMMA = 4;</code>
     * @param value the aDIELMGNMMA to set
     * @return this
     */
    public TakeTalkRewardCsReq setADIELMGNMMA(final VectorOuterClass.Vector value) {
      bitField0_ |= 0x00000002;
      aDIELMGNMMA.copyFrom(value);
      return this;
    }

    @Override
    public TakeTalkRewardCsReq copyFrom(final TakeTalkRewardCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kPMHFBKEKDG = other.kPMHFBKEKDG;
        aDIELMGNMMA.copyFrom(other.aDIELMGNMMA);
      }
      return this;
    }

    @Override
    public TakeTalkRewardCsReq mergeFrom(final TakeTalkRewardCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKPMHFBKEKDG()) {
        setKPMHFBKEKDG(other.kPMHFBKEKDG);
      }
      if (other.hasADIELMGNMMA()) {
        getMutableADIELMGNMMA().mergeFrom(other.aDIELMGNMMA);
      }
      return this;
    }

    @Override
    public TakeTalkRewardCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kPMHFBKEKDG = 0;
      aDIELMGNMMA.clear();
      return this;
    }

    @Override
    public TakeTalkRewardCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aDIELMGNMMA.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof TakeTalkRewardCsReq)) {
        return false;
      }
      TakeTalkRewardCsReq other = (TakeTalkRewardCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasKPMHFBKEKDG() || kPMHFBKEKDG == other.kPMHFBKEKDG)
        && (!hasADIELMGNMMA() || aDIELMGNMMA.equals(other.aDIELMGNMMA));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(kPMHFBKEKDG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 34);
        output.writeMessageNoTag(aDIELMGNMMA);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(kPMHFBKEKDG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(aDIELMGNMMA);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public TakeTalkRewardCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 88: {
            // kPMHFBKEKDG
            kPMHFBKEKDG = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // aDIELMGNMMA
            input.readMessage(aDIELMGNMMA);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.kPMHFBKEKDG, kPMHFBKEKDG);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.aDIELMGNMMA, aDIELMGNMMA);
      }
      output.endObject();
    }

    @Override
    public TakeTalkRewardCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1313658504: {
            if (input.isAtField(FieldNames.kPMHFBKEKDG)) {
              if (!input.trySkipNullValue()) {
                kPMHFBKEKDG = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 882119194: {
            if (input.isAtField(FieldNames.aDIELMGNMMA)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(aDIELMGNMMA);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public TakeTalkRewardCsReq clone() {
      return new TakeTalkRewardCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static TakeTalkRewardCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new TakeTalkRewardCsReq(), data).checkInitialized();
    }

    public static TakeTalkRewardCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new TakeTalkRewardCsReq(), input).checkInitialized();
    }

    public static TakeTalkRewardCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new TakeTalkRewardCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating TakeTalkRewardCsReq messages
     */
    public static MessageFactory<TakeTalkRewardCsReq> getFactory() {
      return TakeTalkRewardCsReqFactory.INSTANCE;
    }

    private enum TakeTalkRewardCsReqFactory implements MessageFactory<TakeTalkRewardCsReq> {
      INSTANCE;

      @Override
      public TakeTalkRewardCsReq create() {
        return TakeTalkRewardCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kPMHFBKEKDG = FieldName.forField("KPMHFBKEKDG");

      static final FieldName aDIELMGNMMA = FieldName.forField("ADIELMGNMMA");
    }
  }
}
