// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class MarkRelicFilterPlanScRspOuterClass {
  /**
   * Protobuf type {@code MarkRelicFilterPlanScRsp}
   */
  public static final class MarkRelicFilterPlanScRsp extends ProtoMessage<MarkRelicFilterPlanScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 Retcode = 1;</code>
     */
    private int retcode;

    /**
     * <code>optional bool IsMark = 8;</code>
     */
    private boolean isMark;

    /**
     * <code>optional bool IsBatchOp = 11;</code>
     */
    private boolean isBatchOp;

    /**
     * <code>repeated uint32 SlotIndexList = 15;</code>
     */
    private final RepeatedInt slotIndexList = RepeatedInt.newEmptyInstance();

    private MarkRelicFilterPlanScRsp() {
    }

    /**
     * @return a new empty instance of {@code MarkRelicFilterPlanScRsp}
     */
    public static MarkRelicFilterPlanScRsp newInstance() {
      return new MarkRelicFilterPlanScRsp();
    }

    /**
     * <code>optional uint32 Retcode = 1;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 Retcode = 1;</code>
     * @return this
     */
    public MarkRelicFilterPlanScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 Retcode = 1;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 Retcode = 1;</code>
     * @param value the retcode to set
     * @return this
     */
    public MarkRelicFilterPlanScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional bool IsMark = 8;</code>
     * @return whether the isMark field is set
     */
    public boolean hasIsMark() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool IsMark = 8;</code>
     * @return this
     */
    public MarkRelicFilterPlanScRsp clearIsMark() {
      bitField0_ &= ~0x00000002;
      isMark = false;
      return this;
    }

    /**
     * <code>optional bool IsMark = 8;</code>
     * @return the isMark
     */
    public boolean getIsMark() {
      return isMark;
    }

    /**
     * <code>optional bool IsMark = 8;</code>
     * @param value the isMark to set
     * @return this
     */
    public MarkRelicFilterPlanScRsp setIsMark(final boolean value) {
      bitField0_ |= 0x00000002;
      isMark = value;
      return this;
    }

    /**
     * <code>optional bool IsBatchOp = 11;</code>
     * @return whether the isBatchOp field is set
     */
    public boolean hasIsBatchOp() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool IsBatchOp = 11;</code>
     * @return this
     */
    public MarkRelicFilterPlanScRsp clearIsBatchOp() {
      bitField0_ &= ~0x00000004;
      isBatchOp = false;
      return this;
    }

    /**
     * <code>optional bool IsBatchOp = 11;</code>
     * @return the isBatchOp
     */
    public boolean getIsBatchOp() {
      return isBatchOp;
    }

    /**
     * <code>optional bool IsBatchOp = 11;</code>
     * @param value the isBatchOp to set
     * @return this
     */
    public MarkRelicFilterPlanScRsp setIsBatchOp(final boolean value) {
      bitField0_ |= 0x00000004;
      isBatchOp = value;
      return this;
    }

    /**
     * <code>repeated uint32 SlotIndexList = 15;</code>
     * @return whether the slotIndexList field is set
     */
    public boolean hasSlotIndexList() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 SlotIndexList = 15;</code>
     * @return this
     */
    public MarkRelicFilterPlanScRsp clearSlotIndexList() {
      bitField0_ &= ~0x00000008;
      slotIndexList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 SlotIndexList = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSlotIndexList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getSlotIndexList() {
      return slotIndexList;
    }

    /**
     * <code>repeated uint32 SlotIndexList = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableSlotIndexList() {
      bitField0_ |= 0x00000008;
      return slotIndexList;
    }

    /**
     * <code>repeated uint32 SlotIndexList = 15;</code>
     * @param value the slotIndexList to add
     * @return this
     */
    public MarkRelicFilterPlanScRsp addSlotIndexList(final int value) {
      bitField0_ |= 0x00000008;
      slotIndexList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 SlotIndexList = 15;</code>
     * @param values the slotIndexList to add
     * @return this
     */
    public MarkRelicFilterPlanScRsp addAllSlotIndexList(final int... values) {
      bitField0_ |= 0x00000008;
      slotIndexList.addAll(values);
      return this;
    }

    @Override
    public MarkRelicFilterPlanScRsp copyFrom(final MarkRelicFilterPlanScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        isMark = other.isMark;
        isBatchOp = other.isBatchOp;
        slotIndexList.copyFrom(other.slotIndexList);
      }
      return this;
    }

    @Override
    public MarkRelicFilterPlanScRsp mergeFrom(final MarkRelicFilterPlanScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasIsMark()) {
        setIsMark(other.isMark);
      }
      if (other.hasIsBatchOp()) {
        setIsBatchOp(other.isBatchOp);
      }
      if (other.hasSlotIndexList()) {
        getMutableSlotIndexList().addAll(other.slotIndexList);
      }
      return this;
    }

    @Override
    public MarkRelicFilterPlanScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      isMark = false;
      isBatchOp = false;
      slotIndexList.clear();
      return this;
    }

    @Override
    public MarkRelicFilterPlanScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      slotIndexList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MarkRelicFilterPlanScRsp)) {
        return false;
      }
      MarkRelicFilterPlanScRsp other = (MarkRelicFilterPlanScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasIsMark() || isMark == other.isMark)
        && (!hasIsBatchOp() || isBatchOp == other.isBatchOp)
        && (!hasSlotIndexList() || slotIndexList.equals(other.slotIndexList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 64);
        output.writeBoolNoTag(isMark);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 88);
        output.writeBoolNoTag(isBatchOp);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < slotIndexList.length(); i++) {
          output.writeRawByte((byte) 120);
          output.writeUInt32NoTag(slotIndexList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * slotIndexList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(slotIndexList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MarkRelicFilterPlanScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // isMark
            isMark = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // isBatchOp
            isBatchOp = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // slotIndexList [packed=true]
            input.readPackedUInt32(slotIndexList, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 120: {
            // slotIndexList [packed=false]
            tag = input.readRepeatedUInt32(slotIndexList, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.isMark, isMark);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.isBatchOp, isBatchOp);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.slotIndexList, slotIndexList);
      }
      output.endObject();
    }

    @Override
    public MarkRelicFilterPlanScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1532377618: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2096443593: {
            if (input.isAtField(FieldNames.isMark)) {
              if (!input.trySkipNullValue()) {
                isMark = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1092444689: {
            if (input.isAtField(FieldNames.isBatchOp)) {
              if (!input.trySkipNullValue()) {
                isBatchOp = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 455759890: {
            if (input.isAtField(FieldNames.slotIndexList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(slotIndexList);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MarkRelicFilterPlanScRsp clone() {
      return new MarkRelicFilterPlanScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MarkRelicFilterPlanScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MarkRelicFilterPlanScRsp(), data).checkInitialized();
    }

    public static MarkRelicFilterPlanScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MarkRelicFilterPlanScRsp(), input).checkInitialized();
    }

    public static MarkRelicFilterPlanScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MarkRelicFilterPlanScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating MarkRelicFilterPlanScRsp messages
     */
    public static MessageFactory<MarkRelicFilterPlanScRsp> getFactory() {
      return MarkRelicFilterPlanScRspFactory.INSTANCE;
    }

    private enum MarkRelicFilterPlanScRspFactory implements MessageFactory<MarkRelicFilterPlanScRsp> {
      INSTANCE;

      @Override
      public MarkRelicFilterPlanScRsp create() {
        return MarkRelicFilterPlanScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("Retcode");

      static final FieldName isMark = FieldName.forField("IsMark");

      static final FieldName isBatchOp = FieldName.forField("IsBatchOp");

      static final FieldName slotIndexList = FieldName.forField("SlotIndexList");
    }
  }
}
