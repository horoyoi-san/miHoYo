// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class MusicRhythmDataScRspOuterClass {
  /**
   * Protobuf type {@code MusicRhythmDataScRsp}
   */
  public static final class MusicRhythmDataScRsp extends ProtoMessage<MusicRhythmDataScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 curSongId = 2;</code>
     */
    private int curSongId;

    /**
     * <code>optional uint32 cur_level_id = 10;</code>
     */
    private int curLevelId;

    /**
     * <code>optional uint32 retcode = 12;</code>
     */
    private int retcode;

    /**
     * <code>optional bool show_hint = 6;</code>
     */
    private boolean showHint;

    /**
     * <code>repeated uint32 unlock_phase_list = 5;</code>
     */
    private final RepeatedInt unlockPhaseList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 unlock_track_list = 8;</code>
     */
    private final RepeatedInt unlockTrackList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 unlock_song_list = 15;</code>
     */
    private final RepeatedInt unlockSongList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmGroup music_group = 1;</code>
     */
    private final RepeatedMessage<MusicRhythmGroupOuterClass.MusicRhythmGroup> musicGroup = RepeatedMessage.newEmptyInstance(MusicRhythmGroupOuterClass.MusicRhythmGroup.getFactory());

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmLevel music_level = 13;</code>
     */
    private final RepeatedMessage<MusicRhythmLevelOuterClass.MusicRhythmLevel> musicLevel = RepeatedMessage.newEmptyInstance(MusicRhythmLevelOuterClass.MusicRhythmLevel.getFactory());

    private MusicRhythmDataScRsp() {
    }

    /**
     * @return a new empty instance of {@code MusicRhythmDataScRsp}
     */
    public static MusicRhythmDataScRsp newInstance() {
      return new MusicRhythmDataScRsp();
    }

    /**
     * <code>optional uint32 curSongId = 2;</code>
     * @return whether the curSongId field is set
     */
    public boolean hasCurSongId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 curSongId = 2;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearCurSongId() {
      bitField0_ &= ~0x00000001;
      curSongId = 0;
      return this;
    }

    /**
     * <code>optional uint32 curSongId = 2;</code>
     * @return the curSongId
     */
    public int getCurSongId() {
      return curSongId;
    }

    /**
     * <code>optional uint32 curSongId = 2;</code>
     * @param value the curSongId to set
     * @return this
     */
    public MusicRhythmDataScRsp setCurSongId(final int value) {
      bitField0_ |= 0x00000001;
      curSongId = value;
      return this;
    }

    /**
     * <code>optional uint32 cur_level_id = 10;</code>
     * @return whether the curLevelId field is set
     */
    public boolean hasCurLevelId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 cur_level_id = 10;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearCurLevelId() {
      bitField0_ &= ~0x00000002;
      curLevelId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_level_id = 10;</code>
     * @return the curLevelId
     */
    public int getCurLevelId() {
      return curLevelId;
    }

    /**
     * <code>optional uint32 cur_level_id = 10;</code>
     * @param value the curLevelId to set
     * @return this
     */
    public MusicRhythmDataScRsp setCurLevelId(final int value) {
      bitField0_ |= 0x00000002;
      curLevelId = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 12;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 retcode = 12;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearRetcode() {
      bitField0_ &= ~0x00000004;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 12;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 12;</code>
     * @param value the retcode to set
     * @return this
     */
    public MusicRhythmDataScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000004;
      retcode = value;
      return this;
    }

    /**
     * <code>optional bool show_hint = 6;</code>
     * @return whether the showHint field is set
     */
    public boolean hasShowHint() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool show_hint = 6;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearShowHint() {
      bitField0_ &= ~0x00000008;
      showHint = false;
      return this;
    }

    /**
     * <code>optional bool show_hint = 6;</code>
     * @return the showHint
     */
    public boolean getShowHint() {
      return showHint;
    }

    /**
     * <code>optional bool show_hint = 6;</code>
     * @param value the showHint to set
     * @return this
     */
    public MusicRhythmDataScRsp setShowHint(final boolean value) {
      bitField0_ |= 0x00000008;
      showHint = value;
      return this;
    }

    /**
     * <code>repeated uint32 unlock_phase_list = 5;</code>
     * @return whether the unlockPhaseList field is set
     */
    public boolean hasUnlockPhaseList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 unlock_phase_list = 5;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearUnlockPhaseList() {
      bitField0_ &= ~0x00000010;
      unlockPhaseList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 unlock_phase_list = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableUnlockPhaseList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getUnlockPhaseList() {
      return unlockPhaseList;
    }

    /**
     * <code>repeated uint32 unlock_phase_list = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableUnlockPhaseList() {
      bitField0_ |= 0x00000010;
      return unlockPhaseList;
    }

    /**
     * <code>repeated uint32 unlock_phase_list = 5;</code>
     * @param value the unlockPhaseList to add
     * @return this
     */
    public MusicRhythmDataScRsp addUnlockPhaseList(final int value) {
      bitField0_ |= 0x00000010;
      unlockPhaseList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 unlock_phase_list = 5;</code>
     * @param values the unlockPhaseList to add
     * @return this
     */
    public MusicRhythmDataScRsp addAllUnlockPhaseList(final int... values) {
      bitField0_ |= 0x00000010;
      unlockPhaseList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 unlock_track_list = 8;</code>
     * @return whether the unlockTrackList field is set
     */
    public boolean hasUnlockTrackList() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated uint32 unlock_track_list = 8;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearUnlockTrackList() {
      bitField0_ &= ~0x00000020;
      unlockTrackList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 unlock_track_list = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableUnlockTrackList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getUnlockTrackList() {
      return unlockTrackList;
    }

    /**
     * <code>repeated uint32 unlock_track_list = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableUnlockTrackList() {
      bitField0_ |= 0x00000020;
      return unlockTrackList;
    }

    /**
     * <code>repeated uint32 unlock_track_list = 8;</code>
     * @param value the unlockTrackList to add
     * @return this
     */
    public MusicRhythmDataScRsp addUnlockTrackList(final int value) {
      bitField0_ |= 0x00000020;
      unlockTrackList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 unlock_track_list = 8;</code>
     * @param values the unlockTrackList to add
     * @return this
     */
    public MusicRhythmDataScRsp addAllUnlockTrackList(final int... values) {
      bitField0_ |= 0x00000020;
      unlockTrackList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 unlock_song_list = 15;</code>
     * @return whether the unlockSongList field is set
     */
    public boolean hasUnlockSongList() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated uint32 unlock_song_list = 15;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearUnlockSongList() {
      bitField0_ &= ~0x00000040;
      unlockSongList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 unlock_song_list = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableUnlockSongList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getUnlockSongList() {
      return unlockSongList;
    }

    /**
     * <code>repeated uint32 unlock_song_list = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableUnlockSongList() {
      bitField0_ |= 0x00000040;
      return unlockSongList;
    }

    /**
     * <code>repeated uint32 unlock_song_list = 15;</code>
     * @param value the unlockSongList to add
     * @return this
     */
    public MusicRhythmDataScRsp addUnlockSongList(final int value) {
      bitField0_ |= 0x00000040;
      unlockSongList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 unlock_song_list = 15;</code>
     * @param values the unlockSongList to add
     * @return this
     */
    public MusicRhythmDataScRsp addAllUnlockSongList(final int... values) {
      bitField0_ |= 0x00000040;
      unlockSongList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmGroup music_group = 1;</code>
     * @return whether the musicGroup field is set
     */
    public boolean hasMusicGroup() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmGroup music_group = 1;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearMusicGroup() {
      bitField0_ &= ~0x00000080;
      musicGroup.clear();
      return this;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmGroup music_group = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMusicGroup()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MusicRhythmGroupOuterClass.MusicRhythmGroup> getMusicGroup() {
      return musicGroup;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmGroup music_group = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MusicRhythmGroupOuterClass.MusicRhythmGroup> getMutableMusicGroup() {
      bitField0_ |= 0x00000080;
      return musicGroup;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmGroup music_group = 1;</code>
     * @param value the musicGroup to add
     * @return this
     */
    public MusicRhythmDataScRsp addMusicGroup(
        final MusicRhythmGroupOuterClass.MusicRhythmGroup value) {
      bitField0_ |= 0x00000080;
      musicGroup.add(value);
      return this;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmGroup music_group = 1;</code>
     * @param values the musicGroup to add
     * @return this
     */
    public MusicRhythmDataScRsp addAllMusicGroup(
        final MusicRhythmGroupOuterClass.MusicRhythmGroup... values) {
      bitField0_ |= 0x00000080;
      musicGroup.addAll(values);
      return this;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmLevel music_level = 13;</code>
     * @return whether the musicLevel field is set
     */
    public boolean hasMusicLevel() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmLevel music_level = 13;</code>
     * @return this
     */
    public MusicRhythmDataScRsp clearMusicLevel() {
      bitField0_ &= ~0x00000100;
      musicLevel.clear();
      return this;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmLevel music_level = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMusicLevel()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MusicRhythmLevelOuterClass.MusicRhythmLevel> getMusicLevel() {
      return musicLevel;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmLevel music_level = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MusicRhythmLevelOuterClass.MusicRhythmLevel> getMutableMusicLevel() {
      bitField0_ |= 0x00000100;
      return musicLevel;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmLevel music_level = 13;</code>
     * @param value the musicLevel to add
     * @return this
     */
    public MusicRhythmDataScRsp addMusicLevel(
        final MusicRhythmLevelOuterClass.MusicRhythmLevel value) {
      bitField0_ |= 0x00000100;
      musicLevel.add(value);
      return this;
    }

    /**
     * <code>repeated .emu.lunarcore.proto.MusicRhythmLevel music_level = 13;</code>
     * @param values the musicLevel to add
     * @return this
     */
    public MusicRhythmDataScRsp addAllMusicLevel(
        final MusicRhythmLevelOuterClass.MusicRhythmLevel... values) {
      bitField0_ |= 0x00000100;
      musicLevel.addAll(values);
      return this;
    }

    @Override
    public MusicRhythmDataScRsp copyFrom(final MusicRhythmDataScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        curSongId = other.curSongId;
        curLevelId = other.curLevelId;
        retcode = other.retcode;
        showHint = other.showHint;
        unlockPhaseList.copyFrom(other.unlockPhaseList);
        unlockTrackList.copyFrom(other.unlockTrackList);
        unlockSongList.copyFrom(other.unlockSongList);
        musicGroup.copyFrom(other.musicGroup);
        musicLevel.copyFrom(other.musicLevel);
      }
      return this;
    }

    @Override
    public MusicRhythmDataScRsp mergeFrom(final MusicRhythmDataScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCurSongId()) {
        setCurSongId(other.curSongId);
      }
      if (other.hasCurLevelId()) {
        setCurLevelId(other.curLevelId);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasShowHint()) {
        setShowHint(other.showHint);
      }
      if (other.hasUnlockPhaseList()) {
        getMutableUnlockPhaseList().addAll(other.unlockPhaseList);
      }
      if (other.hasUnlockTrackList()) {
        getMutableUnlockTrackList().addAll(other.unlockTrackList);
      }
      if (other.hasUnlockSongList()) {
        getMutableUnlockSongList().addAll(other.unlockSongList);
      }
      if (other.hasMusicGroup()) {
        getMutableMusicGroup().addAll(other.musicGroup);
      }
      if (other.hasMusicLevel()) {
        getMutableMusicLevel().addAll(other.musicLevel);
      }
      return this;
    }

    @Override
    public MusicRhythmDataScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curSongId = 0;
      curLevelId = 0;
      retcode = 0;
      showHint = false;
      unlockPhaseList.clear();
      unlockTrackList.clear();
      unlockSongList.clear();
      musicGroup.clear();
      musicLevel.clear();
      return this;
    }

    @Override
    public MusicRhythmDataScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      unlockPhaseList.clear();
      unlockTrackList.clear();
      unlockSongList.clear();
      musicGroup.clearQuick();
      musicLevel.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MusicRhythmDataScRsp)) {
        return false;
      }
      MusicRhythmDataScRsp other = (MusicRhythmDataScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasCurSongId() || curSongId == other.curSongId)
        && (!hasCurLevelId() || curLevelId == other.curLevelId)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasShowHint() || showHint == other.showHint)
        && (!hasUnlockPhaseList() || unlockPhaseList.equals(other.unlockPhaseList))
        && (!hasUnlockTrackList() || unlockTrackList.equals(other.unlockTrackList))
        && (!hasUnlockSongList() || unlockSongList.equals(other.unlockSongList))
        && (!hasMusicGroup() || musicGroup.equals(other.musicGroup))
        && (!hasMusicLevel() || musicLevel.equals(other.musicLevel));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(curSongId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(curLevelId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 48);
        output.writeBoolNoTag(showHint);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < unlockPhaseList.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(unlockPhaseList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < unlockTrackList.length(); i++) {
          output.writeRawByte((byte) 64);
          output.writeUInt32NoTag(unlockTrackList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < unlockSongList.length(); i++) {
          output.writeRawByte((byte) 120);
          output.writeUInt32NoTag(unlockSongList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000080) != 0) {
        for (int i = 0; i < musicGroup.length(); i++) {
          output.writeRawByte((byte) 10);
          output.writeMessageNoTag(musicGroup.get(i));
        }
      }
      if ((bitField0_ & 0x00000100) != 0) {
        for (int i = 0; i < musicLevel.length(); i++) {
          output.writeRawByte((byte) 106);
          output.writeMessageNoTag(musicLevel.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curSongId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curLevelId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * unlockPhaseList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(unlockPhaseList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * unlockTrackList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(unlockTrackList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * unlockSongList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(unlockSongList);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += (1 * musicGroup.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(musicGroup);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += (1 * musicLevel.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(musicLevel);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MusicRhythmDataScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // curSongId
            curSongId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // curLevelId
            curLevelId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // showHint
            showHint = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // unlockPhaseList [packed=true]
            input.readPackedUInt32(unlockPhaseList, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // unlockTrackList [packed=true]
            input.readPackedUInt32(unlockTrackList, tag);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // unlockSongList [packed=true]
            input.readPackedUInt32(unlockSongList, tag);
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // musicGroup
            tag = input.readRepeatedMessage(musicGroup, tag);
            bitField0_ |= 0x00000080;
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // musicLevel
            tag = input.readRepeatedMessage(musicLevel, tag);
            bitField0_ |= 0x00000100;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 40: {
            // unlockPhaseList [packed=false]
            tag = input.readRepeatedUInt32(unlockPhaseList, tag);
            bitField0_ |= 0x00000010;
            break;
          }
          case 64: {
            // unlockTrackList [packed=false]
            tag = input.readRepeatedUInt32(unlockTrackList, tag);
            bitField0_ |= 0x00000020;
            break;
          }
          case 120: {
            // unlockSongList [packed=false]
            tag = input.readRepeatedUInt32(unlockSongList, tag);
            bitField0_ |= 0x00000040;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.curSongId, curSongId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.curLevelId, curLevelId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.showHint, showHint);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.unlockPhaseList, unlockPhaseList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedUInt32(FieldNames.unlockTrackList, unlockTrackList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedUInt32(FieldNames.unlockSongList, unlockSongList);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRepeatedMessage(FieldNames.musicGroup, musicGroup);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRepeatedMessage(FieldNames.musicLevel, musicLevel);
      }
      output.endObject();
    }

    @Override
    public MusicRhythmDataScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -220673168: {
            if (input.isAtField(FieldNames.curSongId)) {
              if (!input.trySkipNullValue()) {
                curSongId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -447422113:
          case 1430531797: {
            if (input.isAtField(FieldNames.curLevelId)) {
              if (!input.trySkipNullValue()) {
                curLevelId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -339187932:
          case -1903684983: {
            if (input.isAtField(FieldNames.showHint)) {
              if (!input.trySkipNullValue()) {
                showHint = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 554640853:
          case 1145641149: {
            if (input.isAtField(FieldNames.unlockPhaseList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(unlockPhaseList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1710466469:
          case -1678470419: {
            if (input.isAtField(FieldNames.unlockTrackList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(unlockTrackList);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1428178615:
          case 1515974221: {
            if (input.isAtField(FieldNames.unlockSongList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(unlockSongList);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -802216102:
          case 1578129381: {
            if (input.isAtField(FieldNames.musicGroup)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(musicGroup);
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -797979553:
          case 1582365930: {
            if (input.isAtField(FieldNames.musicLevel)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(musicLevel);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MusicRhythmDataScRsp clone() {
      return new MusicRhythmDataScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MusicRhythmDataScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MusicRhythmDataScRsp(), data).checkInitialized();
    }

    public static MusicRhythmDataScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MusicRhythmDataScRsp(), input).checkInitialized();
    }

    public static MusicRhythmDataScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MusicRhythmDataScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating MusicRhythmDataScRsp messages
     */
    public static MessageFactory<MusicRhythmDataScRsp> getFactory() {
      return MusicRhythmDataScRspFactory.INSTANCE;
    }

    private enum MusicRhythmDataScRspFactory implements MessageFactory<MusicRhythmDataScRsp> {
      INSTANCE;

      @Override
      public MusicRhythmDataScRsp create() {
        return MusicRhythmDataScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName curSongId = FieldName.forField("curSongId");

      static final FieldName curLevelId = FieldName.forField("curLevelId", "cur_level_id");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName showHint = FieldName.forField("showHint", "show_hint");

      static final FieldName unlockPhaseList = FieldName.forField("unlockPhaseList", "unlock_phase_list");

      static final FieldName unlockTrackList = FieldName.forField("unlockTrackList", "unlock_track_list");

      static final FieldName unlockSongList = FieldName.forField("unlockSongList", "unlock_song_list");

      static final FieldName musicGroup = FieldName.forField("musicGroup", "music_group");

      static final FieldName musicLevel = FieldName.forField("musicLevel", "music_level");
    }
  }
}
