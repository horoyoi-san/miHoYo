// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChallengeCurBuffInfoOuterClass {
  /**
   * Protobuf type {@code ChallengeCurBuffInfo}
   */
  public static final class ChallengeCurBuffInfo extends ProtoMessage<ChallengeCurBuffInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .ChallengeBossBuffList cur_boss_buffs = 13;</code>
     */
    private final ChallengeBossBuffListOuterClass.ChallengeBossBuffList curBossBuffs = ChallengeBossBuffListOuterClass.ChallengeBossBuffList.newInstance();

    /**
     * <code>optional .ChallengeStoryBuffList cur_story_buffs = 15;</code>
     */
    private final ChallengeStoryBuffListOuterClass.ChallengeStoryBuffList curStoryBuffs = ChallengeStoryBuffListOuterClass.ChallengeStoryBuffList.newInstance();

    private ChallengeCurBuffInfo() {
    }

    /**
     * @return a new empty instance of {@code ChallengeCurBuffInfo}
     */
    public static ChallengeCurBuffInfo newInstance() {
      return new ChallengeCurBuffInfo();
    }

    public boolean hasChallengeInfoCase() {
      return (((bitField0_ & 0x00000003)) != 0);
    }

    public ChallengeCurBuffInfo clearChallengeInfoCase() {
      if (hasChallengeInfoCase()) {
        clearCurBossBuffs();
        clearCurStoryBuffs();
      }
      return this;
    }

    private void clearChallengeInfoCaseOtherCurBossBuffs() {
      if ((((bitField0_ & 0x00000002)) != 0)) {
        clearCurStoryBuffs();
      }
    }

    private void clearChallengeInfoCaseOtherCurStoryBuffs() {
      if ((((bitField0_ & 0x00000001)) != 0)) {
        clearCurBossBuffs();
      }
    }

    /**
     * <code>optional .ChallengeBossBuffList cur_boss_buffs = 13;</code>
     * @return whether the curBossBuffs field is set
     */
    public boolean hasCurBossBuffs() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .ChallengeBossBuffList cur_boss_buffs = 13;</code>
     * @return this
     */
    public ChallengeCurBuffInfo clearCurBossBuffs() {
      bitField0_ &= ~0x00000001;
      curBossBuffs.clear();
      return this;
    }

    /**
     * <code>optional .ChallengeBossBuffList cur_boss_buffs = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCurBossBuffs()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeBossBuffListOuterClass.ChallengeBossBuffList getCurBossBuffs() {
      return curBossBuffs;
    }

    /**
     * <code>optional .ChallengeBossBuffList cur_boss_buffs = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeBossBuffListOuterClass.ChallengeBossBuffList getMutableCurBossBuffs() {
      clearChallengeInfoCaseOtherCurBossBuffs();
      bitField0_ |= 0x00000001;
      return curBossBuffs;
    }

    /**
     * <code>optional .ChallengeBossBuffList cur_boss_buffs = 13;</code>
     * @param value the curBossBuffs to set
     * @return this
     */
    public ChallengeCurBuffInfo setCurBossBuffs(
        final ChallengeBossBuffListOuterClass.ChallengeBossBuffList value) {
      clearChallengeInfoCaseOtherCurBossBuffs();
      bitField0_ |= 0x00000001;
      curBossBuffs.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChallengeStoryBuffList cur_story_buffs = 15;</code>
     * @return whether the curStoryBuffs field is set
     */
    public boolean hasCurStoryBuffs() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ChallengeStoryBuffList cur_story_buffs = 15;</code>
     * @return this
     */
    public ChallengeCurBuffInfo clearCurStoryBuffs() {
      bitField0_ &= ~0x00000002;
      curStoryBuffs.clear();
      return this;
    }

    /**
     * <code>optional .ChallengeStoryBuffList cur_story_buffs = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCurStoryBuffs()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeStoryBuffListOuterClass.ChallengeStoryBuffList getCurStoryBuffs() {
      return curStoryBuffs;
    }

    /**
     * <code>optional .ChallengeStoryBuffList cur_story_buffs = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeStoryBuffListOuterClass.ChallengeStoryBuffList getMutableCurStoryBuffs() {
      clearChallengeInfoCaseOtherCurStoryBuffs();
      bitField0_ |= 0x00000002;
      return curStoryBuffs;
    }

    /**
     * <code>optional .ChallengeStoryBuffList cur_story_buffs = 15;</code>
     * @param value the curStoryBuffs to set
     * @return this
     */
    public ChallengeCurBuffInfo setCurStoryBuffs(
        final ChallengeStoryBuffListOuterClass.ChallengeStoryBuffList value) {
      clearChallengeInfoCaseOtherCurStoryBuffs();
      bitField0_ |= 0x00000002;
      curStoryBuffs.copyFrom(value);
      return this;
    }

    @Override
    public ChallengeCurBuffInfo copyFrom(final ChallengeCurBuffInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        curBossBuffs.copyFrom(other.curBossBuffs);
        curStoryBuffs.copyFrom(other.curStoryBuffs);
      }
      return this;
    }

    @Override
    public ChallengeCurBuffInfo mergeFrom(final ChallengeCurBuffInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCurBossBuffs()) {
        getMutableCurBossBuffs().mergeFrom(other.curBossBuffs);
      }
      if (other.hasCurStoryBuffs()) {
        getMutableCurStoryBuffs().mergeFrom(other.curStoryBuffs);
      }
      return this;
    }

    @Override
    public ChallengeCurBuffInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curBossBuffs.clear();
      curStoryBuffs.clear();
      return this;
    }

    @Override
    public ChallengeCurBuffInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curBossBuffs.clearQuick();
      curStoryBuffs.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeCurBuffInfo)) {
        return false;
      }
      ChallengeCurBuffInfo other = (ChallengeCurBuffInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasCurBossBuffs() || curBossBuffs.equals(other.curBossBuffs))
        && (!hasCurStoryBuffs() || curStoryBuffs.equals(other.curStoryBuffs));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 106);
        output.writeMessageNoTag(curBossBuffs);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 122);
        output.writeMessageNoTag(curStoryBuffs);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(curBossBuffs);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(curStoryBuffs);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeCurBuffInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 106: {
            // curBossBuffs
            clearChallengeInfoCaseOtherCurBossBuffs();
            input.readMessage(curBossBuffs);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // curStoryBuffs
            clearChallengeInfoCaseOtherCurStoryBuffs();
            input.readMessage(curStoryBuffs);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.curBossBuffs, curBossBuffs);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.curStoryBuffs, curStoryBuffs);
      }
      output.endObject();
    }

    @Override
    public ChallengeCurBuffInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1632186189:
          case -340377971: {
            if (input.isAtField(FieldNames.curBossBuffs)) {
              if (!input.trySkipNullValue()) {
                clearChallengeInfoCaseOtherCurBossBuffs();
                input.readMessage(curBossBuffs);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -587091733:
          case -738440393: {
            if (input.isAtField(FieldNames.curStoryBuffs)) {
              if (!input.trySkipNullValue()) {
                clearChallengeInfoCaseOtherCurStoryBuffs();
                input.readMessage(curStoryBuffs);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeCurBuffInfo clone() {
      return new ChallengeCurBuffInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeCurBuffInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeCurBuffInfo(), data).checkInitialized();
    }

    public static ChallengeCurBuffInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeCurBuffInfo(), input).checkInitialized();
    }

    public static ChallengeCurBuffInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeCurBuffInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeCurBuffInfo messages
     */
    public static MessageFactory<ChallengeCurBuffInfo> getFactory() {
      return ChallengeCurBuffInfoFactory.INSTANCE;
    }

    private enum ChallengeCurBuffInfoFactory implements MessageFactory<ChallengeCurBuffInfo> {
      INSTANCE;

      @Override
      public ChallengeCurBuffInfo create() {
        return ChallengeCurBuffInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName curBossBuffs = FieldName.forField("curBossBuffs", "cur_boss_buffs");

      static final FieldName curStoryBuffs = FieldName.forField("curStoryBuffs", "cur_story_buffs");
    }
  }
}
