// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class BattleRogueMagicUnitOuterClass {
  /**
   * Protobuf type {@code BattleRogueMagicUnit}
   */
  public static final class BattleRogueMagicUnit extends ProtoMessage<BattleRogueMagicUnit> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 unit_id = 1;</code>
     */
    private int unitId;

    /**
     * <code>optional uint32 level = 2;</code>
     */
    private int level;

    /**
     * <code>optional uint32 slot_id = 4;</code>
     */
    private int slotId;

    /**
     * <code>optional bool locked = 3;</code>
     */
    private boolean locked;

    /**
     * <code>repeated .BattleRogueMagicUnit.CounterMapEntry counter_map = 5;</code>
     */
    private final RepeatedMessage<CounterMapEntry> counterMap = RepeatedMessage.newEmptyInstance(CounterMapEntry.getFactory());

    private BattleRogueMagicUnit() {
    }

    /**
     * @return a new empty instance of {@code BattleRogueMagicUnit}
     */
    public static BattleRogueMagicUnit newInstance() {
      return new BattleRogueMagicUnit();
    }

    /**
     * <code>optional uint32 unit_id = 1;</code>
     * @return whether the unitId field is set
     */
    public boolean hasUnitId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 unit_id = 1;</code>
     * @return this
     */
    public BattleRogueMagicUnit clearUnitId() {
      bitField0_ &= ~0x00000001;
      unitId = 0;
      return this;
    }

    /**
     * <code>optional uint32 unit_id = 1;</code>
     * @return the unitId
     */
    public int getUnitId() {
      return unitId;
    }

    /**
     * <code>optional uint32 unit_id = 1;</code>
     * @param value the unitId to set
     * @return this
     */
    public BattleRogueMagicUnit setUnitId(final int value) {
      bitField0_ |= 0x00000001;
      unitId = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 2;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 level = 2;</code>
     * @return this
     */
    public BattleRogueMagicUnit clearLevel() {
      bitField0_ &= ~0x00000002;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 2;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 2;</code>
     * @param value the level to set
     * @return this
     */
    public BattleRogueMagicUnit setLevel(final int value) {
      bitField0_ |= 0x00000002;
      level = value;
      return this;
    }

    /**
     * <code>optional uint32 slot_id = 4;</code>
     * @return whether the slotId field is set
     */
    public boolean hasSlotId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 slot_id = 4;</code>
     * @return this
     */
    public BattleRogueMagicUnit clearSlotId() {
      bitField0_ &= ~0x00000004;
      slotId = 0;
      return this;
    }

    /**
     * <code>optional uint32 slot_id = 4;</code>
     * @return the slotId
     */
    public int getSlotId() {
      return slotId;
    }

    /**
     * <code>optional uint32 slot_id = 4;</code>
     * @param value the slotId to set
     * @return this
     */
    public BattleRogueMagicUnit setSlotId(final int value) {
      bitField0_ |= 0x00000004;
      slotId = value;
      return this;
    }

    /**
     * <code>optional bool locked = 3;</code>
     * @return whether the locked field is set
     */
    public boolean hasLocked() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool locked = 3;</code>
     * @return this
     */
    public BattleRogueMagicUnit clearLocked() {
      bitField0_ &= ~0x00000008;
      locked = false;
      return this;
    }

    /**
     * <code>optional bool locked = 3;</code>
     * @return the locked
     */
    public boolean getLocked() {
      return locked;
    }

    /**
     * <code>optional bool locked = 3;</code>
     * @param value the locked to set
     * @return this
     */
    public BattleRogueMagicUnit setLocked(final boolean value) {
      bitField0_ |= 0x00000008;
      locked = value;
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit.CounterMapEntry counter_map = 5;</code>
     * @return whether the counterMap field is set
     */
    public boolean hasCounterMap() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit.CounterMapEntry counter_map = 5;</code>
     * @return this
     */
    public BattleRogueMagicUnit clearCounterMap() {
      bitField0_ &= ~0x00000010;
      counterMap.clear();
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit.CounterMapEntry counter_map = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCounterMap()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<CounterMapEntry> getCounterMap() {
      return counterMap;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit.CounterMapEntry counter_map = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<CounterMapEntry> getMutableCounterMap() {
      bitField0_ |= 0x00000010;
      return counterMap;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit.CounterMapEntry counter_map = 5;</code>
     * @param value the counterMap to add
     * @return this
     */
    public BattleRogueMagicUnit addCounterMap(final CounterMapEntry value) {
      bitField0_ |= 0x00000010;
      counterMap.add(value);
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicUnit.CounterMapEntry counter_map = 5;</code>
     * @param values the counterMap to add
     * @return this
     */
    public BattleRogueMagicUnit addAllCounterMap(final CounterMapEntry... values) {
      bitField0_ |= 0x00000010;
      counterMap.addAll(values);
      return this;
    }

    @Override
    public BattleRogueMagicUnit copyFrom(final BattleRogueMagicUnit other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        unitId = other.unitId;
        level = other.level;
        slotId = other.slotId;
        locked = other.locked;
        counterMap.copyFrom(other.counterMap);
      }
      return this;
    }

    @Override
    public BattleRogueMagicUnit mergeFrom(final BattleRogueMagicUnit other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasUnitId()) {
        setUnitId(other.unitId);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasSlotId()) {
        setSlotId(other.slotId);
      }
      if (other.hasLocked()) {
        setLocked(other.locked);
      }
      if (other.hasCounterMap()) {
        getMutableCounterMap().addAll(other.counterMap);
      }
      return this;
    }

    @Override
    public BattleRogueMagicUnit clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      unitId = 0;
      level = 0;
      slotId = 0;
      locked = false;
      counterMap.clear();
      return this;
    }

    @Override
    public BattleRogueMagicUnit clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      counterMap.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof BattleRogueMagicUnit)) {
        return false;
      }
      BattleRogueMagicUnit other = (BattleRogueMagicUnit) o;
      return bitField0_ == other.bitField0_
        && (!hasUnitId() || unitId == other.unitId)
        && (!hasLevel() || level == other.level)
        && (!hasSlotId() || slotId == other.slotId)
        && (!hasLocked() || locked == other.locked)
        && (!hasCounterMap() || counterMap.equals(other.counterMap));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(unitId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(slotId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 24);
        output.writeBoolNoTag(locked);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < counterMap.length(); i++) {
          output.writeRawByte((byte) 42);
          output.writeMessageNoTag(counterMap.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(unitId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(slotId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * counterMap.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(counterMap);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public BattleRogueMagicUnit mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // unitId
            unitId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // slotId
            slotId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 24) {
              break;
            }
          }
          case 24: {
            // locked
            locked = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // counterMap
            tag = input.readRepeatedMessage(counterMap, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.unitId, unitId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.slotId, slotId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.locked, locked);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.counterMap, counterMap);
      }
      output.endObject();
    }

    @Override
    public BattleRogueMagicUnit mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -840527425:
          case -286525002: {
            if (input.isAtField(FieldNames.unitId)) {
              if (!input.trySkipNullValue()) {
                unitId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -899454023:
          case -2113249540: {
            if (input.isAtField(FieldNames.slotId)) {
              if (!input.trySkipNullValue()) {
                slotId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1097452790: {
            if (input.isAtField(FieldNames.locked)) {
              if (!input.trySkipNullValue()) {
                locked = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1029683776:
          case -1854878567: {
            if (input.isAtField(FieldNames.counterMap)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(counterMap);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public BattleRogueMagicUnit clone() {
      return new BattleRogueMagicUnit().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static BattleRogueMagicUnit parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicUnit(), data).checkInitialized();
    }

    public static BattleRogueMagicUnit parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicUnit(), input).checkInitialized();
    }

    public static BattleRogueMagicUnit parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicUnit(), input).checkInitialized();
    }

    /**
     * @return factory for creating BattleRogueMagicUnit messages
     */
    public static MessageFactory<BattleRogueMagicUnit> getFactory() {
      return BattleRogueMagicUnitFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code CounterMapEntry}
     */
    public static final class CounterMapEntry extends ProtoMessage<CounterMapEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 key = 1;</code>
       */
      private int key;

      /**
       * <code>optional uint32 value = 2;</code>
       */
      private int value_;

      private CounterMapEntry() {
      }

      /**
       * @return a new empty instance of {@code CounterMapEntry}
       */
      public static CounterMapEntry newInstance() {
        return new CounterMapEntry();
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return this
       */
      public CounterMapEntry clearKey() {
        bitField0_ &= ~0x00000001;
        key = 0;
        return this;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @return the key
       */
      public int getKey() {
        return key;
      }

      /**
       * <code>optional uint32 key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public CounterMapEntry setKey(final int value) {
        bitField0_ |= 0x00000001;
        key = value;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return this
       */
      public CounterMapEntry clearValue() {
        bitField0_ &= ~0x00000002;
        value_ = 0;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return the value_
       */
      public int getValue() {
        return value_;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public CounterMapEntry setValue(final int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        return this;
      }

      @Override
      public CounterMapEntry copyFrom(final CounterMapEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          key = other.key;
          value_ = other.value_;
        }
        return this;
      }

      @Override
      public CounterMapEntry mergeFrom(final CounterMapEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasKey()) {
          setKey(other.key);
        }
        if (other.hasValue()) {
          setValue(other.value_);
        }
        return this;
      }

      @Override
      public CounterMapEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key = 0;
        value_ = 0;
        return this;
      }

      @Override
      public CounterMapEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof CounterMapEntry)) {
          return false;
        }
        CounterMapEntry other = (CounterMapEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasKey() || key == other.key)
          && (!hasValue() || value_ == other.value_);
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(value_);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(value_);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public CounterMapEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 8: {
              // key
              key = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 16) {
                break;
              }
            }
            case 16: {
              // value_
              value_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.key, key);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeUInt32(FieldNames.value_, value_);
        }
        output.endObject();
      }

      @Override
      public CounterMapEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  key = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  value_ = input.readUInt32();
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public CounterMapEntry clone() {
        return new CounterMapEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static CounterMapEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new CounterMapEntry(), data).checkInitialized();
      }

      public static CounterMapEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new CounterMapEntry(), input).checkInitialized();
      }

      public static CounterMapEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new CounterMapEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating CounterMapEntry messages
       */
      public static MessageFactory<CounterMapEntry> getFactory() {
        return CounterMapEntryFactory.INSTANCE;
      }

      private enum CounterMapEntryFactory implements MessageFactory<CounterMapEntry> {
        INSTANCE;

        @Override
        public CounterMapEntry create() {
          return CounterMapEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName key = FieldName.forField("key");

        static final FieldName value_ = FieldName.forField("value");
      }
    }

    private enum BattleRogueMagicUnitFactory implements MessageFactory<BattleRogueMagicUnit> {
      INSTANCE;

      @Override
      public BattleRogueMagicUnit create() {
        return BattleRogueMagicUnit.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName unitId = FieldName.forField("unitId", "unit_id");

      static final FieldName level = FieldName.forField("level");

      static final FieldName slotId = FieldName.forField("slotId", "slot_id");

      static final FieldName locked = FieldName.forField("locked");

      static final FieldName counterMap = FieldName.forField("counterMap", "counter_map");
    }
  }
}
