// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class GetSceneMapInfoScRspOuterClass {
  /**
   * Protobuf type {@code GetSceneMapInfoScRsp}
   */
  public static final class GetSceneMapInfoScRsp extends ProtoMessage<GetSceneMapInfoScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 cur_map_entry_id = 10;</code>
     */
    private int curMapEntryId;

    /**
     * <code>optional uint32 retcode = 13;</code>
     */
    private int retcode;

    /**
     * <code>optional uint32 map_entry_id = 14;</code>
     */
    private int mapEntryId;

    /**
     * <code>optional bool is_bool = 7;</code>
     */
    private boolean isBool;

    /**
     * <code>repeated .MazeMapData map_list = 12;</code>
     */
    private final RepeatedMessage<MazeMapDataOuterClass.MazeMapData> mapList = RepeatedMessage.newEmptyInstance(MazeMapDataOuterClass.MazeMapData.getFactory());

    private GetSceneMapInfoScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetSceneMapInfoScRsp}
     */
    public static GetSceneMapInfoScRsp newInstance() {
      return new GetSceneMapInfoScRsp();
    }

    /**
     * <code>optional uint32 cur_map_entry_id = 10;</code>
     * @return whether the curMapEntryId field is set
     */
    public boolean hasCurMapEntryId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 cur_map_entry_id = 10;</code>
     * @return this
     */
    public GetSceneMapInfoScRsp clearCurMapEntryId() {
      bitField0_ &= ~0x00000001;
      curMapEntryId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_map_entry_id = 10;</code>
     * @return the curMapEntryId
     */
    public int getCurMapEntryId() {
      return curMapEntryId;
    }

    /**
     * <code>optional uint32 cur_map_entry_id = 10;</code>
     * @param value the curMapEntryId to set
     * @return this
     */
    public GetSceneMapInfoScRsp setCurMapEntryId(final int value) {
      bitField0_ |= 0x00000001;
      curMapEntryId = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 13;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 retcode = 13;</code>
     * @return this
     */
    public GetSceneMapInfoScRsp clearRetcode() {
      bitField0_ &= ~0x00000002;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 13;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 13;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetSceneMapInfoScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000002;
      retcode = value;
      return this;
    }

    /**
     * <code>optional uint32 map_entry_id = 14;</code>
     * @return whether the mapEntryId field is set
     */
    public boolean hasMapEntryId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 map_entry_id = 14;</code>
     * @return this
     */
    public GetSceneMapInfoScRsp clearMapEntryId() {
      bitField0_ &= ~0x00000004;
      mapEntryId = 0;
      return this;
    }

    /**
     * <code>optional uint32 map_entry_id = 14;</code>
     * @return the mapEntryId
     */
    public int getMapEntryId() {
      return mapEntryId;
    }

    /**
     * <code>optional uint32 map_entry_id = 14;</code>
     * @param value the mapEntryId to set
     * @return this
     */
    public GetSceneMapInfoScRsp setMapEntryId(final int value) {
      bitField0_ |= 0x00000004;
      mapEntryId = value;
      return this;
    }

    /**
     * <code>optional bool is_bool = 7;</code>
     * @return whether the isBool field is set
     */
    public boolean hasIsBool() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool is_bool = 7;</code>
     * @return this
     */
    public GetSceneMapInfoScRsp clearIsBool() {
      bitField0_ &= ~0x00000008;
      isBool = false;
      return this;
    }

    /**
     * <code>optional bool is_bool = 7;</code>
     * @return the isBool
     */
    public boolean getIsBool() {
      return isBool;
    }

    /**
     * <code>optional bool is_bool = 7;</code>
     * @param value the isBool to set
     * @return this
     */
    public GetSceneMapInfoScRsp setIsBool(final boolean value) {
      bitField0_ |= 0x00000008;
      isBool = value;
      return this;
    }

    /**
     * <code>repeated .MazeMapData map_list = 12;</code>
     * @return whether the mapList field is set
     */
    public boolean hasMapList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .MazeMapData map_list = 12;</code>
     * @return this
     */
    public GetSceneMapInfoScRsp clearMapList() {
      bitField0_ &= ~0x00000010;
      mapList.clear();
      return this;
    }

    /**
     * <code>repeated .MazeMapData map_list = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMapList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MazeMapDataOuterClass.MazeMapData> getMapList() {
      return mapList;
    }

    /**
     * <code>repeated .MazeMapData map_list = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MazeMapDataOuterClass.MazeMapData> getMutableMapList() {
      bitField0_ |= 0x00000010;
      return mapList;
    }

    /**
     * <code>repeated .MazeMapData map_list = 12;</code>
     * @param value the mapList to add
     * @return this
     */
    public GetSceneMapInfoScRsp addMapList(final MazeMapDataOuterClass.MazeMapData value) {
      bitField0_ |= 0x00000010;
      mapList.add(value);
      return this;
    }

    /**
     * <code>repeated .MazeMapData map_list = 12;</code>
     * @param values the mapList to add
     * @return this
     */
    public GetSceneMapInfoScRsp addAllMapList(final MazeMapDataOuterClass.MazeMapData... values) {
      bitField0_ |= 0x00000010;
      mapList.addAll(values);
      return this;
    }

    @Override
    public GetSceneMapInfoScRsp copyFrom(final GetSceneMapInfoScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        curMapEntryId = other.curMapEntryId;
        retcode = other.retcode;
        mapEntryId = other.mapEntryId;
        isBool = other.isBool;
        mapList.copyFrom(other.mapList);
      }
      return this;
    }

    @Override
    public GetSceneMapInfoScRsp mergeFrom(final GetSceneMapInfoScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCurMapEntryId()) {
        setCurMapEntryId(other.curMapEntryId);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasMapEntryId()) {
        setMapEntryId(other.mapEntryId);
      }
      if (other.hasIsBool()) {
        setIsBool(other.isBool);
      }
      if (other.hasMapList()) {
        getMutableMapList().addAll(other.mapList);
      }
      return this;
    }

    @Override
    public GetSceneMapInfoScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      curMapEntryId = 0;
      retcode = 0;
      mapEntryId = 0;
      isBool = false;
      mapList.clear();
      return this;
    }

    @Override
    public GetSceneMapInfoScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mapList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetSceneMapInfoScRsp)) {
        return false;
      }
      GetSceneMapInfoScRsp other = (GetSceneMapInfoScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasCurMapEntryId() || curMapEntryId == other.curMapEntryId)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasMapEntryId() || mapEntryId == other.mapEntryId)
        && (!hasIsBool() || isBool == other.isBool)
        && (!hasMapList() || mapList.equals(other.mapList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(curMapEntryId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(mapEntryId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 56);
        output.writeBoolNoTag(isBool);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < mapList.length(); i++) {
          output.writeRawByte((byte) 98);
          output.writeMessageNoTag(mapList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curMapEntryId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(mapEntryId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * mapList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(mapList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetSceneMapInfoScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // curMapEntryId
            curMapEntryId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // mapEntryId
            mapEntryId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // isBool
            isBool = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // mapList
            tag = input.readRepeatedMessage(mapList, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.curMapEntryId, curMapEntryId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.mapEntryId, mapEntryId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.isBool, isBool);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.mapList, mapList);
      }
      output.endObject();
    }

    @Override
    public GetSceneMapInfoScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 764919441:
          case 2115673898: {
            if (input.isAtField(FieldNames.curMapEntryId)) {
              if (!input.trySkipNullValue()) {
                curMapEntryId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1475203023:
          case 436670347: {
            if (input.isAtField(FieldNames.mapEntryId)) {
              if (!input.trySkipNullValue()) {
                mapEntryId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1180625100:
          case 2081722591: {
            if (input.isAtField(FieldNames.isBool)) {
              if (!input.trySkipNullValue()) {
                isBool = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 836484122:
          case 178830753: {
            if (input.isAtField(FieldNames.mapList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(mapList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetSceneMapInfoScRsp clone() {
      return new GetSceneMapInfoScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetSceneMapInfoScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetSceneMapInfoScRsp(), data).checkInitialized();
    }

    public static GetSceneMapInfoScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetSceneMapInfoScRsp(), input).checkInitialized();
    }

    public static GetSceneMapInfoScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetSceneMapInfoScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetSceneMapInfoScRsp messages
     */
    public static MessageFactory<GetSceneMapInfoScRsp> getFactory() {
      return GetSceneMapInfoScRspFactory.INSTANCE;
    }

    private enum GetSceneMapInfoScRspFactory implements MessageFactory<GetSceneMapInfoScRsp> {
      INSTANCE;

      @Override
      public GetSceneMapInfoScRsp create() {
        return GetSceneMapInfoScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName curMapEntryId = FieldName.forField("curMapEntryId", "cur_map_entry_id");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName mapEntryId = FieldName.forField("mapEntryId", "map_entry_id");

      static final FieldName isBool = FieldName.forField("isBool", "is_bool");

      static final FieldName mapList = FieldName.forField("mapList", "map_list");
    }
  }
}
