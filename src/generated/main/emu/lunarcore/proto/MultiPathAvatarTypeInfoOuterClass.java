// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class MultiPathAvatarTypeInfoOuterClass {
  /**
   * Protobuf type {@code MultiPathAvatarTypeInfo}
   */
  public static final class MultiPathAvatarTypeInfo extends ProtoMessage<MultiPathAvatarTypeInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 rank = 1;</code>
     */
    private int rank;

    /**
     * <code>optional uint32 path_equipment_id = 14;</code>
     */
    private int pathEquipmentId;

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 2;</code>
     */
    private int avatarId;

    /**
     * <code>repeated .EquipRelic equip_relic_list = 9;</code>
     */
    private final RepeatedMessage<EquipRelicOuterClass.EquipRelic> equipRelicList = RepeatedMessage.newEmptyInstance(EquipRelicOuterClass.EquipRelic.getFactory());

    /**
     * <code>repeated .AvatarSkillTree skill_tree_list = 12;</code>
     */
    private final RepeatedMessage<AvatarSkillTreeOuterClass.AvatarSkillTree> skillTreeList = RepeatedMessage.newEmptyInstance(AvatarSkillTreeOuterClass.AvatarSkillTree.getFactory());

    private MultiPathAvatarTypeInfo() {
    }

    /**
     * @return a new empty instance of {@code MultiPathAvatarTypeInfo}
     */
    public static MultiPathAvatarTypeInfo newInstance() {
      return new MultiPathAvatarTypeInfo();
    }

    /**
     * <code>optional uint32 rank = 1;</code>
     * @return whether the rank field is set
     */
    public boolean hasRank() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 rank = 1;</code>
     * @return this
     */
    public MultiPathAvatarTypeInfo clearRank() {
      bitField0_ &= ~0x00000001;
      rank = 0;
      return this;
    }

    /**
     * <code>optional uint32 rank = 1;</code>
     * @return the rank
     */
    public int getRank() {
      return rank;
    }

    /**
     * <code>optional uint32 rank = 1;</code>
     * @param value the rank to set
     * @return this
     */
    public MultiPathAvatarTypeInfo setRank(final int value) {
      bitField0_ |= 0x00000001;
      rank = value;
      return this;
    }

    /**
     * <code>optional uint32 path_equipment_id = 14;</code>
     * @return whether the pathEquipmentId field is set
     */
    public boolean hasPathEquipmentId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 path_equipment_id = 14;</code>
     * @return this
     */
    public MultiPathAvatarTypeInfo clearPathEquipmentId() {
      bitField0_ &= ~0x00000002;
      pathEquipmentId = 0;
      return this;
    }

    /**
     * <code>optional uint32 path_equipment_id = 14;</code>
     * @return the pathEquipmentId
     */
    public int getPathEquipmentId() {
      return pathEquipmentId;
    }

    /**
     * <code>optional uint32 path_equipment_id = 14;</code>
     * @param value the pathEquipmentId to set
     * @return this
     */
    public MultiPathAvatarTypeInfo setPathEquipmentId(final int value) {
      bitField0_ |= 0x00000002;
      pathEquipmentId = value;
      return this;
    }

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 2;</code>
     * @return whether the avatarId field is set
     */
    public boolean hasAvatarId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 2;</code>
     * @return this
     */
    public MultiPathAvatarTypeInfo clearAvatarId() {
      bitField0_ &= ~0x00000004;
      avatarId = 0;
      return this;
    }

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 2;</code>
     * @return the avatarId
     */
    public MultiPathAvatarTypeOuterClass.MultiPathAvatarType getAvatarId() {
      return MultiPathAvatarTypeOuterClass.MultiPathAvatarType.forNumber(avatarId);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link MultiPathAvatarTypeInfo#getAvatarId()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getAvatarIdValue() {
      return avatarId;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link MultiPathAvatarTypeOuterClass.MultiPathAvatarType}. Setting an invalid value
     * can cause {@link MultiPathAvatarTypeInfo#getAvatarId()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public MultiPathAvatarTypeInfo setAvatarIdValue(final int value) {
      bitField0_ |= 0x00000004;
      avatarId = value;
      return this;
    }

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 2;</code>
     * @param value the avatarId to set
     * @return this
     */
    public MultiPathAvatarTypeInfo setAvatarId(
        final MultiPathAvatarTypeOuterClass.MultiPathAvatarType value) {
      bitField0_ |= 0x00000004;
      avatarId = value.getNumber();
      return this;
    }

    /**
     * <code>repeated .EquipRelic equip_relic_list = 9;</code>
     * @return whether the equipRelicList field is set
     */
    public boolean hasEquipRelicList() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .EquipRelic equip_relic_list = 9;</code>
     * @return this
     */
    public MultiPathAvatarTypeInfo clearEquipRelicList() {
      bitField0_ &= ~0x00000008;
      equipRelicList.clear();
      return this;
    }

    /**
     * <code>repeated .EquipRelic equip_relic_list = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEquipRelicList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<EquipRelicOuterClass.EquipRelic> getEquipRelicList() {
      return equipRelicList;
    }

    /**
     * <code>repeated .EquipRelic equip_relic_list = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<EquipRelicOuterClass.EquipRelic> getMutableEquipRelicList() {
      bitField0_ |= 0x00000008;
      return equipRelicList;
    }

    /**
     * <code>repeated .EquipRelic equip_relic_list = 9;</code>
     * @param value the equipRelicList to add
     * @return this
     */
    public MultiPathAvatarTypeInfo addEquipRelicList(final EquipRelicOuterClass.EquipRelic value) {
      bitField0_ |= 0x00000008;
      equipRelicList.add(value);
      return this;
    }

    /**
     * <code>repeated .EquipRelic equip_relic_list = 9;</code>
     * @param values the equipRelicList to add
     * @return this
     */
    public MultiPathAvatarTypeInfo addAllEquipRelicList(
        final EquipRelicOuterClass.EquipRelic... values) {
      bitField0_ |= 0x00000008;
      equipRelicList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .AvatarSkillTree skill_tree_list = 12;</code>
     * @return whether the skillTreeList field is set
     */
    public boolean hasSkillTreeList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .AvatarSkillTree skill_tree_list = 12;</code>
     * @return this
     */
    public MultiPathAvatarTypeInfo clearSkillTreeList() {
      bitField0_ &= ~0x00000010;
      skillTreeList.clear();
      return this;
    }

    /**
     * <code>repeated .AvatarSkillTree skill_tree_list = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSkillTreeList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<AvatarSkillTreeOuterClass.AvatarSkillTree> getSkillTreeList() {
      return skillTreeList;
    }

    /**
     * <code>repeated .AvatarSkillTree skill_tree_list = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<AvatarSkillTreeOuterClass.AvatarSkillTree> getMutableSkillTreeList() {
      bitField0_ |= 0x00000010;
      return skillTreeList;
    }

    /**
     * <code>repeated .AvatarSkillTree skill_tree_list = 12;</code>
     * @param value the skillTreeList to add
     * @return this
     */
    public MultiPathAvatarTypeInfo addSkillTreeList(
        final AvatarSkillTreeOuterClass.AvatarSkillTree value) {
      bitField0_ |= 0x00000010;
      skillTreeList.add(value);
      return this;
    }

    /**
     * <code>repeated .AvatarSkillTree skill_tree_list = 12;</code>
     * @param values the skillTreeList to add
     * @return this
     */
    public MultiPathAvatarTypeInfo addAllSkillTreeList(
        final AvatarSkillTreeOuterClass.AvatarSkillTree... values) {
      bitField0_ |= 0x00000010;
      skillTreeList.addAll(values);
      return this;
    }

    @Override
    public MultiPathAvatarTypeInfo copyFrom(final MultiPathAvatarTypeInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        rank = other.rank;
        pathEquipmentId = other.pathEquipmentId;
        avatarId = other.avatarId;
        equipRelicList.copyFrom(other.equipRelicList);
        skillTreeList.copyFrom(other.skillTreeList);
      }
      return this;
    }

    @Override
    public MultiPathAvatarTypeInfo mergeFrom(final MultiPathAvatarTypeInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRank()) {
        setRank(other.rank);
      }
      if (other.hasPathEquipmentId()) {
        setPathEquipmentId(other.pathEquipmentId);
      }
      if (other.hasAvatarId()) {
        setAvatarIdValue(other.avatarId);
      }
      if (other.hasEquipRelicList()) {
        getMutableEquipRelicList().addAll(other.equipRelicList);
      }
      if (other.hasSkillTreeList()) {
        getMutableSkillTreeList().addAll(other.skillTreeList);
      }
      return this;
    }

    @Override
    public MultiPathAvatarTypeInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      rank = 0;
      pathEquipmentId = 0;
      avatarId = 0;
      equipRelicList.clear();
      skillTreeList.clear();
      return this;
    }

    @Override
    public MultiPathAvatarTypeInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      equipRelicList.clearQuick();
      skillTreeList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MultiPathAvatarTypeInfo)) {
        return false;
      }
      MultiPathAvatarTypeInfo other = (MultiPathAvatarTypeInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasRank() || rank == other.rank)
        && (!hasPathEquipmentId() || pathEquipmentId == other.pathEquipmentId)
        && (!hasAvatarId() || avatarId == other.avatarId)
        && (!hasEquipRelicList() || equipRelicList.equals(other.equipRelicList))
        && (!hasSkillTreeList() || skillTreeList.equals(other.skillTreeList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(rank);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(pathEquipmentId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 16);
        output.writeEnumNoTag(avatarId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < equipRelicList.length(); i++) {
          output.writeRawByte((byte) 74);
          output.writeMessageNoTag(equipRelicList.get(i));
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < skillTreeList.length(); i++) {
          output.writeRawByte((byte) 98);
          output.writeMessageNoTag(skillTreeList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(rank);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(pathEquipmentId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(avatarId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * equipRelicList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(equipRelicList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * skillTreeList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(skillTreeList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MultiPathAvatarTypeInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // rank
            rank = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // pathEquipmentId
            pathEquipmentId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // avatarId
            final int value = input.readInt32();
            if (MultiPathAvatarTypeOuterClass.MultiPathAvatarType.forNumber(value) != null) {
              avatarId = value;
              bitField0_ |= 0x00000004;
            }
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // equipRelicList
            tag = input.readRepeatedMessage(equipRelicList, tag);
            bitField0_ |= 0x00000008;
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // skillTreeList
            tag = input.readRepeatedMessage(skillTreeList, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.rank, rank);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.pathEquipmentId, pathEquipmentId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeEnum(FieldNames.avatarId, avatarId, MultiPathAvatarTypeOuterClass.MultiPathAvatarType.converter());
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.equipRelicList, equipRelicList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.skillTreeList, skillTreeList);
      }
      output.endObject();
    }

    @Override
    public MultiPathAvatarTypeInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 3492908: {
            if (input.isAtField(FieldNames.rank)) {
              if (!input.trySkipNullValue()) {
                rank = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1371565540:
          case -1584422074: {
            if (input.isAtField(FieldNames.pathEquipmentId)) {
              if (!input.trySkipNullValue()) {
                pathEquipmentId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1787287636:
          case -428636735: {
            if (input.isAtField(FieldNames.avatarId)) {
              if (!input.trySkipNullValue()) {
                final MultiPathAvatarTypeOuterClass.MultiPathAvatarType value = input.readEnum(MultiPathAvatarTypeOuterClass.MultiPathAvatarType.converter());
                if (value != null) {
                  avatarId = value.getNumber();
                  bitField0_ |= 0x00000004;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1578968161:
          case -795441831: {
            if (input.isAtField(FieldNames.equipRelicList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(equipRelicList);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1614407373:
          case 1368677425: {
            if (input.isAtField(FieldNames.skillTreeList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(skillTreeList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MultiPathAvatarTypeInfo clone() {
      return new MultiPathAvatarTypeInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MultiPathAvatarTypeInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MultiPathAvatarTypeInfo(), data).checkInitialized();
    }

    public static MultiPathAvatarTypeInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MultiPathAvatarTypeInfo(), input).checkInitialized();
    }

    public static MultiPathAvatarTypeInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MultiPathAvatarTypeInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating MultiPathAvatarTypeInfo messages
     */
    public static MessageFactory<MultiPathAvatarTypeInfo> getFactory() {
      return MultiPathAvatarTypeInfoFactory.INSTANCE;
    }

    private enum MultiPathAvatarTypeInfoFactory implements MessageFactory<MultiPathAvatarTypeInfo> {
      INSTANCE;

      @Override
      public MultiPathAvatarTypeInfo create() {
        return MultiPathAvatarTypeInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName rank = FieldName.forField("rank");

      static final FieldName pathEquipmentId = FieldName.forField("pathEquipmentId", "path_equipment_id");

      static final FieldName avatarId = FieldName.forField("avatarId", "avatar_id");

      static final FieldName equipRelicList = FieldName.forField("equipRelicList", "equip_relic_list");

      static final FieldName skillTreeList = FieldName.forField("skillTreeList", "skill_tree_list");
    }
  }
}
