// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class EraFlipperDataChangeScNotifyOuterClass {
  /**
   * Protobuf type {@code EraFlipperDataChangeScNotify}
   */
  public static final class EraFlipperDataChangeScNotify extends ProtoMessage<EraFlipperDataChangeScNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 floor_id = 1;</code>
     */
    private int floorId;

    /**
     * <code>optional .EraFlipperDataTypeInfo data = 12;</code>
     */
    private final EraFlipperDataTypeInfoOuterClass.EraFlipperDataTypeInfo data = EraFlipperDataTypeInfoOuterClass.EraFlipperDataTypeInfo.newInstance();

    private EraFlipperDataChangeScNotify() {
    }

    /**
     * @return a new empty instance of {@code EraFlipperDataChangeScNotify}
     */
    public static EraFlipperDataChangeScNotify newInstance() {
      return new EraFlipperDataChangeScNotify();
    }

    /**
     * <code>optional uint32 floor_id = 1;</code>
     * @return whether the floorId field is set
     */
    public boolean hasFloorId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 floor_id = 1;</code>
     * @return this
     */
    public EraFlipperDataChangeScNotify clearFloorId() {
      bitField0_ &= ~0x00000001;
      floorId = 0;
      return this;
    }

    /**
     * <code>optional uint32 floor_id = 1;</code>
     * @return the floorId
     */
    public int getFloorId() {
      return floorId;
    }

    /**
     * <code>optional uint32 floor_id = 1;</code>
     * @param value the floorId to set
     * @return this
     */
    public EraFlipperDataChangeScNotify setFloorId(final int value) {
      bitField0_ |= 0x00000001;
      floorId = value;
      return this;
    }

    /**
     * <code>optional .EraFlipperDataTypeInfo data = 12;</code>
     * @return whether the data field is set
     */
    public boolean hasData() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .EraFlipperDataTypeInfo data = 12;</code>
     * @return this
     */
    public EraFlipperDataChangeScNotify clearData() {
      bitField0_ &= ~0x00000002;
      data.clear();
      return this;
    }

    /**
     * <code>optional .EraFlipperDataTypeInfo data = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableData()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public EraFlipperDataTypeInfoOuterClass.EraFlipperDataTypeInfo getData() {
      return data;
    }

    /**
     * <code>optional .EraFlipperDataTypeInfo data = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public EraFlipperDataTypeInfoOuterClass.EraFlipperDataTypeInfo getMutableData() {
      bitField0_ |= 0x00000002;
      return data;
    }

    /**
     * <code>optional .EraFlipperDataTypeInfo data = 12;</code>
     * @param value the data to set
     * @return this
     */
    public EraFlipperDataChangeScNotify setData(
        final EraFlipperDataTypeInfoOuterClass.EraFlipperDataTypeInfo value) {
      bitField0_ |= 0x00000002;
      data.copyFrom(value);
      return this;
    }

    @Override
    public EraFlipperDataChangeScNotify copyFrom(final EraFlipperDataChangeScNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        floorId = other.floorId;
        data.copyFrom(other.data);
      }
      return this;
    }

    @Override
    public EraFlipperDataChangeScNotify mergeFrom(final EraFlipperDataChangeScNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFloorId()) {
        setFloorId(other.floorId);
      }
      if (other.hasData()) {
        getMutableData().mergeFrom(other.data);
      }
      return this;
    }

    @Override
    public EraFlipperDataChangeScNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      floorId = 0;
      data.clear();
      return this;
    }

    @Override
    public EraFlipperDataChangeScNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      data.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof EraFlipperDataChangeScNotify)) {
        return false;
      }
      EraFlipperDataChangeScNotify other = (EraFlipperDataChangeScNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasFloorId() || floorId == other.floorId)
        && (!hasData() || data.equals(other.data));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(floorId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 98);
        output.writeMessageNoTag(data);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(floorId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(data);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public EraFlipperDataChangeScNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // floorId
            floorId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // data
            input.readMessage(data);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.floorId, floorId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.data, data);
      }
      output.endObject();
    }

    @Override
    public EraFlipperDataChangeScNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -766027193:
          case 2022982190: {
            if (input.isAtField(FieldNames.floorId)) {
              if (!input.trySkipNullValue()) {
                floorId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3076010: {
            if (input.isAtField(FieldNames.data)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(data);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public EraFlipperDataChangeScNotify clone() {
      return new EraFlipperDataChangeScNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static EraFlipperDataChangeScNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new EraFlipperDataChangeScNotify(), data).checkInitialized();
    }

    public static EraFlipperDataChangeScNotify parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new EraFlipperDataChangeScNotify(), input).checkInitialized();
    }

    public static EraFlipperDataChangeScNotify parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new EraFlipperDataChangeScNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating EraFlipperDataChangeScNotify messages
     */
    public static MessageFactory<EraFlipperDataChangeScNotify> getFactory() {
      return EraFlipperDataChangeScNotifyFactory.INSTANCE;
    }

    private enum EraFlipperDataChangeScNotifyFactory implements MessageFactory<EraFlipperDataChangeScNotify> {
      INSTANCE;

      @Override
      public EraFlipperDataChangeScNotify create() {
        return EraFlipperDataChangeScNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName floorId = FieldName.forField("floorId", "floor_id");

      static final FieldName data = FieldName.forField("data");
    }
  }
}
