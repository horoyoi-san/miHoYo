// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class SpAddSourceOuterClass {
  /**
   * Protobuf type {@code SpAddSource}
   */
  public static final class SpAddSource extends ProtoMessage<SpAddSource> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 sp_add = 2;</code>
     */
    private int spAdd;

    /**
     * <code>optional string source = 1;</code>
     */
    private final Utf8String source = Utf8String.newEmptyInstance();

    private SpAddSource() {
    }

    /**
     * @return a new empty instance of {@code SpAddSource}
     */
    public static SpAddSource newInstance() {
      return new SpAddSource();
    }

    /**
     * <code>optional uint32 sp_add = 2;</code>
     * @return whether the spAdd field is set
     */
    public boolean hasSpAdd() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 sp_add = 2;</code>
     * @return this
     */
    public SpAddSource clearSpAdd() {
      bitField0_ &= ~0x00000001;
      spAdd = 0;
      return this;
    }

    /**
     * <code>optional uint32 sp_add = 2;</code>
     * @return the spAdd
     */
    public int getSpAdd() {
      return spAdd;
    }

    /**
     * <code>optional uint32 sp_add = 2;</code>
     * @param value the spAdd to set
     * @return this
     */
    public SpAddSource setSpAdd(final int value) {
      bitField0_ |= 0x00000001;
      spAdd = value;
      return this;
    }

    /**
     * <code>optional string source = 1;</code>
     * @return whether the source field is set
     */
    public boolean hasSource() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional string source = 1;</code>
     * @return this
     */
    public SpAddSource clearSource() {
      bitField0_ &= ~0x00000002;
      source.clear();
      return this;
    }

    /**
     * <code>optional string source = 1;</code>
     * @return the source
     */
    public String getSource() {
      return source.getString();
    }

    /**
     * <code>optional string source = 1;</code>
     * @return internal {@code Utf8String} representation of source for reading
     */
    public Utf8String getSourceBytes() {
      return this.source;
    }

    /**
     * <code>optional string source = 1;</code>
     * @return internal {@code Utf8String} representation of source for modifications
     */
    public Utf8String getMutableSourceBytes() {
      bitField0_ |= 0x00000002;
      return this.source;
    }

    /**
     * <code>optional string source = 1;</code>
     * @param value the source to set
     * @return this
     */
    public SpAddSource setSource(final CharSequence value) {
      bitField0_ |= 0x00000002;
      source.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string source = 1;</code>
     * @param value the source to set
     * @return this
     */
    public SpAddSource setSource(final Utf8String value) {
      bitField0_ |= 0x00000002;
      source.copyFrom(value);
      return this;
    }

    @Override
    public SpAddSource copyFrom(final SpAddSource other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        spAdd = other.spAdd;
        source.copyFrom(other.source);
      }
      return this;
    }

    @Override
    public SpAddSource mergeFrom(final SpAddSource other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSpAdd()) {
        setSpAdd(other.spAdd);
      }
      if (other.hasSource()) {
        getMutableSourceBytes().copyFrom(other.source);
      }
      return this;
    }

    @Override
    public SpAddSource clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      spAdd = 0;
      source.clear();
      return this;
    }

    @Override
    public SpAddSource clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      source.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SpAddSource)) {
        return false;
      }
      SpAddSource other = (SpAddSource) o;
      return bitField0_ == other.bitField0_
        && (!hasSpAdd() || spAdd == other.spAdd)
        && (!hasSource() || source.equals(other.source));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(spAdd);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 10);
        output.writeStringNoTag(source);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(spAdd);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(source);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SpAddSource mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // spAdd
            spAdd = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // source
            input.readString(source);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.spAdd, spAdd);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeString(FieldNames.source, source);
      }
      output.endObject();
    }

    @Override
    public SpAddSource mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 109607172:
          case -896254017: {
            if (input.isAtField(FieldNames.spAdd)) {
              if (!input.trySkipNullValue()) {
                spAdd = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -896505829: {
            if (input.isAtField(FieldNames.source)) {
              if (!input.trySkipNullValue()) {
                input.readString(source);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SpAddSource clone() {
      return new SpAddSource().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SpAddSource parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SpAddSource(), data).checkInitialized();
    }

    public static SpAddSource parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SpAddSource(), input).checkInitialized();
    }

    public static SpAddSource parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SpAddSource(), input).checkInitialized();
    }

    /**
     * @return factory for creating SpAddSource messages
     */
    public static MessageFactory<SpAddSource> getFactory() {
      return SpAddSourceFactory.INSTANCE;
    }

    private enum SpAddSourceFactory implements MessageFactory<SpAddSource> {
      INSTANCE;

      @Override
      public SpAddSource create() {
        return SpAddSource.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName spAdd = FieldName.forField("spAdd", "sp_add");

      static final FieldName source = FieldName.forField("source");
    }
  }
}
