// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class AreaDynamicInfoOuterClass {
  /**
   * Protobuf type {@code AreaDynamicInfo}
   */
  public static final class AreaDynamicInfo extends ProtoMessage<AreaDynamicInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 dice_slot_id = 3;</code>
     */
    private int diceSlotId;

    /**
     * <code>optional uint32 diy_dynamic_id = 14;</code>
     */
    private int diyDynamicId;

    private AreaDynamicInfo() {
    }

    /**
     * @return a new empty instance of {@code AreaDynamicInfo}
     */
    public static AreaDynamicInfo newInstance() {
      return new AreaDynamicInfo();
    }

    /**
     * <code>optional uint32 dice_slot_id = 3;</code>
     * @return whether the diceSlotId field is set
     */
    public boolean hasDiceSlotId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 dice_slot_id = 3;</code>
     * @return this
     */
    public AreaDynamicInfo clearDiceSlotId() {
      bitField0_ &= ~0x00000001;
      diceSlotId = 0;
      return this;
    }

    /**
     * <code>optional uint32 dice_slot_id = 3;</code>
     * @return the diceSlotId
     */
    public int getDiceSlotId() {
      return diceSlotId;
    }

    /**
     * <code>optional uint32 dice_slot_id = 3;</code>
     * @param value the diceSlotId to set
     * @return this
     */
    public AreaDynamicInfo setDiceSlotId(final int value) {
      bitField0_ |= 0x00000001;
      diceSlotId = value;
      return this;
    }

    /**
     * <code>optional uint32 diy_dynamic_id = 14;</code>
     * @return whether the diyDynamicId field is set
     */
    public boolean hasDiyDynamicId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 diy_dynamic_id = 14;</code>
     * @return this
     */
    public AreaDynamicInfo clearDiyDynamicId() {
      bitField0_ &= ~0x00000002;
      diyDynamicId = 0;
      return this;
    }

    /**
     * <code>optional uint32 diy_dynamic_id = 14;</code>
     * @return the diyDynamicId
     */
    public int getDiyDynamicId() {
      return diyDynamicId;
    }

    /**
     * <code>optional uint32 diy_dynamic_id = 14;</code>
     * @param value the diyDynamicId to set
     * @return this
     */
    public AreaDynamicInfo setDiyDynamicId(final int value) {
      bitField0_ |= 0x00000002;
      diyDynamicId = value;
      return this;
    }

    @Override
    public AreaDynamicInfo copyFrom(final AreaDynamicInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        diceSlotId = other.diceSlotId;
        diyDynamicId = other.diyDynamicId;
      }
      return this;
    }

    @Override
    public AreaDynamicInfo mergeFrom(final AreaDynamicInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDiceSlotId()) {
        setDiceSlotId(other.diceSlotId);
      }
      if (other.hasDiyDynamicId()) {
        setDiyDynamicId(other.diyDynamicId);
      }
      return this;
    }

    @Override
    public AreaDynamicInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      diceSlotId = 0;
      diyDynamicId = 0;
      return this;
    }

    @Override
    public AreaDynamicInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof AreaDynamicInfo)) {
        return false;
      }
      AreaDynamicInfo other = (AreaDynamicInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasDiceSlotId() || diceSlotId == other.diceSlotId)
        && (!hasDiyDynamicId() || diyDynamicId == other.diyDynamicId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(diceSlotId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(diyDynamicId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(diceSlotId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(diyDynamicId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public AreaDynamicInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // diceSlotId
            diceSlotId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // diyDynamicId
            diyDynamicId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.diceSlotId, diceSlotId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.diyDynamicId, diyDynamicId);
      }
      output.endObject();
    }

    @Override
    public AreaDynamicInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -613168576:
          case 422738532: {
            if (input.isAtField(FieldNames.diceSlotId)) {
              if (!input.trySkipNullValue()) {
                diceSlotId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1814615942:
          case -516775514: {
            if (input.isAtField(FieldNames.diyDynamicId)) {
              if (!input.trySkipNullValue()) {
                diyDynamicId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public AreaDynamicInfo clone() {
      return new AreaDynamicInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static AreaDynamicInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new AreaDynamicInfo(), data).checkInitialized();
    }

    public static AreaDynamicInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new AreaDynamicInfo(), input).checkInitialized();
    }

    public static AreaDynamicInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new AreaDynamicInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating AreaDynamicInfo messages
     */
    public static MessageFactory<AreaDynamicInfo> getFactory() {
      return AreaDynamicInfoFactory.INSTANCE;
    }

    private enum AreaDynamicInfoFactory implements MessageFactory<AreaDynamicInfo> {
      INSTANCE;

      @Override
      public AreaDynamicInfo create() {
        return AreaDynamicInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName diceSlotId = FieldName.forField("diceSlotId", "dice_slot_id");

      static final FieldName diyDynamicId = FieldName.forField("diyDynamicId", "diy_dynamic_id");
    }
  }
}
