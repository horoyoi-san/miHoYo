// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class MissionSyncOuterClass {
  /**
   * Protobuf type {@code MissionSync}
   */
  public static final class MissionSync extends ProtoMessage<MissionSync> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 1;</code>
     */
    private final RepeatedInt finishedMainMissionIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 HNEPOEDCIDK = 2;</code>
     */
    private final RepeatedInt hNEPOEDCIDK = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 ANIHPCKNGBM = 10;</code>
     */
    private final RepeatedInt aNIHPCKNGBM = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 MCFONOPKOKD = 15;</code>
     */
    private final RepeatedInt mCFONOPKOKD = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .Mission mission_list = 5;</code>
     */
    private final RepeatedMessage<MissionOuterClass.Mission> missionList = RepeatedMessage.newEmptyInstance(MissionOuterClass.Mission.getFactory());

    private MissionSync() {
    }

    /**
     * @return a new empty instance of {@code MissionSync}
     */
    public static MissionSync newInstance() {
      return new MissionSync();
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 1;</code>
     * @return whether the finishedMainMissionIdList field is set
     */
    public boolean hasFinishedMainMissionIdList() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 1;</code>
     * @return this
     */
    public MissionSync clearFinishedMainMissionIdList() {
      bitField0_ &= ~0x00000001;
      finishedMainMissionIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFinishedMainMissionIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getFinishedMainMissionIdList() {
      return finishedMainMissionIdList;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableFinishedMainMissionIdList() {
      bitField0_ |= 0x00000001;
      return finishedMainMissionIdList;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 1;</code>
     * @param value the finishedMainMissionIdList to add
     * @return this
     */
    public MissionSync addFinishedMainMissionIdList(final int value) {
      bitField0_ |= 0x00000001;
      finishedMainMissionIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 finished_main_mission_id_list = 1;</code>
     * @param values the finishedMainMissionIdList to add
     * @return this
     */
    public MissionSync addAllFinishedMainMissionIdList(final int... values) {
      bitField0_ |= 0x00000001;
      finishedMainMissionIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 HNEPOEDCIDK = 2;</code>
     * @return whether the hNEPOEDCIDK field is set
     */
    public boolean hasHNEPOEDCIDK() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated uint32 HNEPOEDCIDK = 2;</code>
     * @return this
     */
    public MissionSync clearHNEPOEDCIDK() {
      bitField0_ &= ~0x00000002;
      hNEPOEDCIDK.clear();
      return this;
    }

    /**
     * <code>repeated uint32 HNEPOEDCIDK = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableHNEPOEDCIDK()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getHNEPOEDCIDK() {
      return hNEPOEDCIDK;
    }

    /**
     * <code>repeated uint32 HNEPOEDCIDK = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableHNEPOEDCIDK() {
      bitField0_ |= 0x00000002;
      return hNEPOEDCIDK;
    }

    /**
     * <code>repeated uint32 HNEPOEDCIDK = 2;</code>
     * @param value the hNEPOEDCIDK to add
     * @return this
     */
    public MissionSync addHNEPOEDCIDK(final int value) {
      bitField0_ |= 0x00000002;
      hNEPOEDCIDK.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 HNEPOEDCIDK = 2;</code>
     * @param values the hNEPOEDCIDK to add
     * @return this
     */
    public MissionSync addAllHNEPOEDCIDK(final int... values) {
      bitField0_ |= 0x00000002;
      hNEPOEDCIDK.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 ANIHPCKNGBM = 10;</code>
     * @return whether the aNIHPCKNGBM field is set
     */
    public boolean hasANIHPCKNGBM() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 ANIHPCKNGBM = 10;</code>
     * @return this
     */
    public MissionSync clearANIHPCKNGBM() {
      bitField0_ &= ~0x00000004;
      aNIHPCKNGBM.clear();
      return this;
    }

    /**
     * <code>repeated uint32 ANIHPCKNGBM = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableANIHPCKNGBM()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getANIHPCKNGBM() {
      return aNIHPCKNGBM;
    }

    /**
     * <code>repeated uint32 ANIHPCKNGBM = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableANIHPCKNGBM() {
      bitField0_ |= 0x00000004;
      return aNIHPCKNGBM;
    }

    /**
     * <code>repeated uint32 ANIHPCKNGBM = 10;</code>
     * @param value the aNIHPCKNGBM to add
     * @return this
     */
    public MissionSync addANIHPCKNGBM(final int value) {
      bitField0_ |= 0x00000004;
      aNIHPCKNGBM.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 ANIHPCKNGBM = 10;</code>
     * @param values the aNIHPCKNGBM to add
     * @return this
     */
    public MissionSync addAllANIHPCKNGBM(final int... values) {
      bitField0_ |= 0x00000004;
      aNIHPCKNGBM.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 MCFONOPKOKD = 15;</code>
     * @return whether the mCFONOPKOKD field is set
     */
    public boolean hasMCFONOPKOKD() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 MCFONOPKOKD = 15;</code>
     * @return this
     */
    public MissionSync clearMCFONOPKOKD() {
      bitField0_ &= ~0x00000008;
      mCFONOPKOKD.clear();
      return this;
    }

    /**
     * <code>repeated uint32 MCFONOPKOKD = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMCFONOPKOKD()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getMCFONOPKOKD() {
      return mCFONOPKOKD;
    }

    /**
     * <code>repeated uint32 MCFONOPKOKD = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableMCFONOPKOKD() {
      bitField0_ |= 0x00000008;
      return mCFONOPKOKD;
    }

    /**
     * <code>repeated uint32 MCFONOPKOKD = 15;</code>
     * @param value the mCFONOPKOKD to add
     * @return this
     */
    public MissionSync addMCFONOPKOKD(final int value) {
      bitField0_ |= 0x00000008;
      mCFONOPKOKD.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 MCFONOPKOKD = 15;</code>
     * @param values the mCFONOPKOKD to add
     * @return this
     */
    public MissionSync addAllMCFONOPKOKD(final int... values) {
      bitField0_ |= 0x00000008;
      mCFONOPKOKD.addAll(values);
      return this;
    }

    /**
     * <code>repeated .Mission mission_list = 5;</code>
     * @return whether the missionList field is set
     */
    public boolean hasMissionList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .Mission mission_list = 5;</code>
     * @return this
     */
    public MissionSync clearMissionList() {
      bitField0_ &= ~0x00000010;
      missionList.clear();
      return this;
    }

    /**
     * <code>repeated .Mission mission_list = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMissionList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMissionList() {
      return missionList;
    }

    /**
     * <code>repeated .Mission mission_list = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMutableMissionList() {
      bitField0_ |= 0x00000010;
      return missionList;
    }

    /**
     * <code>repeated .Mission mission_list = 5;</code>
     * @param value the missionList to add
     * @return this
     */
    public MissionSync addMissionList(final MissionOuterClass.Mission value) {
      bitField0_ |= 0x00000010;
      missionList.add(value);
      return this;
    }

    /**
     * <code>repeated .Mission mission_list = 5;</code>
     * @param values the missionList to add
     * @return this
     */
    public MissionSync addAllMissionList(final MissionOuterClass.Mission... values) {
      bitField0_ |= 0x00000010;
      missionList.addAll(values);
      return this;
    }

    @Override
    public MissionSync copyFrom(final MissionSync other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        finishedMainMissionIdList.copyFrom(other.finishedMainMissionIdList);
        hNEPOEDCIDK.copyFrom(other.hNEPOEDCIDK);
        aNIHPCKNGBM.copyFrom(other.aNIHPCKNGBM);
        mCFONOPKOKD.copyFrom(other.mCFONOPKOKD);
        missionList.copyFrom(other.missionList);
      }
      return this;
    }

    @Override
    public MissionSync mergeFrom(final MissionSync other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFinishedMainMissionIdList()) {
        getMutableFinishedMainMissionIdList().addAll(other.finishedMainMissionIdList);
      }
      if (other.hasHNEPOEDCIDK()) {
        getMutableHNEPOEDCIDK().addAll(other.hNEPOEDCIDK);
      }
      if (other.hasANIHPCKNGBM()) {
        getMutableANIHPCKNGBM().addAll(other.aNIHPCKNGBM);
      }
      if (other.hasMCFONOPKOKD()) {
        getMutableMCFONOPKOKD().addAll(other.mCFONOPKOKD);
      }
      if (other.hasMissionList()) {
        getMutableMissionList().addAll(other.missionList);
      }
      return this;
    }

    @Override
    public MissionSync clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      finishedMainMissionIdList.clear();
      hNEPOEDCIDK.clear();
      aNIHPCKNGBM.clear();
      mCFONOPKOKD.clear();
      missionList.clear();
      return this;
    }

    @Override
    public MissionSync clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      finishedMainMissionIdList.clear();
      hNEPOEDCIDK.clear();
      aNIHPCKNGBM.clear();
      mCFONOPKOKD.clear();
      missionList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MissionSync)) {
        return false;
      }
      MissionSync other = (MissionSync) o;
      return bitField0_ == other.bitField0_
        && (!hasFinishedMainMissionIdList() || finishedMainMissionIdList.equals(other.finishedMainMissionIdList))
        && (!hasHNEPOEDCIDK() || hNEPOEDCIDK.equals(other.hNEPOEDCIDK))
        && (!hasANIHPCKNGBM() || aNIHPCKNGBM.equals(other.aNIHPCKNGBM))
        && (!hasMCFONOPKOKD() || mCFONOPKOKD.equals(other.mCFONOPKOKD))
        && (!hasMissionList() || missionList.equals(other.missionList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < finishedMainMissionIdList.length(); i++) {
          output.writeRawByte((byte) 8);
          output.writeUInt32NoTag(finishedMainMissionIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < hNEPOEDCIDK.length(); i++) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(hNEPOEDCIDK.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < aNIHPCKNGBM.length(); i++) {
          output.writeRawByte((byte) 80);
          output.writeUInt32NoTag(aNIHPCKNGBM.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < mCFONOPKOKD.length(); i++) {
          output.writeRawByte((byte) 120);
          output.writeUInt32NoTag(mCFONOPKOKD.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < missionList.length(); i++) {
          output.writeRawByte((byte) 42);
          output.writeMessageNoTag(missionList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * finishedMainMissionIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(finishedMainMissionIdList);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * hNEPOEDCIDK.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(hNEPOEDCIDK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * aNIHPCKNGBM.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(aNIHPCKNGBM);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * mCFONOPKOKD.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(mCFONOPKOKD);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * missionList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(missionList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MissionSync mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 10: {
            // finishedMainMissionIdList [packed=true]
            input.readPackedUInt32(finishedMainMissionIdList, tag);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // hNEPOEDCIDK [packed=true]
            input.readPackedUInt32(hNEPOEDCIDK, tag);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // aNIHPCKNGBM [packed=true]
            input.readPackedUInt32(aNIHPCKNGBM, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // mCFONOPKOKD [packed=true]
            input.readPackedUInt32(mCFONOPKOKD, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // missionList
            tag = input.readRepeatedMessage(missionList, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 8: {
            // finishedMainMissionIdList [packed=false]
            tag = input.readRepeatedUInt32(finishedMainMissionIdList, tag);
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            // hNEPOEDCIDK [packed=false]
            tag = input.readRepeatedUInt32(hNEPOEDCIDK, tag);
            bitField0_ |= 0x00000002;
            break;
          }
          case 80: {
            // aNIHPCKNGBM [packed=false]
            tag = input.readRepeatedUInt32(aNIHPCKNGBM, tag);
            bitField0_ |= 0x00000004;
            break;
          }
          case 120: {
            // mCFONOPKOKD [packed=false]
            tag = input.readRepeatedUInt32(mCFONOPKOKD, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedUInt32(FieldNames.finishedMainMissionIdList, finishedMainMissionIdList);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedUInt32(FieldNames.hNEPOEDCIDK, hNEPOEDCIDK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.aNIHPCKNGBM, aNIHPCKNGBM);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.mCFONOPKOKD, mCFONOPKOKD);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.missionList, missionList);
      }
      output.endObject();
    }

    @Override
    public MissionSync mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 104231290:
          case -1929023306: {
            if (input.isAtField(FieldNames.finishedMainMissionIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(finishedMainMissionIdList);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2010437558: {
            if (input.isAtField(FieldNames.hNEPOEDCIDK)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(hNEPOEDCIDK);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1177108240: {
            if (input.isAtField(FieldNames.aNIHPCKNGBM)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(aNIHPCKNGBM);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -88794323: {
            if (input.isAtField(FieldNames.mCFONOPKOKD)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(mCFONOPKOKD);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1383006282:
          case -58851471: {
            if (input.isAtField(FieldNames.missionList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(missionList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MissionSync clone() {
      return new MissionSync().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MissionSync parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MissionSync(), data).checkInitialized();
    }

    public static MissionSync parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MissionSync(), input).checkInitialized();
    }

    public static MissionSync parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MissionSync(), input).checkInitialized();
    }

    /**
     * @return factory for creating MissionSync messages
     */
    public static MessageFactory<MissionSync> getFactory() {
      return MissionSyncFactory.INSTANCE;
    }

    private enum MissionSyncFactory implements MessageFactory<MissionSync> {
      INSTANCE;

      @Override
      public MissionSync create() {
        return MissionSync.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName finishedMainMissionIdList = FieldName.forField("finishedMainMissionIdList", "finished_main_mission_id_list");

      static final FieldName hNEPOEDCIDK = FieldName.forField("HNEPOEDCIDK");

      static final FieldName aNIHPCKNGBM = FieldName.forField("ANIHPCKNGBM");

      static final FieldName mCFONOPKOKD = FieldName.forField("MCFONOPKOKD");

      static final FieldName missionList = FieldName.forField("missionList", "mission_list");
    }
  }
}
