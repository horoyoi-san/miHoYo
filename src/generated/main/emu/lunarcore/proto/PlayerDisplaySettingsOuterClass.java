// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class PlayerDisplaySettingsOuterClass {
  /**
   * Protobuf type {@code PlayerDisplaySettings}
   */
  public static final class PlayerDisplaySettings extends ProtoMessage<PlayerDisplaySettings> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .DisplayRecordType EPMCKMCDIGB = 15;</code>
     */
    private int ePMCKMCDIGB;

    /**
     * <code>optional bool PJILEMMBLFG = 2;</code>
     */
    private boolean pJILEMMBLFG;

    /**
     * <code>optional bool GNOHNPJBFJC = 5;</code>
     */
    private boolean gNOHNPJBFJC;

    /**
     * <code>optional bool NENGEIIJJCB = 8;</code>
     */
    private boolean nENGEIIJJCB;

    /**
     * <code>optional bool CPEEEPDBBPH = 12;</code>
     */
    private boolean cPEEEPDBBPH;

    /**
     * <code>optional bool NMJDBOIPFIC = 14;</code>
     */
    private boolean nMJDBOIPFIC;

    private PlayerDisplaySettings() {
    }

    /**
     * @return a new empty instance of {@code PlayerDisplaySettings}
     */
    public static PlayerDisplaySettings newInstance() {
      return new PlayerDisplaySettings();
    }

    /**
     * <code>optional .DisplayRecordType EPMCKMCDIGB = 15;</code>
     * @return whether the ePMCKMCDIGB field is set
     */
    public boolean hasEPMCKMCDIGB() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .DisplayRecordType EPMCKMCDIGB = 15;</code>
     * @return this
     */
    public PlayerDisplaySettings clearEPMCKMCDIGB() {
      bitField0_ &= ~0x00000001;
      ePMCKMCDIGB = 0;
      return this;
    }

    /**
     * <code>optional .DisplayRecordType EPMCKMCDIGB = 15;</code>
     * @return the ePMCKMCDIGB
     */
    public DisplayRecordTypeOuterClass.DisplayRecordType getEPMCKMCDIGB() {
      return DisplayRecordTypeOuterClass.DisplayRecordType.forNumber(ePMCKMCDIGB);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link PlayerDisplaySettings#getEPMCKMCDIGB()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getEPMCKMCDIGBValue() {
      return ePMCKMCDIGB;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link DisplayRecordTypeOuterClass.DisplayRecordType}. Setting an invalid value
     * can cause {@link PlayerDisplaySettings#getEPMCKMCDIGB()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public PlayerDisplaySettings setEPMCKMCDIGBValue(final int value) {
      bitField0_ |= 0x00000001;
      ePMCKMCDIGB = value;
      return this;
    }

    /**
     * <code>optional .DisplayRecordType EPMCKMCDIGB = 15;</code>
     * @param value the ePMCKMCDIGB to set
     * @return this
     */
    public PlayerDisplaySettings setEPMCKMCDIGB(
        final DisplayRecordTypeOuterClass.DisplayRecordType value) {
      bitField0_ |= 0x00000001;
      ePMCKMCDIGB = value.getNumber();
      return this;
    }

    /**
     * <code>optional bool PJILEMMBLFG = 2;</code>
     * @return whether the pJILEMMBLFG field is set
     */
    public boolean hasPJILEMMBLFG() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool PJILEMMBLFG = 2;</code>
     * @return this
     */
    public PlayerDisplaySettings clearPJILEMMBLFG() {
      bitField0_ &= ~0x00000002;
      pJILEMMBLFG = false;
      return this;
    }

    /**
     * <code>optional bool PJILEMMBLFG = 2;</code>
     * @return the pJILEMMBLFG
     */
    public boolean getPJILEMMBLFG() {
      return pJILEMMBLFG;
    }

    /**
     * <code>optional bool PJILEMMBLFG = 2;</code>
     * @param value the pJILEMMBLFG to set
     * @return this
     */
    public PlayerDisplaySettings setPJILEMMBLFG(final boolean value) {
      bitField0_ |= 0x00000002;
      pJILEMMBLFG = value;
      return this;
    }

    /**
     * <code>optional bool GNOHNPJBFJC = 5;</code>
     * @return whether the gNOHNPJBFJC field is set
     */
    public boolean hasGNOHNPJBFJC() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool GNOHNPJBFJC = 5;</code>
     * @return this
     */
    public PlayerDisplaySettings clearGNOHNPJBFJC() {
      bitField0_ &= ~0x00000004;
      gNOHNPJBFJC = false;
      return this;
    }

    /**
     * <code>optional bool GNOHNPJBFJC = 5;</code>
     * @return the gNOHNPJBFJC
     */
    public boolean getGNOHNPJBFJC() {
      return gNOHNPJBFJC;
    }

    /**
     * <code>optional bool GNOHNPJBFJC = 5;</code>
     * @param value the gNOHNPJBFJC to set
     * @return this
     */
    public PlayerDisplaySettings setGNOHNPJBFJC(final boolean value) {
      bitField0_ |= 0x00000004;
      gNOHNPJBFJC = value;
      return this;
    }

    /**
     * <code>optional bool NENGEIIJJCB = 8;</code>
     * @return whether the nENGEIIJJCB field is set
     */
    public boolean hasNENGEIIJJCB() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool NENGEIIJJCB = 8;</code>
     * @return this
     */
    public PlayerDisplaySettings clearNENGEIIJJCB() {
      bitField0_ &= ~0x00000008;
      nENGEIIJJCB = false;
      return this;
    }

    /**
     * <code>optional bool NENGEIIJJCB = 8;</code>
     * @return the nENGEIIJJCB
     */
    public boolean getNENGEIIJJCB() {
      return nENGEIIJJCB;
    }

    /**
     * <code>optional bool NENGEIIJJCB = 8;</code>
     * @param value the nENGEIIJJCB to set
     * @return this
     */
    public PlayerDisplaySettings setNENGEIIJJCB(final boolean value) {
      bitField0_ |= 0x00000008;
      nENGEIIJJCB = value;
      return this;
    }

    /**
     * <code>optional bool CPEEEPDBBPH = 12;</code>
     * @return whether the cPEEEPDBBPH field is set
     */
    public boolean hasCPEEEPDBBPH() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional bool CPEEEPDBBPH = 12;</code>
     * @return this
     */
    public PlayerDisplaySettings clearCPEEEPDBBPH() {
      bitField0_ &= ~0x00000010;
      cPEEEPDBBPH = false;
      return this;
    }

    /**
     * <code>optional bool CPEEEPDBBPH = 12;</code>
     * @return the cPEEEPDBBPH
     */
    public boolean getCPEEEPDBBPH() {
      return cPEEEPDBBPH;
    }

    /**
     * <code>optional bool CPEEEPDBBPH = 12;</code>
     * @param value the cPEEEPDBBPH to set
     * @return this
     */
    public PlayerDisplaySettings setCPEEEPDBBPH(final boolean value) {
      bitField0_ |= 0x00000010;
      cPEEEPDBBPH = value;
      return this;
    }

    /**
     * <code>optional bool NMJDBOIPFIC = 14;</code>
     * @return whether the nMJDBOIPFIC field is set
     */
    public boolean hasNMJDBOIPFIC() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional bool NMJDBOIPFIC = 14;</code>
     * @return this
     */
    public PlayerDisplaySettings clearNMJDBOIPFIC() {
      bitField0_ &= ~0x00000020;
      nMJDBOIPFIC = false;
      return this;
    }

    /**
     * <code>optional bool NMJDBOIPFIC = 14;</code>
     * @return the nMJDBOIPFIC
     */
    public boolean getNMJDBOIPFIC() {
      return nMJDBOIPFIC;
    }

    /**
     * <code>optional bool NMJDBOIPFIC = 14;</code>
     * @param value the nMJDBOIPFIC to set
     * @return this
     */
    public PlayerDisplaySettings setNMJDBOIPFIC(final boolean value) {
      bitField0_ |= 0x00000020;
      nMJDBOIPFIC = value;
      return this;
    }

    @Override
    public PlayerDisplaySettings copyFrom(final PlayerDisplaySettings other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        ePMCKMCDIGB = other.ePMCKMCDIGB;
        pJILEMMBLFG = other.pJILEMMBLFG;
        gNOHNPJBFJC = other.gNOHNPJBFJC;
        nENGEIIJJCB = other.nENGEIIJJCB;
        cPEEEPDBBPH = other.cPEEEPDBBPH;
        nMJDBOIPFIC = other.nMJDBOIPFIC;
      }
      return this;
    }

    @Override
    public PlayerDisplaySettings mergeFrom(final PlayerDisplaySettings other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasEPMCKMCDIGB()) {
        setEPMCKMCDIGBValue(other.ePMCKMCDIGB);
      }
      if (other.hasPJILEMMBLFG()) {
        setPJILEMMBLFG(other.pJILEMMBLFG);
      }
      if (other.hasGNOHNPJBFJC()) {
        setGNOHNPJBFJC(other.gNOHNPJBFJC);
      }
      if (other.hasNENGEIIJJCB()) {
        setNENGEIIJJCB(other.nENGEIIJJCB);
      }
      if (other.hasCPEEEPDBBPH()) {
        setCPEEEPDBBPH(other.cPEEEPDBBPH);
      }
      if (other.hasNMJDBOIPFIC()) {
        setNMJDBOIPFIC(other.nMJDBOIPFIC);
      }
      return this;
    }

    @Override
    public PlayerDisplaySettings clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      ePMCKMCDIGB = 0;
      pJILEMMBLFG = false;
      gNOHNPJBFJC = false;
      nENGEIIJJCB = false;
      cPEEEPDBBPH = false;
      nMJDBOIPFIC = false;
      return this;
    }

    @Override
    public PlayerDisplaySettings clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof PlayerDisplaySettings)) {
        return false;
      }
      PlayerDisplaySettings other = (PlayerDisplaySettings) o;
      return bitField0_ == other.bitField0_
        && (!hasEPMCKMCDIGB() || ePMCKMCDIGB == other.ePMCKMCDIGB)
        && (!hasPJILEMMBLFG() || pJILEMMBLFG == other.pJILEMMBLFG)
        && (!hasGNOHNPJBFJC() || gNOHNPJBFJC == other.gNOHNPJBFJC)
        && (!hasNENGEIIJJCB() || nENGEIIJJCB == other.nENGEIIJJCB)
        && (!hasCPEEEPDBBPH() || cPEEEPDBBPH == other.cPEEEPDBBPH)
        && (!hasNMJDBOIPFIC() || nMJDBOIPFIC == other.nMJDBOIPFIC);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 120);
        output.writeEnumNoTag(ePMCKMCDIGB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 16);
        output.writeBoolNoTag(pJILEMMBLFG);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 40);
        output.writeBoolNoTag(gNOHNPJBFJC);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 64);
        output.writeBoolNoTag(nENGEIIJJCB);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 96);
        output.writeBoolNoTag(cPEEEPDBBPH);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 112);
        output.writeBoolNoTag(nMJDBOIPFIC);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(ePMCKMCDIGB);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public PlayerDisplaySettings mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 120: {
            // ePMCKMCDIGB
            final int value = input.readInt32();
            if (DisplayRecordTypeOuterClass.DisplayRecordType.forNumber(value) != null) {
              ePMCKMCDIGB = value;
              bitField0_ |= 0x00000001;
            }
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // pJILEMMBLFG
            pJILEMMBLFG = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // gNOHNPJBFJC
            gNOHNPJBFJC = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // nENGEIIJJCB
            nENGEIIJJCB = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // cPEEEPDBBPH
            cPEEEPDBBPH = input.readBool();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // nMJDBOIPFIC
            nMJDBOIPFIC = input.readBool();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeEnum(FieldNames.ePMCKMCDIGB, ePMCKMCDIGB, DisplayRecordTypeOuterClass.DisplayRecordType.converter());
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.pJILEMMBLFG, pJILEMMBLFG);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.gNOHNPJBFJC, gNOHNPJBFJC);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.nENGEIIJJCB, nENGEIIJJCB);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeBool(FieldNames.cPEEEPDBBPH, cPEEEPDBBPH);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeBool(FieldNames.nMJDBOIPFIC, nMJDBOIPFIC);
      }
      output.endObject();
    }

    @Override
    public PlayerDisplaySettings mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1204049952: {
            if (input.isAtField(FieldNames.ePMCKMCDIGB)) {
              if (!input.trySkipNullValue()) {
                final DisplayRecordTypeOuterClass.DisplayRecordType value = input.readEnum(DisplayRecordTypeOuterClass.DisplayRecordType.converter());
                if (value != null) {
                  ePMCKMCDIGB = value.getNumber();
                  bitField0_ |= 0x00000001;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 215933299: {
            if (input.isAtField(FieldNames.pJILEMMBLFG)) {
              if (!input.trySkipNullValue()) {
                pJILEMMBLFG = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1562150469: {
            if (input.isAtField(FieldNames.gNOHNPJBFJC)) {
              if (!input.trySkipNullValue()) {
                gNOHNPJBFJC = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -191992940: {
            if (input.isAtField(FieldNames.nENGEIIJJCB)) {
              if (!input.trySkipNullValue()) {
                nENGEIIJJCB = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 325062724: {
            if (input.isAtField(FieldNames.cPEEEPDBBPH)) {
              if (!input.trySkipNullValue()) {
                cPEEEPDBBPH = input.readBool();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2041692115: {
            if (input.isAtField(FieldNames.nMJDBOIPFIC)) {
              if (!input.trySkipNullValue()) {
                nMJDBOIPFIC = input.readBool();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public PlayerDisplaySettings clone() {
      return new PlayerDisplaySettings().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static PlayerDisplaySettings parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new PlayerDisplaySettings(), data).checkInitialized();
    }

    public static PlayerDisplaySettings parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerDisplaySettings(), input).checkInitialized();
    }

    public static PlayerDisplaySettings parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerDisplaySettings(), input).checkInitialized();
    }

    /**
     * @return factory for creating PlayerDisplaySettings messages
     */
    public static MessageFactory<PlayerDisplaySettings> getFactory() {
      return PlayerDisplaySettingsFactory.INSTANCE;
    }

    private enum PlayerDisplaySettingsFactory implements MessageFactory<PlayerDisplaySettings> {
      INSTANCE;

      @Override
      public PlayerDisplaySettings create() {
        return PlayerDisplaySettings.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName ePMCKMCDIGB = FieldName.forField("EPMCKMCDIGB");

      static final FieldName pJILEMMBLFG = FieldName.forField("PJILEMMBLFG");

      static final FieldName gNOHNPJBFJC = FieldName.forField("GNOHNPJBFJC");

      static final FieldName nENGEIIJJCB = FieldName.forField("NENGEIIJJCB");

      static final FieldName cPEEEPDBBPH = FieldName.forField("CPEEEPDBBPH");

      static final FieldName nMJDBOIPFIC = FieldName.forField("NMJDBOIPFIC");
    }
  }
}
