// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueGambleMachineInfoOuterClass {
  /**
   * Protobuf type {@code RogueGambleMachineInfo}
   */
  public static final class RogueGambleMachineInfo extends ProtoMessage<RogueGambleMachineInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 FAPOKJPPGHD = 6;</code>
     */
    private int fAPOKJPPGHD;

    /**
     * <code>optional .RogueGambleInfo gamble_info = 2;</code>
     */
    private final RogueGambleInfoOuterClass.RogueGambleInfo gambleInfo = RogueGambleInfoOuterClass.RogueGambleInfo.newInstance();

    private RogueGambleMachineInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueGambleMachineInfo}
     */
    public static RogueGambleMachineInfo newInstance() {
      return new RogueGambleMachineInfo();
    }

    /**
     * <code>optional uint32 FAPOKJPPGHD = 6;</code>
     * @return whether the fAPOKJPPGHD field is set
     */
    public boolean hasFAPOKJPPGHD() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 FAPOKJPPGHD = 6;</code>
     * @return this
     */
    public RogueGambleMachineInfo clearFAPOKJPPGHD() {
      bitField0_ &= ~0x00000001;
      fAPOKJPPGHD = 0;
      return this;
    }

    /**
     * <code>optional uint32 FAPOKJPPGHD = 6;</code>
     * @return the fAPOKJPPGHD
     */
    public int getFAPOKJPPGHD() {
      return fAPOKJPPGHD;
    }

    /**
     * <code>optional uint32 FAPOKJPPGHD = 6;</code>
     * @param value the fAPOKJPPGHD to set
     * @return this
     */
    public RogueGambleMachineInfo setFAPOKJPPGHD(final int value) {
      bitField0_ |= 0x00000001;
      fAPOKJPPGHD = value;
      return this;
    }

    /**
     * <code>optional .RogueGambleInfo gamble_info = 2;</code>
     * @return whether the gambleInfo field is set
     */
    public boolean hasGambleInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .RogueGambleInfo gamble_info = 2;</code>
     * @return this
     */
    public RogueGambleMachineInfo clearGambleInfo() {
      bitField0_ &= ~0x00000002;
      gambleInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueGambleInfo gamble_info = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableGambleInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueGambleInfoOuterClass.RogueGambleInfo getGambleInfo() {
      return gambleInfo;
    }

    /**
     * <code>optional .RogueGambleInfo gamble_info = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueGambleInfoOuterClass.RogueGambleInfo getMutableGambleInfo() {
      bitField0_ |= 0x00000002;
      return gambleInfo;
    }

    /**
     * <code>optional .RogueGambleInfo gamble_info = 2;</code>
     * @param value the gambleInfo to set
     * @return this
     */
    public RogueGambleMachineInfo setGambleInfo(
        final RogueGambleInfoOuterClass.RogueGambleInfo value) {
      bitField0_ |= 0x00000002;
      gambleInfo.copyFrom(value);
      return this;
    }

    @Override
    public RogueGambleMachineInfo copyFrom(final RogueGambleMachineInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        fAPOKJPPGHD = other.fAPOKJPPGHD;
        gambleInfo.copyFrom(other.gambleInfo);
      }
      return this;
    }

    @Override
    public RogueGambleMachineInfo mergeFrom(final RogueGambleMachineInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasFAPOKJPPGHD()) {
        setFAPOKJPPGHD(other.fAPOKJPPGHD);
      }
      if (other.hasGambleInfo()) {
        getMutableGambleInfo().mergeFrom(other.gambleInfo);
      }
      return this;
    }

    @Override
    public RogueGambleMachineInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fAPOKJPPGHD = 0;
      gambleInfo.clear();
      return this;
    }

    @Override
    public RogueGambleMachineInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      gambleInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueGambleMachineInfo)) {
        return false;
      }
      RogueGambleMachineInfo other = (RogueGambleMachineInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasFAPOKJPPGHD() || fAPOKJPPGHD == other.fAPOKJPPGHD)
        && (!hasGambleInfo() || gambleInfo.equals(other.gambleInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(fAPOKJPPGHD);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 18);
        output.writeMessageNoTag(gambleInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fAPOKJPPGHD);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(gambleInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueGambleMachineInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 48: {
            // fAPOKJPPGHD
            fAPOKJPPGHD = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // gambleInfo
            input.readMessage(gambleInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.fAPOKJPPGHD, fAPOKJPPGHD);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.gambleInfo, gambleInfo);
      }
      output.endObject();
    }

    @Override
    public RogueGambleMachineInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 592766538: {
            if (input.isAtField(FieldNames.fAPOKJPPGHD)) {
              if (!input.trySkipNullValue()) {
                fAPOKJPPGHD = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1334124938:
          case 1611975909: {
            if (input.isAtField(FieldNames.gambleInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(gambleInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueGambleMachineInfo clone() {
      return new RogueGambleMachineInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueGambleMachineInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueGambleMachineInfo(), data).checkInitialized();
    }

    public static RogueGambleMachineInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueGambleMachineInfo(), input).checkInitialized();
    }

    public static RogueGambleMachineInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueGambleMachineInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueGambleMachineInfo messages
     */
    public static MessageFactory<RogueGambleMachineInfo> getFactory() {
      return RogueGambleMachineInfoFactory.INSTANCE;
    }

    private enum RogueGambleMachineInfoFactory implements MessageFactory<RogueGambleMachineInfo> {
      INSTANCE;

      @Override
      public RogueGambleMachineInfo create() {
        return RogueGambleMachineInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName fAPOKJPPGHD = FieldName.forField("FAPOKJPPGHD");

      static final FieldName gambleInfo = FieldName.forField("gambleInfo", "gamble_info");
    }
  }
}
