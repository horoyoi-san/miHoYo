// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class GetMissionDataScRspOuterClass {
  /**
   * Protobuf type {@code GetMissionDataScRsp}
   */
  public static final class GetMissionDataScRsp extends ProtoMessage<GetMissionDataScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 BPIKAMDFNFC = 3;</code>
     */
    private int bPIKAMDFNFC;

    /**
     * <code>optional uint32 retcode = 11;</code>
     */
    private int retcode;

    /**
     * <code>optional bool MCCMLJFOJID = 13;</code>
     */
    private boolean mCCMLJFOJID;

    /**
     * <code>repeated .MissionData mission_data_list = 6;</code>
     */
    private final RepeatedMessage<MissionDataOuterClass.MissionData> missionDataList = RepeatedMessage.newEmptyInstance(MissionDataOuterClass.MissionData.getFactory());

    /**
     * <code>repeated .Mission mission_list = 15;</code>
     */
    private final RepeatedMessage<MissionOuterClass.Mission> missionList = RepeatedMessage.newEmptyInstance(MissionOuterClass.Mission.getFactory());

    private GetMissionDataScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetMissionDataScRsp}
     */
    public static GetMissionDataScRsp newInstance() {
      return new GetMissionDataScRsp();
    }

    /**
     * <code>optional uint32 BPIKAMDFNFC = 3;</code>
     * @return whether the bPIKAMDFNFC field is set
     */
    public boolean hasBPIKAMDFNFC() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 BPIKAMDFNFC = 3;</code>
     * @return this
     */
    public GetMissionDataScRsp clearBPIKAMDFNFC() {
      bitField0_ &= ~0x00000001;
      bPIKAMDFNFC = 0;
      return this;
    }

    /**
     * <code>optional uint32 BPIKAMDFNFC = 3;</code>
     * @return the bPIKAMDFNFC
     */
    public int getBPIKAMDFNFC() {
      return bPIKAMDFNFC;
    }

    /**
     * <code>optional uint32 BPIKAMDFNFC = 3;</code>
     * @param value the bPIKAMDFNFC to set
     * @return this
     */
    public GetMissionDataScRsp setBPIKAMDFNFC(final int value) {
      bitField0_ |= 0x00000001;
      bPIKAMDFNFC = value;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @return this
     */
    public GetMissionDataScRsp clearRetcode() {
      bitField0_ &= ~0x00000002;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 11;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetMissionDataScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000002;
      retcode = value;
      return this;
    }

    /**
     * <code>optional bool MCCMLJFOJID = 13;</code>
     * @return whether the mCCMLJFOJID field is set
     */
    public boolean hasMCCMLJFOJID() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool MCCMLJFOJID = 13;</code>
     * @return this
     */
    public GetMissionDataScRsp clearMCCMLJFOJID() {
      bitField0_ &= ~0x00000004;
      mCCMLJFOJID = false;
      return this;
    }

    /**
     * <code>optional bool MCCMLJFOJID = 13;</code>
     * @return the mCCMLJFOJID
     */
    public boolean getMCCMLJFOJID() {
      return mCCMLJFOJID;
    }

    /**
     * <code>optional bool MCCMLJFOJID = 13;</code>
     * @param value the mCCMLJFOJID to set
     * @return this
     */
    public GetMissionDataScRsp setMCCMLJFOJID(final boolean value) {
      bitField0_ |= 0x00000004;
      mCCMLJFOJID = value;
      return this;
    }

    /**
     * <code>repeated .MissionData mission_data_list = 6;</code>
     * @return whether the missionDataList field is set
     */
    public boolean hasMissionDataList() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .MissionData mission_data_list = 6;</code>
     * @return this
     */
    public GetMissionDataScRsp clearMissionDataList() {
      bitField0_ &= ~0x00000008;
      missionDataList.clear();
      return this;
    }

    /**
     * <code>repeated .MissionData mission_data_list = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMissionDataList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MissionDataOuterClass.MissionData> getMissionDataList() {
      return missionDataList;
    }

    /**
     * <code>repeated .MissionData mission_data_list = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MissionDataOuterClass.MissionData> getMutableMissionDataList() {
      bitField0_ |= 0x00000008;
      return missionDataList;
    }

    /**
     * <code>repeated .MissionData mission_data_list = 6;</code>
     * @param value the missionDataList to add
     * @return this
     */
    public GetMissionDataScRsp addMissionDataList(final MissionDataOuterClass.MissionData value) {
      bitField0_ |= 0x00000008;
      missionDataList.add(value);
      return this;
    }

    /**
     * <code>repeated .MissionData mission_data_list = 6;</code>
     * @param values the missionDataList to add
     * @return this
     */
    public GetMissionDataScRsp addAllMissionDataList(
        final MissionDataOuterClass.MissionData... values) {
      bitField0_ |= 0x00000008;
      missionDataList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .Mission mission_list = 15;</code>
     * @return whether the missionList field is set
     */
    public boolean hasMissionList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .Mission mission_list = 15;</code>
     * @return this
     */
    public GetMissionDataScRsp clearMissionList() {
      bitField0_ &= ~0x00000010;
      missionList.clear();
      return this;
    }

    /**
     * <code>repeated .Mission mission_list = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMissionList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMissionList() {
      return missionList;
    }

    /**
     * <code>repeated .Mission mission_list = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MissionOuterClass.Mission> getMutableMissionList() {
      bitField0_ |= 0x00000010;
      return missionList;
    }

    /**
     * <code>repeated .Mission mission_list = 15;</code>
     * @param value the missionList to add
     * @return this
     */
    public GetMissionDataScRsp addMissionList(final MissionOuterClass.Mission value) {
      bitField0_ |= 0x00000010;
      missionList.add(value);
      return this;
    }

    /**
     * <code>repeated .Mission mission_list = 15;</code>
     * @param values the missionList to add
     * @return this
     */
    public GetMissionDataScRsp addAllMissionList(final MissionOuterClass.Mission... values) {
      bitField0_ |= 0x00000010;
      missionList.addAll(values);
      return this;
    }

    @Override
    public GetMissionDataScRsp copyFrom(final GetMissionDataScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        bPIKAMDFNFC = other.bPIKAMDFNFC;
        retcode = other.retcode;
        mCCMLJFOJID = other.mCCMLJFOJID;
        missionDataList.copyFrom(other.missionDataList);
        missionList.copyFrom(other.missionList);
      }
      return this;
    }

    @Override
    public GetMissionDataScRsp mergeFrom(final GetMissionDataScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasBPIKAMDFNFC()) {
        setBPIKAMDFNFC(other.bPIKAMDFNFC);
      }
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasMCCMLJFOJID()) {
        setMCCMLJFOJID(other.mCCMLJFOJID);
      }
      if (other.hasMissionDataList()) {
        getMutableMissionDataList().addAll(other.missionDataList);
      }
      if (other.hasMissionList()) {
        getMutableMissionList().addAll(other.missionList);
      }
      return this;
    }

    @Override
    public GetMissionDataScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      bPIKAMDFNFC = 0;
      retcode = 0;
      mCCMLJFOJID = false;
      missionDataList.clear();
      missionList.clear();
      return this;
    }

    @Override
    public GetMissionDataScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      missionDataList.clearQuick();
      missionList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetMissionDataScRsp)) {
        return false;
      }
      GetMissionDataScRsp other = (GetMissionDataScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasBPIKAMDFNFC() || bPIKAMDFNFC == other.bPIKAMDFNFC)
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasMCCMLJFOJID() || mCCMLJFOJID == other.mCCMLJFOJID)
        && (!hasMissionDataList() || missionDataList.equals(other.missionDataList))
        && (!hasMissionList() || missionList.equals(other.missionList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(bPIKAMDFNFC);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 104);
        output.writeBoolNoTag(mCCMLJFOJID);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < missionDataList.length(); i++) {
          output.writeRawByte((byte) 50);
          output.writeMessageNoTag(missionDataList.get(i));
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < missionList.length(); i++) {
          output.writeRawByte((byte) 122);
          output.writeMessageNoTag(missionList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bPIKAMDFNFC);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * missionDataList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(missionDataList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * missionList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(missionList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetMissionDataScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // bPIKAMDFNFC
            bPIKAMDFNFC = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // mCCMLJFOJID
            mCCMLJFOJID = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // missionDataList
            tag = input.readRepeatedMessage(missionDataList, tag);
            bitField0_ |= 0x00000008;
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // missionList
            tag = input.readRepeatedMessage(missionList, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.bPIKAMDFNFC, bPIKAMDFNFC);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.mCCMLJFOJID, mCCMLJFOJID);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.missionDataList, missionDataList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.missionList, missionList);
      }
      output.endObject();
    }

    @Override
    public GetMissionDataScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1713286445: {
            if (input.isAtField(FieldNames.bPIKAMDFNFC)) {
              if (!input.trySkipNullValue()) {
                bPIKAMDFNFC = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -79325634: {
            if (input.isAtField(FieldNames.mCCMLJFOJID)) {
              if (!input.trySkipNullValue()) {
                mCCMLJFOJID = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1584150252:
          case 1727508768: {
            if (input.isAtField(FieldNames.missionDataList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(missionDataList);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1383006282:
          case -58851471: {
            if (input.isAtField(FieldNames.missionList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(missionList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetMissionDataScRsp clone() {
      return new GetMissionDataScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetMissionDataScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetMissionDataScRsp(), data).checkInitialized();
    }

    public static GetMissionDataScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetMissionDataScRsp(), input).checkInitialized();
    }

    public static GetMissionDataScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetMissionDataScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetMissionDataScRsp messages
     */
    public static MessageFactory<GetMissionDataScRsp> getFactory() {
      return GetMissionDataScRspFactory.INSTANCE;
    }

    private enum GetMissionDataScRspFactory implements MessageFactory<GetMissionDataScRsp> {
      INSTANCE;

      @Override
      public GetMissionDataScRsp create() {
        return GetMissionDataScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName bPIKAMDFNFC = FieldName.forField("BPIKAMDFNFC");

      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName mCCMLJFOJID = FieldName.forField("MCCMLJFOJID");

      static final FieldName missionDataList = FieldName.forField("missionDataList", "mission_data_list");

      static final FieldName missionList = FieldName.forField("missionList", "mission_list");
    }
  }
}
