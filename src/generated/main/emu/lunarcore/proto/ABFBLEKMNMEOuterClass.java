// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ABFBLEKMNMEOuterClass {
  /**
   * Protobuf type {@code ABFBLEKMNME}
   */
  public static final class ABFBLEKMNME extends ProtoMessage<ABFBLEKMNME> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .SceneInfo scene = 5;</code>
     */
    private final SceneInfoOuterClass.SceneInfo scene = SceneInfoOuterClass.SceneInfo.newInstance();

    /**
     * <code>optional .LineupInfo lineup = 7;</code>
     */
    private final LineupInfoOuterClass.LineupInfo lineup = LineupInfoOuterClass.LineupInfo.newInstance();

    /**
     * <code>optional .RogueMapRotateInfo rotate_info = 8;</code>
     */
    private final RogueMapRotateInfoOuterClass.RogueMapRotateInfo rotateInfo = RogueMapRotateInfoOuterClass.RogueMapRotateInfo.newInstance();

    private ABFBLEKMNME() {
    }

    /**
     * @return a new empty instance of {@code ABFBLEKMNME}
     */
    public static ABFBLEKMNME newInstance() {
      return new ABFBLEKMNME();
    }

    /**
     * <code>optional .SceneInfo scene = 5;</code>
     * @return whether the scene field is set
     */
    public boolean hasScene() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .SceneInfo scene = 5;</code>
     * @return this
     */
    public ABFBLEKMNME clearScene() {
      bitField0_ &= ~0x00000001;
      scene.clear();
      return this;
    }

    /**
     * <code>optional .SceneInfo scene = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableScene()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public SceneInfoOuterClass.SceneInfo getScene() {
      return scene;
    }

    /**
     * <code>optional .SceneInfo scene = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public SceneInfoOuterClass.SceneInfo getMutableScene() {
      bitField0_ |= 0x00000001;
      return scene;
    }

    /**
     * <code>optional .SceneInfo scene = 5;</code>
     * @param value the scene to set
     * @return this
     */
    public ABFBLEKMNME setScene(final SceneInfoOuterClass.SceneInfo value) {
      bitField0_ |= 0x00000001;
      scene.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .LineupInfo lineup = 7;</code>
     * @return whether the lineup field is set
     */
    public boolean hasLineup() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .LineupInfo lineup = 7;</code>
     * @return this
     */
    public ABFBLEKMNME clearLineup() {
      bitField0_ &= ~0x00000002;
      lineup.clear();
      return this;
    }

    /**
     * <code>optional .LineupInfo lineup = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLineup()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public LineupInfoOuterClass.LineupInfo getLineup() {
      return lineup;
    }

    /**
     * <code>optional .LineupInfo lineup = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public LineupInfoOuterClass.LineupInfo getMutableLineup() {
      bitField0_ |= 0x00000002;
      return lineup;
    }

    /**
     * <code>optional .LineupInfo lineup = 7;</code>
     * @param value the lineup to set
     * @return this
     */
    public ABFBLEKMNME setLineup(final LineupInfoOuterClass.LineupInfo value) {
      bitField0_ |= 0x00000002;
      lineup.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RogueMapRotateInfo rotate_info = 8;</code>
     * @return whether the rotateInfo field is set
     */
    public boolean hasRotateInfo() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .RogueMapRotateInfo rotate_info = 8;</code>
     * @return this
     */
    public ABFBLEKMNME clearRotateInfo() {
      bitField0_ &= ~0x00000004;
      rotateInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueMapRotateInfo rotate_info = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRotateInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueMapRotateInfoOuterClass.RogueMapRotateInfo getRotateInfo() {
      return rotateInfo;
    }

    /**
     * <code>optional .RogueMapRotateInfo rotate_info = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueMapRotateInfoOuterClass.RogueMapRotateInfo getMutableRotateInfo() {
      bitField0_ |= 0x00000004;
      return rotateInfo;
    }

    /**
     * <code>optional .RogueMapRotateInfo rotate_info = 8;</code>
     * @param value the rotateInfo to set
     * @return this
     */
    public ABFBLEKMNME setRotateInfo(final RogueMapRotateInfoOuterClass.RogueMapRotateInfo value) {
      bitField0_ |= 0x00000004;
      rotateInfo.copyFrom(value);
      return this;
    }

    @Override
    public ABFBLEKMNME copyFrom(final ABFBLEKMNME other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        scene.copyFrom(other.scene);
        lineup.copyFrom(other.lineup);
        rotateInfo.copyFrom(other.rotateInfo);
      }
      return this;
    }

    @Override
    public ABFBLEKMNME mergeFrom(final ABFBLEKMNME other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasScene()) {
        getMutableScene().mergeFrom(other.scene);
      }
      if (other.hasLineup()) {
        getMutableLineup().mergeFrom(other.lineup);
      }
      if (other.hasRotateInfo()) {
        getMutableRotateInfo().mergeFrom(other.rotateInfo);
      }
      return this;
    }

    @Override
    public ABFBLEKMNME clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      scene.clear();
      lineup.clear();
      rotateInfo.clear();
      return this;
    }

    @Override
    public ABFBLEKMNME clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      scene.clearQuick();
      lineup.clearQuick();
      rotateInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ABFBLEKMNME)) {
        return false;
      }
      ABFBLEKMNME other = (ABFBLEKMNME) o;
      return bitField0_ == other.bitField0_
        && (!hasScene() || scene.equals(other.scene))
        && (!hasLineup() || lineup.equals(other.lineup))
        && (!hasRotateInfo() || rotateInfo.equals(other.rotateInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 42);
        output.writeMessageNoTag(scene);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 58);
        output.writeMessageNoTag(lineup);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 66);
        output.writeMessageNoTag(rotateInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(scene);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(lineup);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(rotateInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ABFBLEKMNME mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 42: {
            // scene
            input.readMessage(scene);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // lineup
            input.readMessage(lineup);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // rotateInfo
            input.readMessage(rotateInfo);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.scene, scene);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.lineup, lineup);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.rotateInfo, rotateInfo);
      }
      output.endObject();
    }

    @Override
    public ABFBLEKMNME mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 109254796: {
            if (input.isAtField(FieldNames.scene)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(scene);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1102671473: {
            if (input.isAtField(FieldNames.lineup)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(lineup);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -79064919:
          case 1864130834: {
            if (input.isAtField(FieldNames.rotateInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(rotateInfo);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ABFBLEKMNME clone() {
      return new ABFBLEKMNME().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ABFBLEKMNME parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ABFBLEKMNME(), data).checkInitialized();
    }

    public static ABFBLEKMNME parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ABFBLEKMNME(), input).checkInitialized();
    }

    public static ABFBLEKMNME parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ABFBLEKMNME(), input).checkInitialized();
    }

    /**
     * @return factory for creating ABFBLEKMNME messages
     */
    public static MessageFactory<ABFBLEKMNME> getFactory() {
      return ABFBLEKMNMEFactory.INSTANCE;
    }

    private enum ABFBLEKMNMEFactory implements MessageFactory<ABFBLEKMNME> {
      INSTANCE;

      @Override
      public ABFBLEKMNME create() {
        return ABFBLEKMNME.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName scene = FieldName.forField("scene");

      static final FieldName lineup = FieldName.forField("lineup");

      static final FieldName rotateInfo = FieldName.forField("rotateInfo", "rotate_info");
    }
  }
}
