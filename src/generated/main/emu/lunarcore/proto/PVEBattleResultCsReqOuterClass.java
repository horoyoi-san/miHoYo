// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedByte;
import us.hebi.quickbuf.RepeatedMessage;
import us.hebi.quickbuf.Utf8String;

public final class PVEBattleResultCsReqOuterClass {
  /**
   * Protobuf type {@code PVEBattleResultCsReq}
   */
  public static final class PVEBattleResultCsReq extends ProtoMessage<PVEBattleResultCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 client_version = 3;</code>
     */
    private int clientVersion;

    /**
     * <code>optional uint32 client_res_version = 6;</code>
     */
    private int clientResVersion;

    /**
     * <code>optional uint32 battle_id = 8;</code>
     */
    private int battleId;

    /**
     * <code>optional uint32 cost_time = 10;</code>
     */
    private int costTime;

    /**
     * <code>optional uint32 JCJFGOJFEGE = 13;</code>
     */
    private int jCJFGOJFEGE;

    /**
     * <code>optional uint32 stage_id = 15;</code>
     */
    private int stageId;

    /**
     * <code>optional .BattleEndStatus end_status = 14;</code>
     */
    private int endStatus;

    /**
     * <code>optional bool is_ai_consider_ultra_skill = 2;</code>
     */
    private boolean isAiConsiderUltraSkill;

    /**
     * <code>optional bool is_auto_fight = 11;</code>
     */
    private boolean isAutoFight;

    /**
     * <code>optional bool GJGKAGFPAGM = 12;</code>
     */
    private boolean gJGKAGFPAGM;

    /**
     * <code>optional .BattleStatistics stt = 9;</code>
     */
    private final BattleStatisticsOuterClass.BattleStatistics stt = BattleStatisticsOuterClass.BattleStatistics.newInstance();

    /**
     * <code>optional bytes turn_snapshot_hash = 5;</code>
     */
    private final RepeatedByte turnSnapshotHash = RepeatedByte.newEmptyInstance();

    /**
     * <code>optional string debug_extra_info = 1;</code>
     */
    private final Utf8String debugExtraInfo = Utf8String.newEmptyInstance();

    /**
     * <code>repeated .PVEBattleResultCsReq.HPEKEKIPJLFEntry HPEKEKIPJLF = 4;</code>
     */
    private final RepeatedMessage<HPEKEKIPJLFEntry> hPEKEKIPJLF = RepeatedMessage.newEmptyInstance(HPEKEKIPJLFEntry.getFactory());

    /**
     * <code>repeated .BattleOp op_list = 7;</code>
     */
    private final RepeatedMessage<BattleOpOuterClass.BattleOp> opList = RepeatedMessage.newEmptyInstance(BattleOpOuterClass.BattleOp.getFactory());

    private PVEBattleResultCsReq() {
    }

    /**
     * @return a new empty instance of {@code PVEBattleResultCsReq}
     */
    public static PVEBattleResultCsReq newInstance() {
      return new PVEBattleResultCsReq();
    }

    /**
     * <code>optional uint32 client_version = 3;</code>
     * @return whether the clientVersion field is set
     */
    public boolean hasClientVersion() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 client_version = 3;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearClientVersion() {
      bitField0_ &= ~0x00000001;
      clientVersion = 0;
      return this;
    }

    /**
     * <code>optional uint32 client_version = 3;</code>
     * @return the clientVersion
     */
    public int getClientVersion() {
      return clientVersion;
    }

    /**
     * <code>optional uint32 client_version = 3;</code>
     * @param value the clientVersion to set
     * @return this
     */
    public PVEBattleResultCsReq setClientVersion(final int value) {
      bitField0_ |= 0x00000001;
      clientVersion = value;
      return this;
    }

    /**
     * <code>optional uint32 client_res_version = 6;</code>
     * @return whether the clientResVersion field is set
     */
    public boolean hasClientResVersion() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 client_res_version = 6;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearClientResVersion() {
      bitField0_ &= ~0x00000002;
      clientResVersion = 0;
      return this;
    }

    /**
     * <code>optional uint32 client_res_version = 6;</code>
     * @return the clientResVersion
     */
    public int getClientResVersion() {
      return clientResVersion;
    }

    /**
     * <code>optional uint32 client_res_version = 6;</code>
     * @param value the clientResVersion to set
     * @return this
     */
    public PVEBattleResultCsReq setClientResVersion(final int value) {
      bitField0_ |= 0x00000002;
      clientResVersion = value;
      return this;
    }

    /**
     * <code>optional uint32 battle_id = 8;</code>
     * @return whether the battleId field is set
     */
    public boolean hasBattleId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 battle_id = 8;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearBattleId() {
      bitField0_ &= ~0x00000004;
      battleId = 0;
      return this;
    }

    /**
     * <code>optional uint32 battle_id = 8;</code>
     * @return the battleId
     */
    public int getBattleId() {
      return battleId;
    }

    /**
     * <code>optional uint32 battle_id = 8;</code>
     * @param value the battleId to set
     * @return this
     */
    public PVEBattleResultCsReq setBattleId(final int value) {
      bitField0_ |= 0x00000004;
      battleId = value;
      return this;
    }

    /**
     * <code>optional uint32 cost_time = 10;</code>
     * @return whether the costTime field is set
     */
    public boolean hasCostTime() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 cost_time = 10;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearCostTime() {
      bitField0_ &= ~0x00000008;
      costTime = 0;
      return this;
    }

    /**
     * <code>optional uint32 cost_time = 10;</code>
     * @return the costTime
     */
    public int getCostTime() {
      return costTime;
    }

    /**
     * <code>optional uint32 cost_time = 10;</code>
     * @param value the costTime to set
     * @return this
     */
    public PVEBattleResultCsReq setCostTime(final int value) {
      bitField0_ |= 0x00000008;
      costTime = value;
      return this;
    }

    /**
     * <code>optional uint32 JCJFGOJFEGE = 13;</code>
     * @return whether the jCJFGOJFEGE field is set
     */
    public boolean hasJCJFGOJFEGE() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 JCJFGOJFEGE = 13;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearJCJFGOJFEGE() {
      bitField0_ &= ~0x00000010;
      jCJFGOJFEGE = 0;
      return this;
    }

    /**
     * <code>optional uint32 JCJFGOJFEGE = 13;</code>
     * @return the jCJFGOJFEGE
     */
    public int getJCJFGOJFEGE() {
      return jCJFGOJFEGE;
    }

    /**
     * <code>optional uint32 JCJFGOJFEGE = 13;</code>
     * @param value the jCJFGOJFEGE to set
     * @return this
     */
    public PVEBattleResultCsReq setJCJFGOJFEGE(final int value) {
      bitField0_ |= 0x00000010;
      jCJFGOJFEGE = value;
      return this;
    }

    /**
     * <code>optional uint32 stage_id = 15;</code>
     * @return whether the stageId field is set
     */
    public boolean hasStageId() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 stage_id = 15;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearStageId() {
      bitField0_ &= ~0x00000020;
      stageId = 0;
      return this;
    }

    /**
     * <code>optional uint32 stage_id = 15;</code>
     * @return the stageId
     */
    public int getStageId() {
      return stageId;
    }

    /**
     * <code>optional uint32 stage_id = 15;</code>
     * @param value the stageId to set
     * @return this
     */
    public PVEBattleResultCsReq setStageId(final int value) {
      bitField0_ |= 0x00000020;
      stageId = value;
      return this;
    }

    /**
     * <code>optional .BattleEndStatus end_status = 14;</code>
     * @return whether the endStatus field is set
     */
    public boolean hasEndStatus() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional .BattleEndStatus end_status = 14;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearEndStatus() {
      bitField0_ &= ~0x00000040;
      endStatus = 0;
      return this;
    }

    /**
     * <code>optional .BattleEndStatus end_status = 14;</code>
     * @return the endStatus
     */
    public BattleEndStatusOuterClass.BattleEndStatus getEndStatus() {
      return BattleEndStatusOuterClass.BattleEndStatus.forNumber(endStatus);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link PVEBattleResultCsReq#getEndStatus()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getEndStatusValue() {
      return endStatus;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link BattleEndStatusOuterClass.BattleEndStatus}. Setting an invalid value
     * can cause {@link PVEBattleResultCsReq#getEndStatus()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public PVEBattleResultCsReq setEndStatusValue(final int value) {
      bitField0_ |= 0x00000040;
      endStatus = value;
      return this;
    }

    /**
     * <code>optional .BattleEndStatus end_status = 14;</code>
     * @param value the endStatus to set
     * @return this
     */
    public PVEBattleResultCsReq setEndStatus(
        final BattleEndStatusOuterClass.BattleEndStatus value) {
      bitField0_ |= 0x00000040;
      endStatus = value.getNumber();
      return this;
    }

    /**
     * <code>optional bool is_ai_consider_ultra_skill = 2;</code>
     * @return whether the isAiConsiderUltraSkill field is set
     */
    public boolean hasIsAiConsiderUltraSkill() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional bool is_ai_consider_ultra_skill = 2;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearIsAiConsiderUltraSkill() {
      bitField0_ &= ~0x00000080;
      isAiConsiderUltraSkill = false;
      return this;
    }

    /**
     * <code>optional bool is_ai_consider_ultra_skill = 2;</code>
     * @return the isAiConsiderUltraSkill
     */
    public boolean getIsAiConsiderUltraSkill() {
      return isAiConsiderUltraSkill;
    }

    /**
     * <code>optional bool is_ai_consider_ultra_skill = 2;</code>
     * @param value the isAiConsiderUltraSkill to set
     * @return this
     */
    public PVEBattleResultCsReq setIsAiConsiderUltraSkill(final boolean value) {
      bitField0_ |= 0x00000080;
      isAiConsiderUltraSkill = value;
      return this;
    }

    /**
     * <code>optional bool is_auto_fight = 11;</code>
     * @return whether the isAutoFight field is set
     */
    public boolean hasIsAutoFight() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional bool is_auto_fight = 11;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearIsAutoFight() {
      bitField0_ &= ~0x00000100;
      isAutoFight = false;
      return this;
    }

    /**
     * <code>optional bool is_auto_fight = 11;</code>
     * @return the isAutoFight
     */
    public boolean getIsAutoFight() {
      return isAutoFight;
    }

    /**
     * <code>optional bool is_auto_fight = 11;</code>
     * @param value the isAutoFight to set
     * @return this
     */
    public PVEBattleResultCsReq setIsAutoFight(final boolean value) {
      bitField0_ |= 0x00000100;
      isAutoFight = value;
      return this;
    }

    /**
     * <code>optional bool GJGKAGFPAGM = 12;</code>
     * @return whether the gJGKAGFPAGM field is set
     */
    public boolean hasGJGKAGFPAGM() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <code>optional bool GJGKAGFPAGM = 12;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearGJGKAGFPAGM() {
      bitField0_ &= ~0x00000200;
      gJGKAGFPAGM = false;
      return this;
    }

    /**
     * <code>optional bool GJGKAGFPAGM = 12;</code>
     * @return the gJGKAGFPAGM
     */
    public boolean getGJGKAGFPAGM() {
      return gJGKAGFPAGM;
    }

    /**
     * <code>optional bool GJGKAGFPAGM = 12;</code>
     * @param value the gJGKAGFPAGM to set
     * @return this
     */
    public PVEBattleResultCsReq setGJGKAGFPAGM(final boolean value) {
      bitField0_ |= 0x00000200;
      gJGKAGFPAGM = value;
      return this;
    }

    /**
     * <code>optional .BattleStatistics stt = 9;</code>
     * @return whether the stt field is set
     */
    public boolean hasStt() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <code>optional .BattleStatistics stt = 9;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearStt() {
      bitField0_ &= ~0x00000400;
      stt.clear();
      return this;
    }

    /**
     * <code>optional .BattleStatistics stt = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableStt()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public BattleStatisticsOuterClass.BattleStatistics getStt() {
      return stt;
    }

    /**
     * <code>optional .BattleStatistics stt = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public BattleStatisticsOuterClass.BattleStatistics getMutableStt() {
      bitField0_ |= 0x00000400;
      return stt;
    }

    /**
     * <code>optional .BattleStatistics stt = 9;</code>
     * @param value the stt to set
     * @return this
     */
    public PVEBattleResultCsReq setStt(final BattleStatisticsOuterClass.BattleStatistics value) {
      bitField0_ |= 0x00000400;
      stt.copyFrom(value);
      return this;
    }

    /**
     * <code>optional bytes turn_snapshot_hash = 5;</code>
     * @return whether the turnSnapshotHash field is set
     */
    public boolean hasTurnSnapshotHash() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <code>optional bytes turn_snapshot_hash = 5;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearTurnSnapshotHash() {
      bitField0_ &= ~0x00000800;
      turnSnapshotHash.clear();
      return this;
    }

    /**
     * <code>optional bytes turn_snapshot_hash = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableTurnSnapshotHash()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedByte getTurnSnapshotHash() {
      return turnSnapshotHash;
    }

    /**
     * <code>optional bytes turn_snapshot_hash = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedByte getMutableTurnSnapshotHash() {
      bitField0_ |= 0x00000800;
      return turnSnapshotHash;
    }

    /**
     * <code>optional bytes turn_snapshot_hash = 5;</code>
     * @param value the turnSnapshotHash to add
     * @return this
     */
    public PVEBattleResultCsReq addTurnSnapshotHash(final byte value) {
      bitField0_ |= 0x00000800;
      turnSnapshotHash.add(value);
      return this;
    }

    /**
     * <code>optional bytes turn_snapshot_hash = 5;</code>
     * @param values the turnSnapshotHash to add
     * @return this
     */
    public PVEBattleResultCsReq addAllTurnSnapshotHash(final byte... values) {
      bitField0_ |= 0x00000800;
      turnSnapshotHash.addAll(values);
      return this;
    }

    /**
     * <code>optional bytes turn_snapshot_hash = 5;</code>
     * @param values the turnSnapshotHash to set
     * @return this
     */
    public PVEBattleResultCsReq setTurnSnapshotHash(final byte... values) {
      bitField0_ |= 0x00000800;
      turnSnapshotHash.copyFrom(values);
      return this;
    }

    /**
     * <code>optional string debug_extra_info = 1;</code>
     * @return whether the debugExtraInfo field is set
     */
    public boolean hasDebugExtraInfo() {
      return (bitField0_ & 0x00001000) != 0;
    }

    /**
     * <code>optional string debug_extra_info = 1;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearDebugExtraInfo() {
      bitField0_ &= ~0x00001000;
      debugExtraInfo.clear();
      return this;
    }

    /**
     * <code>optional string debug_extra_info = 1;</code>
     * @return the debugExtraInfo
     */
    public String getDebugExtraInfo() {
      return debugExtraInfo.getString();
    }

    /**
     * <code>optional string debug_extra_info = 1;</code>
     * @return internal {@code Utf8String} representation of debugExtraInfo for reading
     */
    public Utf8String getDebugExtraInfoBytes() {
      return this.debugExtraInfo;
    }

    /**
     * <code>optional string debug_extra_info = 1;</code>
     * @return internal {@code Utf8String} representation of debugExtraInfo for modifications
     */
    public Utf8String getMutableDebugExtraInfoBytes() {
      bitField0_ |= 0x00001000;
      return this.debugExtraInfo;
    }

    /**
     * <code>optional string debug_extra_info = 1;</code>
     * @param value the debugExtraInfo to set
     * @return this
     */
    public PVEBattleResultCsReq setDebugExtraInfo(final CharSequence value) {
      bitField0_ |= 0x00001000;
      debugExtraInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string debug_extra_info = 1;</code>
     * @param value the debugExtraInfo to set
     * @return this
     */
    public PVEBattleResultCsReq setDebugExtraInfo(final Utf8String value) {
      bitField0_ |= 0x00001000;
      debugExtraInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .PVEBattleResultCsReq.HPEKEKIPJLFEntry HPEKEKIPJLF = 4;</code>
     * @return whether the hPEKEKIPJLF field is set
     */
    public boolean hasHPEKEKIPJLF() {
      return (bitField0_ & 0x00002000) != 0;
    }

    /**
     * <code>repeated .PVEBattleResultCsReq.HPEKEKIPJLFEntry HPEKEKIPJLF = 4;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearHPEKEKIPJLF() {
      bitField0_ &= ~0x00002000;
      hPEKEKIPJLF.clear();
      return this;
    }

    /**
     * <code>repeated .PVEBattleResultCsReq.HPEKEKIPJLFEntry HPEKEKIPJLF = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableHPEKEKIPJLF()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<HPEKEKIPJLFEntry> getHPEKEKIPJLF() {
      return hPEKEKIPJLF;
    }

    /**
     * <code>repeated .PVEBattleResultCsReq.HPEKEKIPJLFEntry HPEKEKIPJLF = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<HPEKEKIPJLFEntry> getMutableHPEKEKIPJLF() {
      bitField0_ |= 0x00002000;
      return hPEKEKIPJLF;
    }

    /**
     * <code>repeated .PVEBattleResultCsReq.HPEKEKIPJLFEntry HPEKEKIPJLF = 4;</code>
     * @param value the hPEKEKIPJLF to add
     * @return this
     */
    public PVEBattleResultCsReq addHPEKEKIPJLF(final HPEKEKIPJLFEntry value) {
      bitField0_ |= 0x00002000;
      hPEKEKIPJLF.add(value);
      return this;
    }

    /**
     * <code>repeated .PVEBattleResultCsReq.HPEKEKIPJLFEntry HPEKEKIPJLF = 4;</code>
     * @param values the hPEKEKIPJLF to add
     * @return this
     */
    public PVEBattleResultCsReq addAllHPEKEKIPJLF(final HPEKEKIPJLFEntry... values) {
      bitField0_ |= 0x00002000;
      hPEKEKIPJLF.addAll(values);
      return this;
    }

    /**
     * <code>repeated .BattleOp op_list = 7;</code>
     * @return whether the opList field is set
     */
    public boolean hasOpList() {
      return (bitField0_ & 0x00004000) != 0;
    }

    /**
     * <code>repeated .BattleOp op_list = 7;</code>
     * @return this
     */
    public PVEBattleResultCsReq clearOpList() {
      bitField0_ &= ~0x00004000;
      opList.clear();
      return this;
    }

    /**
     * <code>repeated .BattleOp op_list = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableOpList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<BattleOpOuterClass.BattleOp> getOpList() {
      return opList;
    }

    /**
     * <code>repeated .BattleOp op_list = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<BattleOpOuterClass.BattleOp> getMutableOpList() {
      bitField0_ |= 0x00004000;
      return opList;
    }

    /**
     * <code>repeated .BattleOp op_list = 7;</code>
     * @param value the opList to add
     * @return this
     */
    public PVEBattleResultCsReq addOpList(final BattleOpOuterClass.BattleOp value) {
      bitField0_ |= 0x00004000;
      opList.add(value);
      return this;
    }

    /**
     * <code>repeated .BattleOp op_list = 7;</code>
     * @param values the opList to add
     * @return this
     */
    public PVEBattleResultCsReq addAllOpList(final BattleOpOuterClass.BattleOp... values) {
      bitField0_ |= 0x00004000;
      opList.addAll(values);
      return this;
    }

    @Override
    public PVEBattleResultCsReq copyFrom(final PVEBattleResultCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        clientVersion = other.clientVersion;
        clientResVersion = other.clientResVersion;
        battleId = other.battleId;
        costTime = other.costTime;
        jCJFGOJFEGE = other.jCJFGOJFEGE;
        stageId = other.stageId;
        endStatus = other.endStatus;
        isAiConsiderUltraSkill = other.isAiConsiderUltraSkill;
        isAutoFight = other.isAutoFight;
        gJGKAGFPAGM = other.gJGKAGFPAGM;
        stt.copyFrom(other.stt);
        turnSnapshotHash.copyFrom(other.turnSnapshotHash);
        debugExtraInfo.copyFrom(other.debugExtraInfo);
        hPEKEKIPJLF.copyFrom(other.hPEKEKIPJLF);
        opList.copyFrom(other.opList);
      }
      return this;
    }

    @Override
    public PVEBattleResultCsReq mergeFrom(final PVEBattleResultCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasClientVersion()) {
        setClientVersion(other.clientVersion);
      }
      if (other.hasClientResVersion()) {
        setClientResVersion(other.clientResVersion);
      }
      if (other.hasBattleId()) {
        setBattleId(other.battleId);
      }
      if (other.hasCostTime()) {
        setCostTime(other.costTime);
      }
      if (other.hasJCJFGOJFEGE()) {
        setJCJFGOJFEGE(other.jCJFGOJFEGE);
      }
      if (other.hasStageId()) {
        setStageId(other.stageId);
      }
      if (other.hasEndStatus()) {
        setEndStatusValue(other.endStatus);
      }
      if (other.hasIsAiConsiderUltraSkill()) {
        setIsAiConsiderUltraSkill(other.isAiConsiderUltraSkill);
      }
      if (other.hasIsAutoFight()) {
        setIsAutoFight(other.isAutoFight);
      }
      if (other.hasGJGKAGFPAGM()) {
        setGJGKAGFPAGM(other.gJGKAGFPAGM);
      }
      if (other.hasStt()) {
        getMutableStt().mergeFrom(other.stt);
      }
      if (other.hasTurnSnapshotHash()) {
        getMutableTurnSnapshotHash().copyFrom(other.turnSnapshotHash);
      }
      if (other.hasDebugExtraInfo()) {
        getMutableDebugExtraInfoBytes().copyFrom(other.debugExtraInfo);
      }
      if (other.hasHPEKEKIPJLF()) {
        getMutableHPEKEKIPJLF().addAll(other.hPEKEKIPJLF);
      }
      if (other.hasOpList()) {
        getMutableOpList().addAll(other.opList);
      }
      return this;
    }

    @Override
    public PVEBattleResultCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      clientVersion = 0;
      clientResVersion = 0;
      battleId = 0;
      costTime = 0;
      jCJFGOJFEGE = 0;
      stageId = 0;
      endStatus = 0;
      isAiConsiderUltraSkill = false;
      isAutoFight = false;
      gJGKAGFPAGM = false;
      stt.clear();
      turnSnapshotHash.clear();
      debugExtraInfo.clear();
      hPEKEKIPJLF.clear();
      opList.clear();
      return this;
    }

    @Override
    public PVEBattleResultCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      stt.clearQuick();
      turnSnapshotHash.clear();
      debugExtraInfo.clear();
      hPEKEKIPJLF.clearQuick();
      opList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof PVEBattleResultCsReq)) {
        return false;
      }
      PVEBattleResultCsReq other = (PVEBattleResultCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasClientVersion() || clientVersion == other.clientVersion)
        && (!hasClientResVersion() || clientResVersion == other.clientResVersion)
        && (!hasBattleId() || battleId == other.battleId)
        && (!hasCostTime() || costTime == other.costTime)
        && (!hasJCJFGOJFEGE() || jCJFGOJFEGE == other.jCJFGOJFEGE)
        && (!hasStageId() || stageId == other.stageId)
        && (!hasEndStatus() || endStatus == other.endStatus)
        && (!hasIsAiConsiderUltraSkill() || isAiConsiderUltraSkill == other.isAiConsiderUltraSkill)
        && (!hasIsAutoFight() || isAutoFight == other.isAutoFight)
        && (!hasGJGKAGFPAGM() || gJGKAGFPAGM == other.gJGKAGFPAGM)
        && (!hasStt() || stt.equals(other.stt))
        && (!hasTurnSnapshotHash() || turnSnapshotHash.equals(other.turnSnapshotHash))
        && (!hasDebugExtraInfo() || debugExtraInfo.equals(other.debugExtraInfo))
        && (!hasHPEKEKIPJLF() || hPEKEKIPJLF.equals(other.hPEKEKIPJLF))
        && (!hasOpList() || opList.equals(other.opList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(clientVersion);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(clientResVersion);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(battleId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(costTime);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(jCJFGOJFEGE);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(stageId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 112);
        output.writeEnumNoTag(endStatus);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 16);
        output.writeBoolNoTag(isAiConsiderUltraSkill);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 88);
        output.writeBoolNoTag(isAutoFight);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawByte((byte) 96);
        output.writeBoolNoTag(gJGKAGFPAGM);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRawByte((byte) 74);
        output.writeMessageNoTag(stt);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRawByte((byte) 42);
        output.writeBytesNoTag(turnSnapshotHash);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeRawByte((byte) 10);
        output.writeStringNoTag(debugExtraInfo);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        for (int i = 0; i < hPEKEKIPJLF.length(); i++) {
          output.writeRawByte((byte) 34);
          output.writeMessageNoTag(hPEKEKIPJLF.get(i));
        }
      }
      if ((bitField0_ & 0x00004000) != 0) {
        for (int i = 0; i < opList.length(); i++) {
          output.writeRawByte((byte) 58);
          output.writeMessageNoTag(opList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(clientVersion);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(clientResVersion);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(battleId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(costTime);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(jCJFGOJFEGE);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(stageId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(endStatus);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(stt);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += 1 + ProtoSink.computeBytesSizeNoTag(turnSnapshotHash);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(debugExtraInfo);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        size += (1 * hPEKEKIPJLF.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(hPEKEKIPJLF);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        size += (1 * opList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(opList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public PVEBattleResultCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // clientVersion
            clientVersion = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // clientResVersion
            clientResVersion = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // battleId
            battleId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // costTime
            costTime = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // jCJFGOJFEGE
            jCJFGOJFEGE = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // stageId
            stageId = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // endStatus
            final int value = input.readInt32();
            if (BattleEndStatusOuterClass.BattleEndStatus.forNumber(value) != null) {
              endStatus = value;
              bitField0_ |= 0x00000040;
            }
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // isAiConsiderUltraSkill
            isAiConsiderUltraSkill = input.readBool();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // isAutoFight
            isAutoFight = input.readBool();
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // gJGKAGFPAGM
            gJGKAGFPAGM = input.readBool();
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // stt
            input.readMessage(stt);
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // turnSnapshotHash
            input.readBytes(turnSnapshotHash);
            bitField0_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // debugExtraInfo
            input.readString(debugExtraInfo);
            bitField0_ |= 0x00001000;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // hPEKEKIPJLF
            tag = input.readRepeatedMessage(hPEKEKIPJLF, tag);
            bitField0_ |= 0x00002000;
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // opList
            tag = input.readRepeatedMessage(opList, tag);
            bitField0_ |= 0x00004000;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.clientVersion, clientVersion);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.clientResVersion, clientResVersion);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.battleId, battleId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.costTime, costTime);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.jCJFGOJFEGE, jCJFGOJFEGE);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.stageId, stageId);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeEnum(FieldNames.endStatus, endStatus, BattleEndStatusOuterClass.BattleEndStatus.converter());
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeBool(FieldNames.isAiConsiderUltraSkill, isAiConsiderUltraSkill);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeBool(FieldNames.isAutoFight, isAutoFight);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeBool(FieldNames.gJGKAGFPAGM, gJGKAGFPAGM);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeMessage(FieldNames.stt, stt);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeBytes(FieldNames.turnSnapshotHash, turnSnapshotHash);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeString(FieldNames.debugExtraInfo, debugExtraInfo);
      }
      if ((bitField0_ & 0x00002000) != 0) {
        output.writeRepeatedMessage(FieldNames.hPEKEKIPJLF, hPEKEKIPJLF);
      }
      if ((bitField0_ & 0x00004000) != 0) {
        output.writeRepeatedMessage(FieldNames.opList, opList);
      }
      output.endObject();
    }

    @Override
    public PVEBattleResultCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 771880589:
          case -1506231196: {
            if (input.isAtField(FieldNames.clientVersion)) {
              if (!input.trySkipNullValue()) {
                clientVersion = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2005674429:
          case -349907515: {
            if (input.isAtField(FieldNames.clientResVersion)) {
              if (!input.trySkipNullValue()) {
                clientResVersion = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1678308365:
          case -487930366: {
            if (input.isAtField(FieldNames.battleId)) {
              if (!input.trySkipNullValue()) {
                battleId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -424687558:
          case -269929473: {
            if (input.isAtField(FieldNames.costTime)) {
              if (!input.trySkipNullValue()) {
                costTime = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1938527082: {
            if (input.isAtField(FieldNames.jCJFGOJFEGE)) {
              if (!input.trySkipNullValue()) {
                jCJFGOJFEGE = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1897528135:
          case 1306191356: {
            if (input.isAtField(FieldNames.stageId)) {
              if (!input.trySkipNullValue()) {
                stageId = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1608709293:
          case 378841046: {
            if (input.isAtField(FieldNames.endStatus)) {
              if (!input.trySkipNullValue()) {
                final BattleEndStatusOuterClass.BattleEndStatus value = input.readEnum(BattleEndStatusOuterClass.BattleEndStatus.converter());
                if (value != null) {
                  endStatus = value.getNumber();
                  bitField0_ |= 0x00000040;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -792003792:
          case 524172826: {
            if (input.isAtField(FieldNames.isAiConsiderUltraSkill)) {
              if (!input.trySkipNullValue()) {
                isAiConsiderUltraSkill = input.readBool();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1478667881:
          case -2041908299: {
            if (input.isAtField(FieldNames.isAutoFight)) {
              if (!input.trySkipNullValue()) {
                isAutoFight = input.readBool();
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1647844496: {
            if (input.isAtField(FieldNames.gJGKAGFPAGM)) {
              if (!input.trySkipNullValue()) {
                gJGKAGFPAGM = input.readBool();
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 114227: {
            if (input.isAtField(FieldNames.stt)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(stt);
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 716212751:
          case 397070951: {
            if (input.isAtField(FieldNames.turnSnapshotHash)) {
              if (!input.trySkipNullValue()) {
                input.readBytes(turnSnapshotHash);
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 79420363:
          case -1891946263: {
            if (input.isAtField(FieldNames.debugExtraInfo)) {
              if (!input.trySkipNullValue()) {
                input.readString(debugExtraInfo);
                bitField0_ |= 0x00001000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1659064425: {
            if (input.isAtField(FieldNames.hPEKEKIPJLF)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(hPEKEKIPJLF);
                bitField0_ |= 0x00002000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1011328481:
          case -1268785092: {
            if (input.isAtField(FieldNames.opList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(opList);
                bitField0_ |= 0x00004000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public PVEBattleResultCsReq clone() {
      return new PVEBattleResultCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static PVEBattleResultCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new PVEBattleResultCsReq(), data).checkInitialized();
    }

    public static PVEBattleResultCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PVEBattleResultCsReq(), input).checkInitialized();
    }

    public static PVEBattleResultCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PVEBattleResultCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating PVEBattleResultCsReq messages
     */
    public static MessageFactory<PVEBattleResultCsReq> getFactory() {
      return PVEBattleResultCsReqFactory.INSTANCE;
    }

    /**
     * Protobuf type {@code HPEKEKIPJLFEntry}
     */
    public static final class HPEKEKIPJLFEntry extends ProtoMessage<HPEKEKIPJLFEntry> implements Cloneable {
      private static final long serialVersionUID = 0L;

      /**
       * <code>optional uint32 value = 2;</code>
       */
      private int value_;

      /**
       * <code>optional string key = 1;</code>
       */
      private final Utf8String key = Utf8String.newEmptyInstance();

      private HPEKEKIPJLFEntry() {
      }

      /**
       * @return a new empty instance of {@code HPEKEKIPJLFEntry}
       */
      public static HPEKEKIPJLFEntry newInstance() {
        return new HPEKEKIPJLFEntry();
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return whether the value_ field is set
       */
      public boolean hasValue() {
        return (bitField0_ & 0x00000001) != 0;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return this
       */
      public HPEKEKIPJLFEntry clearValue() {
        bitField0_ &= ~0x00000001;
        value_ = 0;
        return this;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @return the value_
       */
      public int getValue() {
        return value_;
      }

      /**
       * <code>optional uint32 value = 2;</code>
       * @param value the value_ to set
       * @return this
       */
      public HPEKEKIPJLFEntry setValue(final int value) {
        bitField0_ |= 0x00000001;
        value_ = value;
        return this;
      }

      /**
       * <code>optional string key = 1;</code>
       * @return whether the key field is set
       */
      public boolean hasKey() {
        return (bitField0_ & 0x00000002) != 0;
      }

      /**
       * <code>optional string key = 1;</code>
       * @return this
       */
      public HPEKEKIPJLFEntry clearKey() {
        bitField0_ &= ~0x00000002;
        key.clear();
        return this;
      }

      /**
       * <code>optional string key = 1;</code>
       * @return the key
       */
      public String getKey() {
        return key.getString();
      }

      /**
       * <code>optional string key = 1;</code>
       * @return internal {@code Utf8String} representation of key for reading
       */
      public Utf8String getKeyBytes() {
        return this.key;
      }

      /**
       * <code>optional string key = 1;</code>
       * @return internal {@code Utf8String} representation of key for modifications
       */
      public Utf8String getMutableKeyBytes() {
        bitField0_ |= 0x00000002;
        return this.key;
      }

      /**
       * <code>optional string key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public HPEKEKIPJLFEntry setKey(final CharSequence value) {
        bitField0_ |= 0x00000002;
        key.copyFrom(value);
        return this;
      }

      /**
       * <code>optional string key = 1;</code>
       * @param value the key to set
       * @return this
       */
      public HPEKEKIPJLFEntry setKey(final Utf8String value) {
        bitField0_ |= 0x00000002;
        key.copyFrom(value);
        return this;
      }

      @Override
      public HPEKEKIPJLFEntry copyFrom(final HPEKEKIPJLFEntry other) {
        cachedSize = other.cachedSize;
        if ((bitField0_ | other.bitField0_) != 0) {
          bitField0_ = other.bitField0_;
          value_ = other.value_;
          key.copyFrom(other.key);
        }
        return this;
      }

      @Override
      public HPEKEKIPJLFEntry mergeFrom(final HPEKEKIPJLFEntry other) {
        if (other.isEmpty()) {
          return this;
        }
        cachedSize = -1;
        if (other.hasValue()) {
          setValue(other.value_);
        }
        if (other.hasKey()) {
          getMutableKeyBytes().copyFrom(other.key);
        }
        return this;
      }

      @Override
      public HPEKEKIPJLFEntry clear() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        value_ = 0;
        key.clear();
        return this;
      }

      @Override
      public HPEKEKIPJLFEntry clearQuick() {
        if (isEmpty()) {
          return this;
        }
        cachedSize = -1;
        bitField0_ = 0;
        key.clear();
        return this;
      }

      @Override
      public boolean equals(Object o) {
        if (o == this) {
          return true;
        }
        if (!(o instanceof HPEKEKIPJLFEntry)) {
          return false;
        }
        HPEKEKIPJLFEntry other = (HPEKEKIPJLFEntry) o;
        return bitField0_ == other.bitField0_
          && (!hasValue() || value_ == other.value_)
          && (!hasKey() || key.equals(other.key));
      }

      @Override
      public void writeTo(final ProtoSink output) throws IOException {
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(value_);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeRawByte((byte) 10);
          output.writeStringNoTag(key);
        }
      }

      @Override
      protected int computeSerializedSize() {
        int size = 0;
        if ((bitField0_ & 0x00000001) != 0) {
          size += 1 + ProtoSink.computeUInt32SizeNoTag(value_);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          size += 1 + ProtoSink.computeStringSizeNoTag(key);
        }
        return size;
      }

      @Override
      @SuppressWarnings("fallthrough")
      public HPEKEKIPJLFEntry mergeFrom(final ProtoSource input) throws IOException {
        // Enabled Fall-Through Optimization (QuickBuffers)
        int tag = input.readTag();
        while (true) {
          switch (tag) {
            case 16: {
              // value_
              value_ = input.readUInt32();
              bitField0_ |= 0x00000001;
              tag = input.readTag();
              if (tag != 10) {
                break;
              }
            }
            case 10: {
              // key
              input.readString(key);
              bitField0_ |= 0x00000002;
              tag = input.readTag();
              if (tag != 0) {
                break;
              }
            }
            case 0: {
              return this;
            }
            default: {
              if (!input.skipField(tag)) {
                return this;
              }
              tag = input.readTag();
              break;
            }
          }
        }
      }

      @Override
      public void writeTo(final JsonSink output) throws IOException {
        output.beginObject();
        if ((bitField0_ & 0x00000001) != 0) {
          output.writeUInt32(FieldNames.value_, value_);
        }
        if ((bitField0_ & 0x00000002) != 0) {
          output.writeString(FieldNames.key, key);
        }
        output.endObject();
      }

      @Override
      public HPEKEKIPJLFEntry mergeFrom(final JsonSource input) throws IOException {
        if (!input.beginObject()) {
          return this;
        }
        while (!input.isAtEnd()) {
          switch (input.readFieldHash()) {
            case 111972721: {
              if (input.isAtField(FieldNames.value_)) {
                if (!input.trySkipNullValue()) {
                  value_ = input.readUInt32();
                  bitField0_ |= 0x00000001;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            case 106079: {
              if (input.isAtField(FieldNames.key)) {
                if (!input.trySkipNullValue()) {
                  input.readString(key);
                  bitField0_ |= 0x00000002;
                }
              } else {
                input.skipUnknownField();
              }
              break;
            }
            default: {
              input.skipUnknownField();
              break;
            }
          }
        }
        input.endObject();
        return this;
      }

      @Override
      public HPEKEKIPJLFEntry clone() {
        return new HPEKEKIPJLFEntry().copyFrom(this);
      }

      @Override
      public boolean isEmpty() {
        return ((bitField0_) == 0);
      }

      public static HPEKEKIPJLFEntry parseFrom(final byte[] data) throws
          InvalidProtocolBufferException {
        return ProtoMessage.mergeFrom(new HPEKEKIPJLFEntry(), data).checkInitialized();
      }

      public static HPEKEKIPJLFEntry parseFrom(final ProtoSource input) throws IOException {
        return ProtoMessage.mergeFrom(new HPEKEKIPJLFEntry(), input).checkInitialized();
      }

      public static HPEKEKIPJLFEntry parseFrom(final JsonSource input) throws IOException {
        return ProtoMessage.mergeFrom(new HPEKEKIPJLFEntry(), input).checkInitialized();
      }

      /**
       * @return factory for creating HPEKEKIPJLFEntry messages
       */
      public static MessageFactory<HPEKEKIPJLFEntry> getFactory() {
        return HPEKEKIPJLFEntryFactory.INSTANCE;
      }

      private enum HPEKEKIPJLFEntryFactory implements MessageFactory<HPEKEKIPJLFEntry> {
        INSTANCE;

        @Override
        public HPEKEKIPJLFEntry create() {
          return HPEKEKIPJLFEntry.newInstance();
        }
      }

      /**
       * Contains name constants used for serializing JSON
       */
      static class FieldNames {
        static final FieldName value_ = FieldName.forField("value");

        static final FieldName key = FieldName.forField("key");
      }
    }

    private enum PVEBattleResultCsReqFactory implements MessageFactory<PVEBattleResultCsReq> {
      INSTANCE;

      @Override
      public PVEBattleResultCsReq create() {
        return PVEBattleResultCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName clientVersion = FieldName.forField("clientVersion", "client_version");

      static final FieldName clientResVersion = FieldName.forField("clientResVersion", "client_res_version");

      static final FieldName battleId = FieldName.forField("battleId", "battle_id");

      static final FieldName costTime = FieldName.forField("costTime", "cost_time");

      static final FieldName jCJFGOJFEGE = FieldName.forField("JCJFGOJFEGE");

      static final FieldName stageId = FieldName.forField("stageId", "stage_id");

      static final FieldName endStatus = FieldName.forField("endStatus", "end_status");

      static final FieldName isAiConsiderUltraSkill = FieldName.forField("isAiConsiderUltraSkill", "is_ai_consider_ultra_skill");

      static final FieldName isAutoFight = FieldName.forField("isAutoFight", "is_auto_fight");

      static final FieldName gJGKAGFPAGM = FieldName.forField("GJGKAGFPAGM");

      static final FieldName stt = FieldName.forField("stt");

      static final FieldName turnSnapshotHash = FieldName.forField("turnSnapshotHash", "turn_snapshot_hash");

      static final FieldName debugExtraInfo = FieldName.forField("debugExtraInfo", "debug_extra_info");

      static final FieldName hPEKEKIPJLF = FieldName.forField("HPEKEKIPJLF");

      static final FieldName opList = FieldName.forField("opList", "op_list");
    }
  }
}
