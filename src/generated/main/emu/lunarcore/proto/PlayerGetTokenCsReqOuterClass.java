// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class PlayerGetTokenCsReqOuterClass {
  /**
   * Protobuf type {@code PlayerGetTokenCsReq}
   */
  public static final class PlayerGetTokenCsReq extends ProtoMessage<PlayerGetTokenCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 uid = 4;</code>
     */
    private int uid;

    /**
     * <code>optional uint32 FGOJLPAEJEC = 6;</code>
     */
    private int fGOJLPAEJEC;

    /**
     * <code>optional uint32 platform_type = 7;</code>
     */
    private int platformType;

    /**
     * <code>optional uint32 ICMFPNPIJJF = 8;</code>
     */
    private int iCMFPNPIJJF;

    /**
     * <code>optional uint32 channel_id = 11;</code>
     */
    private int channelId;

    /**
     * <code>optional string token = 3;</code>
     */
    private final Utf8String token = Utf8String.newEmptyInstance();

    /**
     * <code>optional string account_uid = 9;</code>
     */
    private final Utf8String accountUid = Utf8String.newEmptyInstance();

    private PlayerGetTokenCsReq() {
    }

    /**
     * @return a new empty instance of {@code PlayerGetTokenCsReq}
     */
    public static PlayerGetTokenCsReq newInstance() {
      return new PlayerGetTokenCsReq();
    }

    /**
     * <code>optional uint32 uid = 4;</code>
     * @return whether the uid field is set
     */
    public boolean hasUid() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 uid = 4;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearUid() {
      bitField0_ &= ~0x00000001;
      uid = 0;
      return this;
    }

    /**
     * <code>optional uint32 uid = 4;</code>
     * @return the uid
     */
    public int getUid() {
      return uid;
    }

    /**
     * <code>optional uint32 uid = 4;</code>
     * @param value the uid to set
     * @return this
     */
    public PlayerGetTokenCsReq setUid(final int value) {
      bitField0_ |= 0x00000001;
      uid = value;
      return this;
    }

    /**
     * <code>optional uint32 FGOJLPAEJEC = 6;</code>
     * @return whether the fGOJLPAEJEC field is set
     */
    public boolean hasFGOJLPAEJEC() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 FGOJLPAEJEC = 6;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearFGOJLPAEJEC() {
      bitField0_ &= ~0x00000002;
      fGOJLPAEJEC = 0;
      return this;
    }

    /**
     * <code>optional uint32 FGOJLPAEJEC = 6;</code>
     * @return the fGOJLPAEJEC
     */
    public int getFGOJLPAEJEC() {
      return fGOJLPAEJEC;
    }

    /**
     * <code>optional uint32 FGOJLPAEJEC = 6;</code>
     * @param value the fGOJLPAEJEC to set
     * @return this
     */
    public PlayerGetTokenCsReq setFGOJLPAEJEC(final int value) {
      bitField0_ |= 0x00000002;
      fGOJLPAEJEC = value;
      return this;
    }

    /**
     * <code>optional uint32 platform_type = 7;</code>
     * @return whether the platformType field is set
     */
    public boolean hasPlatformType() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 platform_type = 7;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearPlatformType() {
      bitField0_ &= ~0x00000004;
      platformType = 0;
      return this;
    }

    /**
     * <code>optional uint32 platform_type = 7;</code>
     * @return the platformType
     */
    public int getPlatformType() {
      return platformType;
    }

    /**
     * <code>optional uint32 platform_type = 7;</code>
     * @param value the platformType to set
     * @return this
     */
    public PlayerGetTokenCsReq setPlatformType(final int value) {
      bitField0_ |= 0x00000004;
      platformType = value;
      return this;
    }

    /**
     * <code>optional uint32 ICMFPNPIJJF = 8;</code>
     * @return whether the iCMFPNPIJJF field is set
     */
    public boolean hasICMFPNPIJJF() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 ICMFPNPIJJF = 8;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearICMFPNPIJJF() {
      bitField0_ &= ~0x00000008;
      iCMFPNPIJJF = 0;
      return this;
    }

    /**
     * <code>optional uint32 ICMFPNPIJJF = 8;</code>
     * @return the iCMFPNPIJJF
     */
    public int getICMFPNPIJJF() {
      return iCMFPNPIJJF;
    }

    /**
     * <code>optional uint32 ICMFPNPIJJF = 8;</code>
     * @param value the iCMFPNPIJJF to set
     * @return this
     */
    public PlayerGetTokenCsReq setICMFPNPIJJF(final int value) {
      bitField0_ |= 0x00000008;
      iCMFPNPIJJF = value;
      return this;
    }

    /**
     * <code>optional uint32 channel_id = 11;</code>
     * @return whether the channelId field is set
     */
    public boolean hasChannelId() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 channel_id = 11;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearChannelId() {
      bitField0_ &= ~0x00000010;
      channelId = 0;
      return this;
    }

    /**
     * <code>optional uint32 channel_id = 11;</code>
     * @return the channelId
     */
    public int getChannelId() {
      return channelId;
    }

    /**
     * <code>optional uint32 channel_id = 11;</code>
     * @param value the channelId to set
     * @return this
     */
    public PlayerGetTokenCsReq setChannelId(final int value) {
      bitField0_ |= 0x00000010;
      channelId = value;
      return this;
    }

    /**
     * <code>optional string token = 3;</code>
     * @return whether the token field is set
     */
    public boolean hasToken() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional string token = 3;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearToken() {
      bitField0_ &= ~0x00000020;
      token.clear();
      return this;
    }

    /**
     * <code>optional string token = 3;</code>
     * @return the token
     */
    public String getToken() {
      return token.getString();
    }

    /**
     * <code>optional string token = 3;</code>
     * @return internal {@code Utf8String} representation of token for reading
     */
    public Utf8String getTokenBytes() {
      return this.token;
    }

    /**
     * <code>optional string token = 3;</code>
     * @return internal {@code Utf8String} representation of token for modifications
     */
    public Utf8String getMutableTokenBytes() {
      bitField0_ |= 0x00000020;
      return this.token;
    }

    /**
     * <code>optional string token = 3;</code>
     * @param value the token to set
     * @return this
     */
    public PlayerGetTokenCsReq setToken(final CharSequence value) {
      bitField0_ |= 0x00000020;
      token.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string token = 3;</code>
     * @param value the token to set
     * @return this
     */
    public PlayerGetTokenCsReq setToken(final Utf8String value) {
      bitField0_ |= 0x00000020;
      token.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string account_uid = 9;</code>
     * @return whether the accountUid field is set
     */
    public boolean hasAccountUid() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional string account_uid = 9;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearAccountUid() {
      bitField0_ &= ~0x00000040;
      accountUid.clear();
      return this;
    }

    /**
     * <code>optional string account_uid = 9;</code>
     * @return the accountUid
     */
    public String getAccountUid() {
      return accountUid.getString();
    }

    /**
     * <code>optional string account_uid = 9;</code>
     * @return internal {@code Utf8String} representation of accountUid for reading
     */
    public Utf8String getAccountUidBytes() {
      return this.accountUid;
    }

    /**
     * <code>optional string account_uid = 9;</code>
     * @return internal {@code Utf8String} representation of accountUid for modifications
     */
    public Utf8String getMutableAccountUidBytes() {
      bitField0_ |= 0x00000040;
      return this.accountUid;
    }

    /**
     * <code>optional string account_uid = 9;</code>
     * @param value the accountUid to set
     * @return this
     */
    public PlayerGetTokenCsReq setAccountUid(final CharSequence value) {
      bitField0_ |= 0x00000040;
      accountUid.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string account_uid = 9;</code>
     * @param value the accountUid to set
     * @return this
     */
    public PlayerGetTokenCsReq setAccountUid(final Utf8String value) {
      bitField0_ |= 0x00000040;
      accountUid.copyFrom(value);
      return this;
    }

    @Override
    public PlayerGetTokenCsReq copyFrom(final PlayerGetTokenCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        uid = other.uid;
        fGOJLPAEJEC = other.fGOJLPAEJEC;
        platformType = other.platformType;
        iCMFPNPIJJF = other.iCMFPNPIJJF;
        channelId = other.channelId;
        token.copyFrom(other.token);
        accountUid.copyFrom(other.accountUid);
      }
      return this;
    }

    @Override
    public PlayerGetTokenCsReq mergeFrom(final PlayerGetTokenCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasUid()) {
        setUid(other.uid);
      }
      if (other.hasFGOJLPAEJEC()) {
        setFGOJLPAEJEC(other.fGOJLPAEJEC);
      }
      if (other.hasPlatformType()) {
        setPlatformType(other.platformType);
      }
      if (other.hasICMFPNPIJJF()) {
        setICMFPNPIJJF(other.iCMFPNPIJJF);
      }
      if (other.hasChannelId()) {
        setChannelId(other.channelId);
      }
      if (other.hasToken()) {
        getMutableTokenBytes().copyFrom(other.token);
      }
      if (other.hasAccountUid()) {
        getMutableAccountUidBytes().copyFrom(other.accountUid);
      }
      return this;
    }

    @Override
    public PlayerGetTokenCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      uid = 0;
      fGOJLPAEJEC = 0;
      platformType = 0;
      iCMFPNPIJJF = 0;
      channelId = 0;
      token.clear();
      accountUid.clear();
      return this;
    }

    @Override
    public PlayerGetTokenCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      token.clear();
      accountUid.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof PlayerGetTokenCsReq)) {
        return false;
      }
      PlayerGetTokenCsReq other = (PlayerGetTokenCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasUid() || uid == other.uid)
        && (!hasFGOJLPAEJEC() || fGOJLPAEJEC == other.fGOJLPAEJEC)
        && (!hasPlatformType() || platformType == other.platformType)
        && (!hasICMFPNPIJJF() || iCMFPNPIJJF == other.iCMFPNPIJJF)
        && (!hasChannelId() || channelId == other.channelId)
        && (!hasToken() || token.equals(other.token))
        && (!hasAccountUid() || accountUid.equals(other.accountUid));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(uid);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(fGOJLPAEJEC);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(platformType);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(iCMFPNPIJJF);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(channelId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 26);
        output.writeStringNoTag(token);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 74);
        output.writeStringNoTag(accountUid);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(uid);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fGOJLPAEJEC);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(platformType);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(iCMFPNPIJJF);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(channelId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(token);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(accountUid);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public PlayerGetTokenCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // uid
            uid = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // fGOJLPAEJEC
            fGOJLPAEJEC = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // platformType
            platformType = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // iCMFPNPIJJF
            iCMFPNPIJJF = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // channelId
            channelId = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // token
            input.readString(token);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // accountUid
            input.readString(accountUid);
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.uid, uid);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.fGOJLPAEJEC, fGOJLPAEJEC);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.platformType, platformType);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.iCMFPNPIJJF, iCMFPNPIJJF);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.channelId, channelId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeString(FieldNames.token, token);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeString(FieldNames.accountUid, accountUid);
      }
      output.endObject();
    }

    @Override
    public PlayerGetTokenCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 115792: {
            if (input.isAtField(FieldNames.uid)) {
              if (!input.trySkipNullValue()) {
                uid = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2142123748: {
            if (input.isAtField(FieldNames.fGOJLPAEJEC)) {
              if (!input.trySkipNullValue()) {
                fGOJLPAEJEC = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 155581005:
          case 538062726: {
            if (input.isAtField(FieldNames.platformType)) {
              if (!input.trySkipNullValue()) {
                platformType = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1982687132: {
            if (input.isAtField(FieldNames.iCMFPNPIJJF)) {
              if (!input.trySkipNullValue()) {
                iCMFPNPIJJF = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1461735806:
          case -1930808873: {
            if (input.isAtField(FieldNames.channelId)) {
              if (!input.trySkipNullValue()) {
                channelId = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 110541305: {
            if (input.isAtField(FieldNames.token)) {
              if (!input.trySkipNullValue()) {
                input.readString(token);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -803342621:
          case 866492222: {
            if (input.isAtField(FieldNames.accountUid)) {
              if (!input.trySkipNullValue()) {
                input.readString(accountUid);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public PlayerGetTokenCsReq clone() {
      return new PlayerGetTokenCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static PlayerGetTokenCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new PlayerGetTokenCsReq(), data).checkInitialized();
    }

    public static PlayerGetTokenCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerGetTokenCsReq(), input).checkInitialized();
    }

    public static PlayerGetTokenCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerGetTokenCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating PlayerGetTokenCsReq messages
     */
    public static MessageFactory<PlayerGetTokenCsReq> getFactory() {
      return PlayerGetTokenCsReqFactory.INSTANCE;
    }

    private enum PlayerGetTokenCsReqFactory implements MessageFactory<PlayerGetTokenCsReq> {
      INSTANCE;

      @Override
      public PlayerGetTokenCsReq create() {
        return PlayerGetTokenCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName uid = FieldName.forField("uid");

      static final FieldName fGOJLPAEJEC = FieldName.forField("FGOJLPAEJEC");

      static final FieldName platformType = FieldName.forField("platformType", "platform_type");

      static final FieldName iCMFPNPIJJF = FieldName.forField("ICMFPNPIJJF");

      static final FieldName channelId = FieldName.forField("channelId", "channel_id");

      static final FieldName token = FieldName.forField("token");

      static final FieldName accountUid = FieldName.forField("accountUid", "account_uid");
    }
  }
}
