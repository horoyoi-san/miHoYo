// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedEnum;

public final class SetMultipleAvatarPathsCsReqOuterClass {
  /**
   * Protobuf type {@code SetMultipleAvatarPathsCsReq}
   */
  public static final class SetMultipleAvatarPathsCsReq extends ProtoMessage<SetMultipleAvatarPathsCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated .MultiPathAvatarType avatar_id_list = 3;</code>
     */
    private final RepeatedEnum<MultiPathAvatarTypeOuterClass.MultiPathAvatarType> avatarIdList = RepeatedEnum.newEmptyInstance(MultiPathAvatarTypeOuterClass.MultiPathAvatarType.converter());

    private SetMultipleAvatarPathsCsReq() {
    }

    /**
     * @return a new empty instance of {@code SetMultipleAvatarPathsCsReq}
     */
    public static SetMultipleAvatarPathsCsReq newInstance() {
      return new SetMultipleAvatarPathsCsReq();
    }

    /**
     * <code>repeated .MultiPathAvatarType avatar_id_list = 3;</code>
     * @return whether the avatarIdList field is set
     */
    public boolean hasAvatarIdList() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated .MultiPathAvatarType avatar_id_list = 3;</code>
     * @return this
     */
    public SetMultipleAvatarPathsCsReq clearAvatarIdList() {
      bitField0_ &= ~0x00000001;
      avatarIdList.clear();
      return this;
    }

    /**
     * <code>repeated .MultiPathAvatarType avatar_id_list = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAvatarIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedEnum<MultiPathAvatarTypeOuterClass.MultiPathAvatarType> getAvatarIdList() {
      return avatarIdList;
    }

    /**
     * <code>repeated .MultiPathAvatarType avatar_id_list = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedEnum<MultiPathAvatarTypeOuterClass.MultiPathAvatarType> getMutableAvatarIdList(
        ) {
      bitField0_ |= 0x00000001;
      return avatarIdList;
    }

    /**
     * <code>repeated .MultiPathAvatarType avatar_id_list = 3;</code>
     * @param value the avatarIdList to add
     * @return this
     */
    public SetMultipleAvatarPathsCsReq addAvatarIdList(
        final MultiPathAvatarTypeOuterClass.MultiPathAvatarType value) {
      bitField0_ |= 0x00000001;
      avatarIdList.add(value);
      return this;
    }

    /**
     * <code>repeated .MultiPathAvatarType avatar_id_list = 3;</code>
     * @param values the avatarIdList to add
     * @return this
     */
    public SetMultipleAvatarPathsCsReq addAllAvatarIdList(
        final MultiPathAvatarTypeOuterClass.MultiPathAvatarType... values) {
      bitField0_ |= 0x00000001;
      avatarIdList.addAll(values);
      return this;
    }

    @Override
    public SetMultipleAvatarPathsCsReq copyFrom(final SetMultipleAvatarPathsCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        avatarIdList.copyFrom(other.avatarIdList);
      }
      return this;
    }

    @Override
    public SetMultipleAvatarPathsCsReq mergeFrom(final SetMultipleAvatarPathsCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAvatarIdList()) {
        getMutableAvatarIdList().addAll(other.avatarIdList);
      }
      return this;
    }

    @Override
    public SetMultipleAvatarPathsCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      avatarIdList.clear();
      return this;
    }

    @Override
    public SetMultipleAvatarPathsCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      avatarIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SetMultipleAvatarPathsCsReq)) {
        return false;
      }
      SetMultipleAvatarPathsCsReq other = (SetMultipleAvatarPathsCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasAvatarIdList() || avatarIdList.equals(other.avatarIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < avatarIdList.length(); i++) {
          output.writeRawByte((byte) 24);
          output.writeEnumNoTag(avatarIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * avatarIdList.length()) + ProtoSink.computeRepeatedEnumSizeNoTag(avatarIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SetMultipleAvatarPathsCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 26: {
            // avatarIdList [packed=true]
            input.readPackedEnum(avatarIdList, tag);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 24: {
            // avatarIdList [packed=false]
            tag = input.readRepeatedEnum(avatarIdList, tag);
            bitField0_ |= 0x00000001;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedEnum(FieldNames.avatarIdList, avatarIdList);
      }
      output.endObject();
    }

    @Override
    public SetMultipleAvatarPathsCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1214270702:
          case 1824281692: {
            if (input.isAtField(FieldNames.avatarIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedEnum(avatarIdList, MultiPathAvatarTypeOuterClass.MultiPathAvatarType.converter());
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SetMultipleAvatarPathsCsReq clone() {
      return new SetMultipleAvatarPathsCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SetMultipleAvatarPathsCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SetMultipleAvatarPathsCsReq(), data).checkInitialized();
    }

    public static SetMultipleAvatarPathsCsReq parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new SetMultipleAvatarPathsCsReq(), input).checkInitialized();
    }

    public static SetMultipleAvatarPathsCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SetMultipleAvatarPathsCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating SetMultipleAvatarPathsCsReq messages
     */
    public static MessageFactory<SetMultipleAvatarPathsCsReq> getFactory() {
      return SetMultipleAvatarPathsCsReqFactory.INSTANCE;
    }

    private enum SetMultipleAvatarPathsCsReqFactory implements MessageFactory<SetMultipleAvatarPathsCsReq> {
      INSTANCE;

      @Override
      public SetMultipleAvatarPathsCsReq create() {
        return SetMultipleAvatarPathsCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName avatarIdList = FieldName.forField("avatarIdList", "avatar_id_list");
    }
  }
}
