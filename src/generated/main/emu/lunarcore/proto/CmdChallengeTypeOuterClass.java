// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import us.hebi.quickbuf.ProtoEnum;
import us.hebi.quickbuf.ProtoUtil;

public final class CmdChallengeTypeOuterClass {
  /**
   * Protobuf enum {@code CmdChallengeType}
   */
  public enum CmdChallengeType implements ProtoEnum<CmdChallengeType> {
    /**
     * <code>CmdChallengeTypeNone = 0;</code>
     */
    CmdChallengeTypeNone("CmdChallengeTypeNone", 0),

    /**
     * <code>CmdStartChallengeCsReq = 1758;</code>
     */
    CmdStartChallengeCsReq("CmdStartChallengeCsReq", 1758),

    /**
     * <code>CmdChallengeBossPhaseSettleNotify = 1748;</code>
     */
    CmdChallengeBossPhaseSettleNotify("CmdChallengeBossPhaseSettleNotify", 1748),

    /**
     * <code>CmdLeaveChallengeScRsp = 1756;</code>
     */
    CmdLeaveChallengeScRsp("CmdLeaveChallengeScRsp", 1756),

    /**
     * <code>CmdStartPartialChallengeScRsp = 1712;</code>
     */
    CmdStartPartialChallengeScRsp("CmdStartPartialChallengeScRsp", 1712),

    /**
     * <code>CmdStartChallengeScRsp = 1724;</code>
     */
    CmdStartChallengeScRsp("CmdStartChallengeScRsp", 1724),

    /**
     * <code>CmdGetChallengeGroupStatisticsCsReq = 1739;</code>
     */
    CmdGetChallengeGroupStatisticsCsReq("CmdGetChallengeGroupStatisticsCsReq", 1739),

    /**
     * <code>CmdRestartChallengePhaseCsReq = 1791;</code>
     */
    CmdRestartChallengePhaseCsReq("CmdRestartChallengePhaseCsReq", 1791),

    /**
     * <code>CmdRestartChallengePhaseScRsp = 1718;</code>
     */
    CmdRestartChallengePhaseScRsp("CmdRestartChallengePhaseScRsp", 1718),

    /**
     * <code>CmdTakeChallengeRewardScRsp = 1780;</code>
     */
    CmdTakeChallengeRewardScRsp("CmdTakeChallengeRewardScRsp", 1780),

    /**
     * <code>CmdGetCurChallengeCsReq = 1711;</code>
     */
    CmdGetCurChallengeCsReq("CmdGetCurChallengeCsReq", 1711),

    /**
     * <code>CmdGetCurChallengeScRsp = 1705;</code>
     */
    CmdGetCurChallengeScRsp("CmdGetCurChallengeScRsp", 1705),

    /**
     * <code>CmdChallengeLineupNotify = 1714;</code>
     */
    CmdChallengeLineupNotify("CmdChallengeLineupNotify", 1714),

    /**
     * <code>CmdLeaveChallengeCsReq = 1730;</code>
     */
    CmdLeaveChallengeCsReq("CmdLeaveChallengeCsReq", 1730),

    /**
     * <code>CmdGetChallengeCsReq = 1701;</code>
     */
    CmdGetChallengeCsReq("CmdGetChallengeCsReq", 1701),

    /**
     * <code>CmdGetChallengeGroupStatisticsScRsp = 1796;</code>
     */
    CmdGetChallengeGroupStatisticsScRsp("CmdGetChallengeGroupStatisticsScRsp", 1796),

    /**
     * <code>CmdChallengeSettleNotify = 1797;</code>
     */
    CmdChallengeSettleNotify("CmdChallengeSettleNotify", 1797),

    /**
     * <code>CmdTakeChallengeRewardCsReq = 1747;</code>
     */
    CmdTakeChallengeRewardCsReq("CmdTakeChallengeRewardCsReq", 1747),

    /**
     * <code>CmdStartPartialChallengeCsReq = 1723;</code>
     */
    CmdStartPartialChallengeCsReq("CmdStartPartialChallengeCsReq", 1723),

    /**
     * <code>CmdGetChallengeScRsp = 1768;</code>
     */
    CmdGetChallengeScRsp("CmdGetChallengeScRsp", 1768),

    /**
     * <code>CmdEnterChallengeNextPhaseScRsp = 1750;</code>
     */
    CmdEnterChallengeNextPhaseScRsp("CmdEnterChallengeNextPhaseScRsp", 1750),

    /**
     * <code>CmdEnterChallengeNextPhaseCsReq = 1795;</code>
     */
    CmdEnterChallengeNextPhaseCsReq("CmdEnterChallengeNextPhaseCsReq", 1795);

    /**
     * <code>CmdChallengeTypeNone = 0;</code>
     */
    public static final int CmdChallengeTypeNone_VALUE = 0;

    /**
     * <code>CmdStartChallengeCsReq = 1758;</code>
     */
    public static final int CmdStartChallengeCsReq_VALUE = 1758;

    /**
     * <code>CmdChallengeBossPhaseSettleNotify = 1748;</code>
     */
    public static final int CmdChallengeBossPhaseSettleNotify_VALUE = 1748;

    /**
     * <code>CmdLeaveChallengeScRsp = 1756;</code>
     */
    public static final int CmdLeaveChallengeScRsp_VALUE = 1756;

    /**
     * <code>CmdStartPartialChallengeScRsp = 1712;</code>
     */
    public static final int CmdStartPartialChallengeScRsp_VALUE = 1712;

    /**
     * <code>CmdStartChallengeScRsp = 1724;</code>
     */
    public static final int CmdStartChallengeScRsp_VALUE = 1724;

    /**
     * <code>CmdGetChallengeGroupStatisticsCsReq = 1739;</code>
     */
    public static final int CmdGetChallengeGroupStatisticsCsReq_VALUE = 1739;

    /**
     * <code>CmdRestartChallengePhaseCsReq = 1791;</code>
     */
    public static final int CmdRestartChallengePhaseCsReq_VALUE = 1791;

    /**
     * <code>CmdRestartChallengePhaseScRsp = 1718;</code>
     */
    public static final int CmdRestartChallengePhaseScRsp_VALUE = 1718;

    /**
     * <code>CmdTakeChallengeRewardScRsp = 1780;</code>
     */
    public static final int CmdTakeChallengeRewardScRsp_VALUE = 1780;

    /**
     * <code>CmdGetCurChallengeCsReq = 1711;</code>
     */
    public static final int CmdGetCurChallengeCsReq_VALUE = 1711;

    /**
     * <code>CmdGetCurChallengeScRsp = 1705;</code>
     */
    public static final int CmdGetCurChallengeScRsp_VALUE = 1705;

    /**
     * <code>CmdChallengeLineupNotify = 1714;</code>
     */
    public static final int CmdChallengeLineupNotify_VALUE = 1714;

    /**
     * <code>CmdLeaveChallengeCsReq = 1730;</code>
     */
    public static final int CmdLeaveChallengeCsReq_VALUE = 1730;

    /**
     * <code>CmdGetChallengeCsReq = 1701;</code>
     */
    public static final int CmdGetChallengeCsReq_VALUE = 1701;

    /**
     * <code>CmdGetChallengeGroupStatisticsScRsp = 1796;</code>
     */
    public static final int CmdGetChallengeGroupStatisticsScRsp_VALUE = 1796;

    /**
     * <code>CmdChallengeSettleNotify = 1797;</code>
     */
    public static final int CmdChallengeSettleNotify_VALUE = 1797;

    /**
     * <code>CmdTakeChallengeRewardCsReq = 1747;</code>
     */
    public static final int CmdTakeChallengeRewardCsReq_VALUE = 1747;

    /**
     * <code>CmdStartPartialChallengeCsReq = 1723;</code>
     */
    public static final int CmdStartPartialChallengeCsReq_VALUE = 1723;

    /**
     * <code>CmdGetChallengeScRsp = 1768;</code>
     */
    public static final int CmdGetChallengeScRsp_VALUE = 1768;

    /**
     * <code>CmdEnterChallengeNextPhaseScRsp = 1750;</code>
     */
    public static final int CmdEnterChallengeNextPhaseScRsp_VALUE = 1750;

    /**
     * <code>CmdEnterChallengeNextPhaseCsReq = 1795;</code>
     */
    public static final int CmdEnterChallengeNextPhaseCsReq_VALUE = 1795;

    private final String name;

    private final int number;

    private CmdChallengeType(String name, int number) {
      this.name = name;
      this.number = number;
    }

    /**
     * @return the string representation of enum entry
     */
    @Override
    public String getName() {
      return name;
    }

    /**
     * @return the numeric wire value of this enum entry
     */
    @Override
    public int getNumber() {
      return number;
    }

    /**
     * @return a converter that maps between this enum's numeric and text representations
     */
    public static ProtoEnum.EnumConverter<CmdChallengeType> converter() {
      return CmdChallengeTypeConverter.INSTANCE;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value, or null if unknown.
     */
    public static CmdChallengeType forNumber(int value) {
      return CmdChallengeTypeConverter.INSTANCE.forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @param other Fallback value in case the value is not known.
     * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
     */
    public static CmdChallengeType forNumberOr(int number, CmdChallengeType other) {
      CmdChallengeType value = forNumber(number);
      return value == null ? other : value;
    }

    enum CmdChallengeTypeConverter implements ProtoEnum.EnumConverter<CmdChallengeType> {
      INSTANCE;

      @Override
      public final CmdChallengeType forNumber(final int value) {
        switch(value) {
          case 0: return CmdChallengeTypeNone;
          case 1758: return CmdStartChallengeCsReq;
          case 1748: return CmdChallengeBossPhaseSettleNotify;
          case 1756: return CmdLeaveChallengeScRsp;
          case 1712: return CmdStartPartialChallengeScRsp;
          case 1724: return CmdStartChallengeScRsp;
          case 1739: return CmdGetChallengeGroupStatisticsCsReq;
          case 1791: return CmdRestartChallengePhaseCsReq;
          case 1718: return CmdRestartChallengePhaseScRsp;
          case 1780: return CmdTakeChallengeRewardScRsp;
          case 1711: return CmdGetCurChallengeCsReq;
          case 1705: return CmdGetCurChallengeScRsp;
          case 1714: return CmdChallengeLineupNotify;
          case 1730: return CmdLeaveChallengeCsReq;
          case 1701: return CmdGetChallengeCsReq;
          case 1796: return CmdGetChallengeGroupStatisticsScRsp;
          case 1797: return CmdChallengeSettleNotify;
          case 1747: return CmdTakeChallengeRewardCsReq;
          case 1723: return CmdStartPartialChallengeCsReq;
          case 1768: return CmdGetChallengeScRsp;
          case 1750: return CmdEnterChallengeNextPhaseScRsp;
          case 1795: return CmdEnterChallengeNextPhaseCsReq;
          default: return null;
        }
      }

      @Override
      public final CmdChallengeType forName(final CharSequence value) {
        switch (value.length()) {
          case 20: {
            if (ProtoUtil.isEqual("CmdChallengeTypeNone", value)) {
              return CmdChallengeTypeNone;
            }
            if (ProtoUtil.isEqual("CmdGetChallengeCsReq", value)) {
              return CmdGetChallengeCsReq;
            }
            if (ProtoUtil.isEqual("CmdGetChallengeScRsp", value)) {
              return CmdGetChallengeScRsp;
            }
            break;
          }
          case 22: {
            if (ProtoUtil.isEqual("CmdStartChallengeCsReq", value)) {
              return CmdStartChallengeCsReq;
            }
            if (ProtoUtil.isEqual("CmdLeaveChallengeScRsp", value)) {
              return CmdLeaveChallengeScRsp;
            }
            if (ProtoUtil.isEqual("CmdStartChallengeScRsp", value)) {
              return CmdStartChallengeScRsp;
            }
            if (ProtoUtil.isEqual("CmdLeaveChallengeCsReq", value)) {
              return CmdLeaveChallengeCsReq;
            }
            break;
          }
          case 23: {
            if (ProtoUtil.isEqual("CmdGetCurChallengeCsReq", value)) {
              return CmdGetCurChallengeCsReq;
            }
            if (ProtoUtil.isEqual("CmdGetCurChallengeScRsp", value)) {
              return CmdGetCurChallengeScRsp;
            }
            break;
          }
          case 24: {
            if (ProtoUtil.isEqual("CmdChallengeLineupNotify", value)) {
              return CmdChallengeLineupNotify;
            }
            if (ProtoUtil.isEqual("CmdChallengeSettleNotify", value)) {
              return CmdChallengeSettleNotify;
            }
            break;
          }
          case 27: {
            if (ProtoUtil.isEqual("CmdTakeChallengeRewardScRsp", value)) {
              return CmdTakeChallengeRewardScRsp;
            }
            if (ProtoUtil.isEqual("CmdTakeChallengeRewardCsReq", value)) {
              return CmdTakeChallengeRewardCsReq;
            }
            break;
          }
          case 29: {
            if (ProtoUtil.isEqual("CmdStartPartialChallengeScRsp", value)) {
              return CmdStartPartialChallengeScRsp;
            }
            if (ProtoUtil.isEqual("CmdRestartChallengePhaseCsReq", value)) {
              return CmdRestartChallengePhaseCsReq;
            }
            if (ProtoUtil.isEqual("CmdRestartChallengePhaseScRsp", value)) {
              return CmdRestartChallengePhaseScRsp;
            }
            if (ProtoUtil.isEqual("CmdStartPartialChallengeCsReq", value)) {
              return CmdStartPartialChallengeCsReq;
            }
            break;
          }
          case 31: {
            if (ProtoUtil.isEqual("CmdEnterChallengeNextPhaseScRsp", value)) {
              return CmdEnterChallengeNextPhaseScRsp;
            }
            if (ProtoUtil.isEqual("CmdEnterChallengeNextPhaseCsReq", value)) {
              return CmdEnterChallengeNextPhaseCsReq;
            }
            break;
          }
          case 33: {
            if (ProtoUtil.isEqual("CmdChallengeBossPhaseSettleNotify", value)) {
              return CmdChallengeBossPhaseSettleNotify;
            }
            break;
          }
          case 35: {
            if (ProtoUtil.isEqual("CmdGetChallengeGroupStatisticsCsReq", value)) {
              return CmdGetChallengeGroupStatisticsCsReq;
            }
            if (ProtoUtil.isEqual("CmdGetChallengeGroupStatisticsScRsp", value)) {
              return CmdGetChallengeGroupStatisticsScRsp;
            }
            break;
          }
        }
        return null;
      }
    }
  }
}
