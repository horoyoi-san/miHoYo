// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class ChallengeBossPhaseSettleNotifyOuterClass {
  /**
   * Protobuf type {@code ChallengeBossPhaseSettleNotify}
   */
  public static final class ChallengeBossPhaseSettleNotify extends ProtoMessage<ChallengeBossPhaseSettleNotify> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 challenge_score = 3;</code>
     */
    private int challengeScore;

    /**
     * <pre>
     * this value need to be 1
     * </pre>
     *
     * <code>optional uint32 page_number = 4;</code>
     */
    private int pageNumber;

    /**
     * <code>optional uint32 challenge_id = 6;</code>
     */
    private int challengeId;

    /**
     * <code>optional uint32 stars = 9;</code>
     */
    private int stars;

    /**
     * <code>optional uint32 phase = 12;</code>
     */
    private int phase;

    /**
     * <code>optional uint32 score_two = 14;</code>
     */
    private int scoreTwo;

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_reward = 7;</code>
     */
    private boolean isReward;

    /**
     * <code>optional bool is_win = 10;</code>
     */
    private boolean isWin;

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_remaining_action = 13;</code>
     */
    private boolean isRemainingAction;

    /**
     * <code>repeated .BattleTarget challenge_battle_target_list = 8;</code>
     */
    private final RepeatedMessage<BattleTargetOuterClass.BattleTarget> challengeBattleTargetList = RepeatedMessage.newEmptyInstance(BattleTargetOuterClass.BattleTarget.getFactory());

    private ChallengeBossPhaseSettleNotify() {
    }

    /**
     * @return a new empty instance of {@code ChallengeBossPhaseSettleNotify}
     */
    public static ChallengeBossPhaseSettleNotify newInstance() {
      return new ChallengeBossPhaseSettleNotify();
    }

    /**
     * <code>optional uint32 challenge_score = 3;</code>
     * @return whether the challengeScore field is set
     */
    public boolean hasChallengeScore() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 challenge_score = 3;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearChallengeScore() {
      bitField0_ &= ~0x00000001;
      challengeScore = 0;
      return this;
    }

    /**
     * <code>optional uint32 challenge_score = 3;</code>
     * @return the challengeScore
     */
    public int getChallengeScore() {
      return challengeScore;
    }

    /**
     * <code>optional uint32 challenge_score = 3;</code>
     * @param value the challengeScore to set
     * @return this
     */
    public ChallengeBossPhaseSettleNotify setChallengeScore(final int value) {
      bitField0_ |= 0x00000001;
      challengeScore = value;
      return this;
    }

    /**
     * <pre>
     * this value need to be 1
     * </pre>
     *
     * <code>optional uint32 page_number = 4;</code>
     * @return whether the pageNumber field is set
     */
    public boolean hasPageNumber() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     * this value need to be 1
     * </pre>
     *
     * <code>optional uint32 page_number = 4;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearPageNumber() {
      bitField0_ &= ~0x00000002;
      pageNumber = 0;
      return this;
    }

    /**
     * <pre>
     * this value need to be 1
     * </pre>
     *
     * <code>optional uint32 page_number = 4;</code>
     * @return the pageNumber
     */
    public int getPageNumber() {
      return pageNumber;
    }

    /**
     * <pre>
     * this value need to be 1
     * </pre>
     *
     * <code>optional uint32 page_number = 4;</code>
     * @param value the pageNumber to set
     * @return this
     */
    public ChallengeBossPhaseSettleNotify setPageNumber(final int value) {
      bitField0_ |= 0x00000002;
      pageNumber = value;
      return this;
    }

    /**
     * <code>optional uint32 challenge_id = 6;</code>
     * @return whether the challengeId field is set
     */
    public boolean hasChallengeId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 challenge_id = 6;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearChallengeId() {
      bitField0_ &= ~0x00000004;
      challengeId = 0;
      return this;
    }

    /**
     * <code>optional uint32 challenge_id = 6;</code>
     * @return the challengeId
     */
    public int getChallengeId() {
      return challengeId;
    }

    /**
     * <code>optional uint32 challenge_id = 6;</code>
     * @param value the challengeId to set
     * @return this
     */
    public ChallengeBossPhaseSettleNotify setChallengeId(final int value) {
      bitField0_ |= 0x00000004;
      challengeId = value;
      return this;
    }

    /**
     * <code>optional uint32 stars = 9;</code>
     * @return whether the stars field is set
     */
    public boolean hasStars() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 stars = 9;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearStars() {
      bitField0_ &= ~0x00000008;
      stars = 0;
      return this;
    }

    /**
     * <code>optional uint32 stars = 9;</code>
     * @return the stars
     */
    public int getStars() {
      return stars;
    }

    /**
     * <code>optional uint32 stars = 9;</code>
     * @param value the stars to set
     * @return this
     */
    public ChallengeBossPhaseSettleNotify setStars(final int value) {
      bitField0_ |= 0x00000008;
      stars = value;
      return this;
    }

    /**
     * <code>optional uint32 phase = 12;</code>
     * @return whether the phase field is set
     */
    public boolean hasPhase() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 phase = 12;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearPhase() {
      bitField0_ &= ~0x00000010;
      phase = 0;
      return this;
    }

    /**
     * <code>optional uint32 phase = 12;</code>
     * @return the phase
     */
    public int getPhase() {
      return phase;
    }

    /**
     * <code>optional uint32 phase = 12;</code>
     * @param value the phase to set
     * @return this
     */
    public ChallengeBossPhaseSettleNotify setPhase(final int value) {
      bitField0_ |= 0x00000010;
      phase = value;
      return this;
    }

    /**
     * <code>optional uint32 score_two = 14;</code>
     * @return whether the scoreTwo field is set
     */
    public boolean hasScoreTwo() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 score_two = 14;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearScoreTwo() {
      bitField0_ &= ~0x00000020;
      scoreTwo = 0;
      return this;
    }

    /**
     * <code>optional uint32 score_two = 14;</code>
     * @return the scoreTwo
     */
    public int getScoreTwo() {
      return scoreTwo;
    }

    /**
     * <code>optional uint32 score_two = 14;</code>
     * @param value the scoreTwo to set
     * @return this
     */
    public ChallengeBossPhaseSettleNotify setScoreTwo(final int value) {
      bitField0_ |= 0x00000020;
      scoreTwo = value;
      return this;
    }

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_reward = 7;</code>
     * @return whether the isReward field is set
     */
    public boolean hasIsReward() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_reward = 7;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearIsReward() {
      bitField0_ &= ~0x00000040;
      isReward = false;
      return this;
    }

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_reward = 7;</code>
     * @return the isReward
     */
    public boolean getIsReward() {
      return isReward;
    }

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_reward = 7;</code>
     * @param value the isReward to set
     * @return this
     */
    public ChallengeBossPhaseSettleNotify setIsReward(final boolean value) {
      bitField0_ |= 0x00000040;
      isReward = value;
      return this;
    }

    /**
     * <code>optional bool is_win = 10;</code>
     * @return whether the isWin field is set
     */
    public boolean hasIsWin() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional bool is_win = 10;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearIsWin() {
      bitField0_ &= ~0x00000080;
      isWin = false;
      return this;
    }

    /**
     * <code>optional bool is_win = 10;</code>
     * @return the isWin
     */
    public boolean getIsWin() {
      return isWin;
    }

    /**
     * <code>optional bool is_win = 10;</code>
     * @param value the isWin to set
     * @return this
     */
    public ChallengeBossPhaseSettleNotify setIsWin(final boolean value) {
      bitField0_ |= 0x00000080;
      isWin = value;
      return this;
    }

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_remaining_action = 13;</code>
     * @return whether the isRemainingAction field is set
     */
    public boolean hasIsRemainingAction() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_remaining_action = 13;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearIsRemainingAction() {
      bitField0_ &= ~0x00000100;
      isRemainingAction = false;
      return this;
    }

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_remaining_action = 13;</code>
     * @return the isRemainingAction
     */
    public boolean getIsRemainingAction() {
      return isRemainingAction;
    }

    /**
     * <pre>
     * this tag needed to be right ,or AS doesnt have second half
     * </pre>
     *
     * <code>optional bool is_remaining_action = 13;</code>
     * @param value the isRemainingAction to set
     * @return this
     */
    public ChallengeBossPhaseSettleNotify setIsRemainingAction(final boolean value) {
      bitField0_ |= 0x00000100;
      isRemainingAction = value;
      return this;
    }

    /**
     * <code>repeated .BattleTarget challenge_battle_target_list = 8;</code>
     * @return whether the challengeBattleTargetList field is set
     */
    public boolean hasChallengeBattleTargetList() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <code>repeated .BattleTarget challenge_battle_target_list = 8;</code>
     * @return this
     */
    public ChallengeBossPhaseSettleNotify clearChallengeBattleTargetList() {
      bitField0_ &= ~0x00000200;
      challengeBattleTargetList.clear();
      return this;
    }

    /**
     * <code>repeated .BattleTarget challenge_battle_target_list = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableChallengeBattleTargetList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<BattleTargetOuterClass.BattleTarget> getChallengeBattleTargetList() {
      return challengeBattleTargetList;
    }

    /**
     * <code>repeated .BattleTarget challenge_battle_target_list = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<BattleTargetOuterClass.BattleTarget> getMutableChallengeBattleTargetList(
        ) {
      bitField0_ |= 0x00000200;
      return challengeBattleTargetList;
    }

    /**
     * <code>repeated .BattleTarget challenge_battle_target_list = 8;</code>
     * @param value the challengeBattleTargetList to add
     * @return this
     */
    public ChallengeBossPhaseSettleNotify addChallengeBattleTargetList(
        final BattleTargetOuterClass.BattleTarget value) {
      bitField0_ |= 0x00000200;
      challengeBattleTargetList.add(value);
      return this;
    }

    /**
     * <code>repeated .BattleTarget challenge_battle_target_list = 8;</code>
     * @param values the challengeBattleTargetList to add
     * @return this
     */
    public ChallengeBossPhaseSettleNotify addAllChallengeBattleTargetList(
        final BattleTargetOuterClass.BattleTarget... values) {
      bitField0_ |= 0x00000200;
      challengeBattleTargetList.addAll(values);
      return this;
    }

    @Override
    public ChallengeBossPhaseSettleNotify copyFrom(final ChallengeBossPhaseSettleNotify other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        challengeScore = other.challengeScore;
        pageNumber = other.pageNumber;
        challengeId = other.challengeId;
        stars = other.stars;
        phase = other.phase;
        scoreTwo = other.scoreTwo;
        isReward = other.isReward;
        isWin = other.isWin;
        isRemainingAction = other.isRemainingAction;
        challengeBattleTargetList.copyFrom(other.challengeBattleTargetList);
      }
      return this;
    }

    @Override
    public ChallengeBossPhaseSettleNotify mergeFrom(final ChallengeBossPhaseSettleNotify other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasChallengeScore()) {
        setChallengeScore(other.challengeScore);
      }
      if (other.hasPageNumber()) {
        setPageNumber(other.pageNumber);
      }
      if (other.hasChallengeId()) {
        setChallengeId(other.challengeId);
      }
      if (other.hasStars()) {
        setStars(other.stars);
      }
      if (other.hasPhase()) {
        setPhase(other.phase);
      }
      if (other.hasScoreTwo()) {
        setScoreTwo(other.scoreTwo);
      }
      if (other.hasIsReward()) {
        setIsReward(other.isReward);
      }
      if (other.hasIsWin()) {
        setIsWin(other.isWin);
      }
      if (other.hasIsRemainingAction()) {
        setIsRemainingAction(other.isRemainingAction);
      }
      if (other.hasChallengeBattleTargetList()) {
        getMutableChallengeBattleTargetList().addAll(other.challengeBattleTargetList);
      }
      return this;
    }

    @Override
    public ChallengeBossPhaseSettleNotify clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      challengeScore = 0;
      pageNumber = 0;
      challengeId = 0;
      stars = 0;
      phase = 0;
      scoreTwo = 0;
      isReward = false;
      isWin = false;
      isRemainingAction = false;
      challengeBattleTargetList.clear();
      return this;
    }

    @Override
    public ChallengeBossPhaseSettleNotify clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      challengeBattleTargetList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeBossPhaseSettleNotify)) {
        return false;
      }
      ChallengeBossPhaseSettleNotify other = (ChallengeBossPhaseSettleNotify) o;
      return bitField0_ == other.bitField0_
        && (!hasChallengeScore() || challengeScore == other.challengeScore)
        && (!hasPageNumber() || pageNumber == other.pageNumber)
        && (!hasChallengeId() || challengeId == other.challengeId)
        && (!hasStars() || stars == other.stars)
        && (!hasPhase() || phase == other.phase)
        && (!hasScoreTwo() || scoreTwo == other.scoreTwo)
        && (!hasIsReward() || isReward == other.isReward)
        && (!hasIsWin() || isWin == other.isWin)
        && (!hasIsRemainingAction() || isRemainingAction == other.isRemainingAction)
        && (!hasChallengeBattleTargetList() || challengeBattleTargetList.equals(other.challengeBattleTargetList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(challengeScore);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(pageNumber);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(challengeId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(stars);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(phase);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(scoreTwo);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 56);
        output.writeBoolNoTag(isReward);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 80);
        output.writeBoolNoTag(isWin);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 104);
        output.writeBoolNoTag(isRemainingAction);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        for (int i = 0; i < challengeBattleTargetList.length(); i++) {
          output.writeRawByte((byte) 66);
          output.writeMessageNoTag(challengeBattleTargetList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(challengeScore);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(pageNumber);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(challengeId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(stars);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(phase);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(scoreTwo);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += (1 * challengeBattleTargetList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(challengeBattleTargetList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeBossPhaseSettleNotify mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // challengeScore
            challengeScore = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // pageNumber
            pageNumber = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // challengeId
            challengeId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // stars
            stars = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // phase
            phase = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // scoreTwo
            scoreTwo = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // isReward
            isReward = input.readBool();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // isWin
            isWin = input.readBool();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // isRemainingAction
            isRemainingAction = input.readBool();
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // challengeBattleTargetList
            tag = input.readRepeatedMessage(challengeBattleTargetList, tag);
            bitField0_ |= 0x00000200;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.challengeScore, challengeScore);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.pageNumber, pageNumber);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.challengeId, challengeId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.stars, stars);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.phase, phase);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.scoreTwo, scoreTwo);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeBool(FieldNames.isReward, isReward);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeBool(FieldNames.isWin, isWin);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeBool(FieldNames.isRemainingAction, isRemainingAction);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRepeatedMessage(FieldNames.challengeBattleTargetList, challengeBattleTargetList);
      }
      output.endObject();
    }

    @Override
    public ChallengeBossPhaseSettleNotify mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 591599599:
          case 1517684662: {
            if (input.isAtField(FieldNames.challengeScore)) {
              if (!input.trySkipNullValue()) {
                challengeScore = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1144767160:
          case -1156954375: {
            if (input.isAtField(FieldNames.pageNumber)) {
              if (!input.trySkipNullValue()) {
                pageNumber = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -689112866:
          case 112359031: {
            if (input.isAtField(FieldNames.challengeId)) {
              if (!input.trySkipNullValue()) {
                challengeId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 109757537: {
            if (input.isAtField(FieldNames.stars)) {
              if (!input.trySkipNullValue()) {
                stars = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 106629499: {
            if (input.isAtField(FieldNames.phase)) {
              if (!input.trySkipNullValue()) {
                phase = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -485512614:
          case 2129303327: {
            if (input.isAtField(FieldNames.scoreTwo)) {
              if (!input.trySkipNullValue()) {
                scoreTwo = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -260292359:
          case -470287388: {
            if (input.isAtField(FieldNames.isReward)) {
              if (!input.trySkipNullValue()) {
                isReward = input.readBool();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 100482642:
          case -1179753657: {
            if (input.isAtField(FieldNames.isWin)) {
              if (!input.trySkipNullValue()) {
                isWin = input.readBool();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 7977282:
          case 720329492: {
            if (input.isAtField(FieldNames.isRemainingAction)) {
              if (!input.trySkipNullValue()) {
                isRemainingAction = input.readBool();
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1989433558:
          case -1955473695: {
            if (input.isAtField(FieldNames.challengeBattleTargetList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(challengeBattleTargetList);
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeBossPhaseSettleNotify clone() {
      return new ChallengeBossPhaseSettleNotify().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeBossPhaseSettleNotify parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeBossPhaseSettleNotify(), data).checkInitialized();
    }

    public static ChallengeBossPhaseSettleNotify parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossPhaseSettleNotify(), input).checkInitialized();
    }

    public static ChallengeBossPhaseSettleNotify parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossPhaseSettleNotify(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeBossPhaseSettleNotify messages
     */
    public static MessageFactory<ChallengeBossPhaseSettleNotify> getFactory() {
      return ChallengeBossPhaseSettleNotifyFactory.INSTANCE;
    }

    private enum ChallengeBossPhaseSettleNotifyFactory implements MessageFactory<ChallengeBossPhaseSettleNotify> {
      INSTANCE;

      @Override
      public ChallengeBossPhaseSettleNotify create() {
        return ChallengeBossPhaseSettleNotify.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName challengeScore = FieldName.forField("challengeScore", "challenge_score");

      static final FieldName pageNumber = FieldName.forField("pageNumber", "page_number");

      static final FieldName challengeId = FieldName.forField("challengeId", "challenge_id");

      static final FieldName stars = FieldName.forField("stars");

      static final FieldName phase = FieldName.forField("phase");

      static final FieldName scoreTwo = FieldName.forField("scoreTwo", "score_two");

      static final FieldName isReward = FieldName.forField("isReward", "is_reward");

      static final FieldName isWin = FieldName.forField("isWin", "is_win");

      static final FieldName isRemainingAction = FieldName.forField("isRemainingAction", "is_remaining_action");

      static final FieldName challengeBattleTargetList = FieldName.forField("challengeBattleTargetList", "challenge_battle_target_list");
    }
  }
}
