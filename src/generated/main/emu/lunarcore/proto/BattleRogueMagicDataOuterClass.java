// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class BattleRogueMagicDataOuterClass {
  /**
   * Protobuf type {@code BattleRogueMagicData}
   */
  public static final class BattleRogueMagicData extends ProtoMessage<BattleRogueMagicData> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .BattleRogueMagicRoundCount round_cnt = 1;</code>
     */
    private final BattleRogueMagicRoundCountOuterClass.BattleRogueMagicRoundCount roundCnt = BattleRogueMagicRoundCountOuterClass.BattleRogueMagicRoundCount.newInstance();

    /**
     * <code>repeated .BattleRogueMagicScepter battle_scepter_list = 2;</code>
     */
    private final RepeatedMessage<BattleRogueMagicScepterOuterClass.BattleRogueMagicScepter> battleScepterList = RepeatedMessage.newEmptyInstance(BattleRogueMagicScepterOuterClass.BattleRogueMagicScepter.getFactory());

    private BattleRogueMagicData() {
    }

    /**
     * @return a new empty instance of {@code BattleRogueMagicData}
     */
    public static BattleRogueMagicData newInstance() {
      return new BattleRogueMagicData();
    }

    /**
     * <code>optional .BattleRogueMagicRoundCount round_cnt = 1;</code>
     * @return whether the roundCnt field is set
     */
    public boolean hasRoundCnt() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .BattleRogueMagicRoundCount round_cnt = 1;</code>
     * @return this
     */
    public BattleRogueMagicData clearRoundCnt() {
      bitField0_ &= ~0x00000001;
      roundCnt.clear();
      return this;
    }

    /**
     * <code>optional .BattleRogueMagicRoundCount round_cnt = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRoundCnt()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public BattleRogueMagicRoundCountOuterClass.BattleRogueMagicRoundCount getRoundCnt() {
      return roundCnt;
    }

    /**
     * <code>optional .BattleRogueMagicRoundCount round_cnt = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public BattleRogueMagicRoundCountOuterClass.BattleRogueMagicRoundCount getMutableRoundCnt() {
      bitField0_ |= 0x00000001;
      return roundCnt;
    }

    /**
     * <code>optional .BattleRogueMagicRoundCount round_cnt = 1;</code>
     * @param value the roundCnt to set
     * @return this
     */
    public BattleRogueMagicData setRoundCnt(
        final BattleRogueMagicRoundCountOuterClass.BattleRogueMagicRoundCount value) {
      bitField0_ |= 0x00000001;
      roundCnt.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter battle_scepter_list = 2;</code>
     * @return whether the battleScepterList field is set
     */
    public boolean hasBattleScepterList() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter battle_scepter_list = 2;</code>
     * @return this
     */
    public BattleRogueMagicData clearBattleScepterList() {
      bitField0_ &= ~0x00000002;
      battleScepterList.clear();
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter battle_scepter_list = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableBattleScepterList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<BattleRogueMagicScepterOuterClass.BattleRogueMagicScepter> getBattleScepterList(
        ) {
      return battleScepterList;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter battle_scepter_list = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<BattleRogueMagicScepterOuterClass.BattleRogueMagicScepter> getMutableBattleScepterList(
        ) {
      bitField0_ |= 0x00000002;
      return battleScepterList;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter battle_scepter_list = 2;</code>
     * @param value the battleScepterList to add
     * @return this
     */
    public BattleRogueMagicData addBattleScepterList(
        final BattleRogueMagicScepterOuterClass.BattleRogueMagicScepter value) {
      bitField0_ |= 0x00000002;
      battleScepterList.add(value);
      return this;
    }

    /**
     * <code>repeated .BattleRogueMagicScepter battle_scepter_list = 2;</code>
     * @param values the battleScepterList to add
     * @return this
     */
    public BattleRogueMagicData addAllBattleScepterList(
        final BattleRogueMagicScepterOuterClass.BattleRogueMagicScepter... values) {
      bitField0_ |= 0x00000002;
      battleScepterList.addAll(values);
      return this;
    }

    @Override
    public BattleRogueMagicData copyFrom(final BattleRogueMagicData other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        roundCnt.copyFrom(other.roundCnt);
        battleScepterList.copyFrom(other.battleScepterList);
      }
      return this;
    }

    @Override
    public BattleRogueMagicData mergeFrom(final BattleRogueMagicData other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRoundCnt()) {
        getMutableRoundCnt().mergeFrom(other.roundCnt);
      }
      if (other.hasBattleScepterList()) {
        getMutableBattleScepterList().addAll(other.battleScepterList);
      }
      return this;
    }

    @Override
    public BattleRogueMagicData clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      roundCnt.clear();
      battleScepterList.clear();
      return this;
    }

    @Override
    public BattleRogueMagicData clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      roundCnt.clearQuick();
      battleScepterList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof BattleRogueMagicData)) {
        return false;
      }
      BattleRogueMagicData other = (BattleRogueMagicData) o;
      return bitField0_ == other.bitField0_
        && (!hasRoundCnt() || roundCnt.equals(other.roundCnt))
        && (!hasBattleScepterList() || battleScepterList.equals(other.battleScepterList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(roundCnt);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        for (int i = 0; i < battleScepterList.length(); i++) {
          output.writeRawByte((byte) 18);
          output.writeMessageNoTag(battleScepterList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(roundCnt);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += (1 * battleScepterList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(battleScepterList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public BattleRogueMagicData mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 10: {
            // roundCnt
            input.readMessage(roundCnt);
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // battleScepterList
            tag = input.readRepeatedMessage(battleScepterList, tag);
            bitField0_ |= 0x00000002;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeMessage(FieldNames.roundCnt, roundCnt);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRepeatedMessage(FieldNames.battleScepterList, battleScepterList);
      }
      output.endObject();
    }

    @Override
    public BattleRogueMagicData mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -178949:
          case -4723912: {
            if (input.isAtField(FieldNames.roundCnt)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(roundCnt);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1824233772:
          case -2109852130: {
            if (input.isAtField(FieldNames.battleScepterList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(battleScepterList);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public BattleRogueMagicData clone() {
      return new BattleRogueMagicData().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static BattleRogueMagicData parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicData(), data).checkInitialized();
    }

    public static BattleRogueMagicData parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicData(), input).checkInitialized();
    }

    public static BattleRogueMagicData parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new BattleRogueMagicData(), input).checkInitialized();
    }

    /**
     * @return factory for creating BattleRogueMagicData messages
     */
    public static MessageFactory<BattleRogueMagicData> getFactory() {
      return BattleRogueMagicDataFactory.INSTANCE;
    }

    private enum BattleRogueMagicDataFactory implements MessageFactory<BattleRogueMagicData> {
      INSTANCE;

      @Override
      public BattleRogueMagicData create() {
        return BattleRogueMagicData.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName roundCnt = FieldName.forField("roundCnt", "round_cnt");

      static final FieldName battleScepterList = FieldName.forField("battleScepterList", "battle_scepter_list");
    }
  }
}
