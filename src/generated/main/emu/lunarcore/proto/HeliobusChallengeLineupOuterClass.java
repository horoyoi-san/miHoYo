// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class HeliobusChallengeLineupOuterClass {
  /**
   * Protobuf type {@code HeliobusChallengeLineup}
   */
  public static final class HeliobusChallengeLineup extends ProtoMessage<HeliobusChallengeLineup> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 SkillId = 6;</code>
     */
    private int skillId;

    /**
     * <code>optional uint32 GroupId = 12;</code>
     */
    private int groupId;

    /**
     * <code>repeated uint32 AvatarIdList = 11;</code>
     */
    private final RepeatedInt avatarIdList = RepeatedInt.newEmptyInstance();

    private HeliobusChallengeLineup() {
    }

    /**
     * @return a new empty instance of {@code HeliobusChallengeLineup}
     */
    public static HeliobusChallengeLineup newInstance() {
      return new HeliobusChallengeLineup();
    }

    /**
     * <code>optional uint32 SkillId = 6;</code>
     * @return whether the skillId field is set
     */
    public boolean hasSkillId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 SkillId = 6;</code>
     * @return this
     */
    public HeliobusChallengeLineup clearSkillId() {
      bitField0_ &= ~0x00000001;
      skillId = 0;
      return this;
    }

    /**
     * <code>optional uint32 SkillId = 6;</code>
     * @return the skillId
     */
    public int getSkillId() {
      return skillId;
    }

    /**
     * <code>optional uint32 SkillId = 6;</code>
     * @param value the skillId to set
     * @return this
     */
    public HeliobusChallengeLineup setSkillId(final int value) {
      bitField0_ |= 0x00000001;
      skillId = value;
      return this;
    }

    /**
     * <code>optional uint32 GroupId = 12;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 GroupId = 12;</code>
     * @return this
     */
    public HeliobusChallengeLineup clearGroupId() {
      bitField0_ &= ~0x00000002;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 GroupId = 12;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 GroupId = 12;</code>
     * @param value the groupId to set
     * @return this
     */
    public HeliobusChallengeLineup setGroupId(final int value) {
      bitField0_ |= 0x00000002;
      groupId = value;
      return this;
    }

    /**
     * <code>repeated uint32 AvatarIdList = 11;</code>
     * @return whether the avatarIdList field is set
     */
    public boolean hasAvatarIdList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 AvatarIdList = 11;</code>
     * @return this
     */
    public HeliobusChallengeLineup clearAvatarIdList() {
      bitField0_ &= ~0x00000004;
      avatarIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 AvatarIdList = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAvatarIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getAvatarIdList() {
      return avatarIdList;
    }

    /**
     * <code>repeated uint32 AvatarIdList = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableAvatarIdList() {
      bitField0_ |= 0x00000004;
      return avatarIdList;
    }

    /**
     * <code>repeated uint32 AvatarIdList = 11;</code>
     * @param value the avatarIdList to add
     * @return this
     */
    public HeliobusChallengeLineup addAvatarIdList(final int value) {
      bitField0_ |= 0x00000004;
      avatarIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 AvatarIdList = 11;</code>
     * @param values the avatarIdList to add
     * @return this
     */
    public HeliobusChallengeLineup addAllAvatarIdList(final int... values) {
      bitField0_ |= 0x00000004;
      avatarIdList.addAll(values);
      return this;
    }

    @Override
    public HeliobusChallengeLineup copyFrom(final HeliobusChallengeLineup other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        skillId = other.skillId;
        groupId = other.groupId;
        avatarIdList.copyFrom(other.avatarIdList);
      }
      return this;
    }

    @Override
    public HeliobusChallengeLineup mergeFrom(final HeliobusChallengeLineup other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSkillId()) {
        setSkillId(other.skillId);
      }
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasAvatarIdList()) {
        getMutableAvatarIdList().addAll(other.avatarIdList);
      }
      return this;
    }

    @Override
    public HeliobusChallengeLineup clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      skillId = 0;
      groupId = 0;
      avatarIdList.clear();
      return this;
    }

    @Override
    public HeliobusChallengeLineup clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      avatarIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof HeliobusChallengeLineup)) {
        return false;
      }
      HeliobusChallengeLineup other = (HeliobusChallengeLineup) o;
      return bitField0_ == other.bitField0_
        && (!hasSkillId() || skillId == other.skillId)
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasAvatarIdList() || avatarIdList.equals(other.avatarIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(skillId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < avatarIdList.length(); i++) {
          output.writeRawByte((byte) 88);
          output.writeUInt32NoTag(avatarIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(skillId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * avatarIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(avatarIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public HeliobusChallengeLineup mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 48: {
            // skillId
            skillId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // avatarIdList [packed=true]
            input.readPackedUInt32(avatarIdList, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 88: {
            // avatarIdList [packed=false]
            tag = input.readRepeatedUInt32(avatarIdList, tag);
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.skillId, skillId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.avatarIdList, avatarIdList);
      }
      output.endObject();
    }

    @Override
    public HeliobusChallengeLineup mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -482993364: {
            if (input.isAtField(FieldNames.skillId)) {
              if (!input.trySkipNullValue()) {
                skillId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1958081498: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1049950414: {
            if (input.isAtField(FieldNames.avatarIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(avatarIdList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public HeliobusChallengeLineup clone() {
      return new HeliobusChallengeLineup().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static HeliobusChallengeLineup parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new HeliobusChallengeLineup(), data).checkInitialized();
    }

    public static HeliobusChallengeLineup parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HeliobusChallengeLineup(), input).checkInitialized();
    }

    public static HeliobusChallengeLineup parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new HeliobusChallengeLineup(), input).checkInitialized();
    }

    /**
     * @return factory for creating HeliobusChallengeLineup messages
     */
    public static MessageFactory<HeliobusChallengeLineup> getFactory() {
      return HeliobusChallengeLineupFactory.INSTANCE;
    }

    private enum HeliobusChallengeLineupFactory implements MessageFactory<HeliobusChallengeLineup> {
      INSTANCE;

      @Override
      public HeliobusChallengeLineup create() {
        return HeliobusChallengeLineup.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName skillId = FieldName.forField("SkillId");

      static final FieldName groupId = FieldName.forField("GroupId");

      static final FieldName avatarIdList = FieldName.forField("AvatarIdList");
    }
  }
}
