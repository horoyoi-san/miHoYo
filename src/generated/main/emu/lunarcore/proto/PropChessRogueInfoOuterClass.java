// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class PropChessRogueInfoOuterClass {
  /**
   * Protobuf type {@code PropChessRogueInfo}
   */
  public static final class PropChessRogueInfo extends ProtoMessage<PropChessRogueInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional bool enter_next_cell = 5;</code>
     */
    private boolean enterNextCell;

    /**
     * <code>optional bool DGJKFKNPNLF = 8;</code>
     */
    private boolean dGJKFKNPNLF;

    private PropChessRogueInfo() {
    }

    /**
     * @return a new empty instance of {@code PropChessRogueInfo}
     */
    public static PropChessRogueInfo newInstance() {
      return new PropChessRogueInfo();
    }

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional bool enter_next_cell = 5;</code>
     * @return whether the enterNextCell field is set
     */
    public boolean hasEnterNextCell() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional bool enter_next_cell = 5;</code>
     * @return this
     */
    public PropChessRogueInfo clearEnterNextCell() {
      bitField0_ &= ~0x00000001;
      enterNextCell = false;
      return this;
    }

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional bool enter_next_cell = 5;</code>
     * @return the enterNextCell
     */
    public boolean getEnterNextCell() {
      return enterNextCell;
    }

    /**
     * <pre>
     *  11
     * </pre>
     *
     * <code>optional bool enter_next_cell = 5;</code>
     * @param value the enterNextCell to set
     * @return this
     */
    public PropChessRogueInfo setEnterNextCell(final boolean value) {
      bitField0_ |= 0x00000001;
      enterNextCell = value;
      return this;
    }

    /**
     * <code>optional bool DGJKFKNPNLF = 8;</code>
     * @return whether the dGJKFKNPNLF field is set
     */
    public boolean hasDGJKFKNPNLF() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional bool DGJKFKNPNLF = 8;</code>
     * @return this
     */
    public PropChessRogueInfo clearDGJKFKNPNLF() {
      bitField0_ &= ~0x00000002;
      dGJKFKNPNLF = false;
      return this;
    }

    /**
     * <code>optional bool DGJKFKNPNLF = 8;</code>
     * @return the dGJKFKNPNLF
     */
    public boolean getDGJKFKNPNLF() {
      return dGJKFKNPNLF;
    }

    /**
     * <code>optional bool DGJKFKNPNLF = 8;</code>
     * @param value the dGJKFKNPNLF to set
     * @return this
     */
    public PropChessRogueInfo setDGJKFKNPNLF(final boolean value) {
      bitField0_ |= 0x00000002;
      dGJKFKNPNLF = value;
      return this;
    }

    @Override
    public PropChessRogueInfo copyFrom(final PropChessRogueInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        enterNextCell = other.enterNextCell;
        dGJKFKNPNLF = other.dGJKFKNPNLF;
      }
      return this;
    }

    @Override
    public PropChessRogueInfo mergeFrom(final PropChessRogueInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasEnterNextCell()) {
        setEnterNextCell(other.enterNextCell);
      }
      if (other.hasDGJKFKNPNLF()) {
        setDGJKFKNPNLF(other.dGJKFKNPNLF);
      }
      return this;
    }

    @Override
    public PropChessRogueInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      enterNextCell = false;
      dGJKFKNPNLF = false;
      return this;
    }

    @Override
    public PropChessRogueInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof PropChessRogueInfo)) {
        return false;
      }
      PropChessRogueInfo other = (PropChessRogueInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasEnterNextCell() || enterNextCell == other.enterNextCell)
        && (!hasDGJKFKNPNLF() || dGJKFKNPNLF == other.dGJKFKNPNLF);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeBoolNoTag(enterNextCell);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 64);
        output.writeBoolNoTag(dGJKFKNPNLF);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public PropChessRogueInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // enterNextCell
            enterNextCell = input.readBool();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // dGJKFKNPNLF
            dGJKFKNPNLF = input.readBool();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeBool(FieldNames.enterNextCell, enterNextCell);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeBool(FieldNames.dGJKFKNPNLF, dGJKFKNPNLF);
      }
      output.endObject();
    }

    @Override
    public PropChessRogueInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1613501971:
          case -621745529: {
            if (input.isAtField(FieldNames.enterNextCell)) {
              if (!input.trySkipNullValue()) {
                enterNextCell = input.readBool();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1824623075: {
            if (input.isAtField(FieldNames.dGJKFKNPNLF)) {
              if (!input.trySkipNullValue()) {
                dGJKFKNPNLF = input.readBool();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public PropChessRogueInfo clone() {
      return new PropChessRogueInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static PropChessRogueInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new PropChessRogueInfo(), data).checkInitialized();
    }

    public static PropChessRogueInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PropChessRogueInfo(), input).checkInitialized();
    }

    public static PropChessRogueInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PropChessRogueInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating PropChessRogueInfo messages
     */
    public static MessageFactory<PropChessRogueInfo> getFactory() {
      return PropChessRogueInfoFactory.INSTANCE;
    }

    private enum PropChessRogueInfoFactory implements MessageFactory<PropChessRogueInfo> {
      INSTANCE;

      @Override
      public PropChessRogueInfo create() {
        return PropChessRogueInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName enterNextCell = FieldName.forField("enterNextCell", "enter_next_cell");

      static final FieldName dGJKFKNPNLF = FieldName.forField("DGJKFKNPNLF");
    }
  }
}
