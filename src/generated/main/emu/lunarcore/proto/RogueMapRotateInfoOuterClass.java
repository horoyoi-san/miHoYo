// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueMapRotateInfoOuterClass {
  /**
   * Protobuf type {@code RogueMapRotateInfo}
   */
  public static final class RogueMapRotateInfo extends ProtoMessage<RogueMapRotateInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int32 LGCHOINHLDJ = 3;</code>
     */
    private int lGCHOINHLDJ;

    /**
     * <code>optional uint32 FPHPEJPOBGJ = 15;</code>
     */
    private int fPHPEJPOBGJ;

    /**
     * <code>optional bool is_rotate = 14;</code>
     */
    private boolean isRotate;

    /**
     * <code>optional .JKEAOFKCAGO room_map = 5;</code>
     */
    private final JKEAOFKCAGOOuterClass.JKEAOFKCAGO roomMap = JKEAOFKCAGOOuterClass.JKEAOFKCAGO.newInstance();

    /**
     * <code>optional .RotaterEnergyInfo energy_info = 10;</code>
     */
    private final RotaterEnergyInfoOuterClass.RotaterEnergyInfo energyInfo = RotaterEnergyInfoOuterClass.RotaterEnergyInfo.newInstance();

    /**
     * <code>repeated .RotaterData rotater_data_list = 4;</code>
     */
    private final RepeatedMessage<RotaterDataOuterClass.RotaterData> rotaterDataList = RepeatedMessage.newEmptyInstance(RotaterDataOuterClass.RotaterData.getFactory());

    /**
     * <code>repeated .ChargerInfo charger_info = 8;</code>
     */
    private final RepeatedMessage<ChargerInfoOuterClass.ChargerInfo> chargerInfo = RepeatedMessage.newEmptyInstance(ChargerInfoOuterClass.ChargerInfo.getFactory());

    private RogueMapRotateInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueMapRotateInfo}
     */
    public static RogueMapRotateInfo newInstance() {
      return new RogueMapRotateInfo();
    }

    /**
     * <code>optional int32 LGCHOINHLDJ = 3;</code>
     * @return whether the lGCHOINHLDJ field is set
     */
    public boolean hasLGCHOINHLDJ() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int32 LGCHOINHLDJ = 3;</code>
     * @return this
     */
    public RogueMapRotateInfo clearLGCHOINHLDJ() {
      bitField0_ &= ~0x00000001;
      lGCHOINHLDJ = 0;
      return this;
    }

    /**
     * <code>optional int32 LGCHOINHLDJ = 3;</code>
     * @return the lGCHOINHLDJ
     */
    public int getLGCHOINHLDJ() {
      return lGCHOINHLDJ;
    }

    /**
     * <code>optional int32 LGCHOINHLDJ = 3;</code>
     * @param value the lGCHOINHLDJ to set
     * @return this
     */
    public RogueMapRotateInfo setLGCHOINHLDJ(final int value) {
      bitField0_ |= 0x00000001;
      lGCHOINHLDJ = value;
      return this;
    }

    /**
     * <code>optional uint32 FPHPEJPOBGJ = 15;</code>
     * @return whether the fPHPEJPOBGJ field is set
     */
    public boolean hasFPHPEJPOBGJ() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 FPHPEJPOBGJ = 15;</code>
     * @return this
     */
    public RogueMapRotateInfo clearFPHPEJPOBGJ() {
      bitField0_ &= ~0x00000002;
      fPHPEJPOBGJ = 0;
      return this;
    }

    /**
     * <code>optional uint32 FPHPEJPOBGJ = 15;</code>
     * @return the fPHPEJPOBGJ
     */
    public int getFPHPEJPOBGJ() {
      return fPHPEJPOBGJ;
    }

    /**
     * <code>optional uint32 FPHPEJPOBGJ = 15;</code>
     * @param value the fPHPEJPOBGJ to set
     * @return this
     */
    public RogueMapRotateInfo setFPHPEJPOBGJ(final int value) {
      bitField0_ |= 0x00000002;
      fPHPEJPOBGJ = value;
      return this;
    }

    /**
     * <code>optional bool is_rotate = 14;</code>
     * @return whether the isRotate field is set
     */
    public boolean hasIsRotate() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool is_rotate = 14;</code>
     * @return this
     */
    public RogueMapRotateInfo clearIsRotate() {
      bitField0_ &= ~0x00000004;
      isRotate = false;
      return this;
    }

    /**
     * <code>optional bool is_rotate = 14;</code>
     * @return the isRotate
     */
    public boolean getIsRotate() {
      return isRotate;
    }

    /**
     * <code>optional bool is_rotate = 14;</code>
     * @param value the isRotate to set
     * @return this
     */
    public RogueMapRotateInfo setIsRotate(final boolean value) {
      bitField0_ |= 0x00000004;
      isRotate = value;
      return this;
    }

    /**
     * <code>optional .JKEAOFKCAGO room_map = 5;</code>
     * @return whether the roomMap field is set
     */
    public boolean hasRoomMap() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .JKEAOFKCAGO room_map = 5;</code>
     * @return this
     */
    public RogueMapRotateInfo clearRoomMap() {
      bitField0_ &= ~0x00000008;
      roomMap.clear();
      return this;
    }

    /**
     * <code>optional .JKEAOFKCAGO room_map = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRoomMap()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public JKEAOFKCAGOOuterClass.JKEAOFKCAGO getRoomMap() {
      return roomMap;
    }

    /**
     * <code>optional .JKEAOFKCAGO room_map = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public JKEAOFKCAGOOuterClass.JKEAOFKCAGO getMutableRoomMap() {
      bitField0_ |= 0x00000008;
      return roomMap;
    }

    /**
     * <code>optional .JKEAOFKCAGO room_map = 5;</code>
     * @param value the roomMap to set
     * @return this
     */
    public RogueMapRotateInfo setRoomMap(final JKEAOFKCAGOOuterClass.JKEAOFKCAGO value) {
      bitField0_ |= 0x00000008;
      roomMap.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RotaterEnergyInfo energy_info = 10;</code>
     * @return whether the energyInfo field is set
     */
    public boolean hasEnergyInfo() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional .RotaterEnergyInfo energy_info = 10;</code>
     * @return this
     */
    public RogueMapRotateInfo clearEnergyInfo() {
      bitField0_ &= ~0x00000010;
      energyInfo.clear();
      return this;
    }

    /**
     * <code>optional .RotaterEnergyInfo energy_info = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEnergyInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RotaterEnergyInfoOuterClass.RotaterEnergyInfo getEnergyInfo() {
      return energyInfo;
    }

    /**
     * <code>optional .RotaterEnergyInfo energy_info = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RotaterEnergyInfoOuterClass.RotaterEnergyInfo getMutableEnergyInfo() {
      bitField0_ |= 0x00000010;
      return energyInfo;
    }

    /**
     * <code>optional .RotaterEnergyInfo energy_info = 10;</code>
     * @param value the energyInfo to set
     * @return this
     */
    public RogueMapRotateInfo setEnergyInfo(
        final RotaterEnergyInfoOuterClass.RotaterEnergyInfo value) {
      bitField0_ |= 0x00000010;
      energyInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated .RotaterData rotater_data_list = 4;</code>
     * @return whether the rotaterDataList field is set
     */
    public boolean hasRotaterDataList() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated .RotaterData rotater_data_list = 4;</code>
     * @return this
     */
    public RogueMapRotateInfo clearRotaterDataList() {
      bitField0_ &= ~0x00000020;
      rotaterDataList.clear();
      return this;
    }

    /**
     * <code>repeated .RotaterData rotater_data_list = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRotaterDataList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RotaterDataOuterClass.RotaterData> getRotaterDataList() {
      return rotaterDataList;
    }

    /**
     * <code>repeated .RotaterData rotater_data_list = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RotaterDataOuterClass.RotaterData> getMutableRotaterDataList() {
      bitField0_ |= 0x00000020;
      return rotaterDataList;
    }

    /**
     * <code>repeated .RotaterData rotater_data_list = 4;</code>
     * @param value the rotaterDataList to add
     * @return this
     */
    public RogueMapRotateInfo addRotaterDataList(final RotaterDataOuterClass.RotaterData value) {
      bitField0_ |= 0x00000020;
      rotaterDataList.add(value);
      return this;
    }

    /**
     * <code>repeated .RotaterData rotater_data_list = 4;</code>
     * @param values the rotaterDataList to add
     * @return this
     */
    public RogueMapRotateInfo addAllRotaterDataList(
        final RotaterDataOuterClass.RotaterData... values) {
      bitField0_ |= 0x00000020;
      rotaterDataList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .ChargerInfo charger_info = 8;</code>
     * @return whether the chargerInfo field is set
     */
    public boolean hasChargerInfo() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated .ChargerInfo charger_info = 8;</code>
     * @return this
     */
    public RogueMapRotateInfo clearChargerInfo() {
      bitField0_ &= ~0x00000040;
      chargerInfo.clear();
      return this;
    }

    /**
     * <code>repeated .ChargerInfo charger_info = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableChargerInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<ChargerInfoOuterClass.ChargerInfo> getChargerInfo() {
      return chargerInfo;
    }

    /**
     * <code>repeated .ChargerInfo charger_info = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<ChargerInfoOuterClass.ChargerInfo> getMutableChargerInfo() {
      bitField0_ |= 0x00000040;
      return chargerInfo;
    }

    /**
     * <code>repeated .ChargerInfo charger_info = 8;</code>
     * @param value the chargerInfo to add
     * @return this
     */
    public RogueMapRotateInfo addChargerInfo(final ChargerInfoOuterClass.ChargerInfo value) {
      bitField0_ |= 0x00000040;
      chargerInfo.add(value);
      return this;
    }

    /**
     * <code>repeated .ChargerInfo charger_info = 8;</code>
     * @param values the chargerInfo to add
     * @return this
     */
    public RogueMapRotateInfo addAllChargerInfo(final ChargerInfoOuterClass.ChargerInfo... values) {
      bitField0_ |= 0x00000040;
      chargerInfo.addAll(values);
      return this;
    }

    @Override
    public RogueMapRotateInfo copyFrom(final RogueMapRotateInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        lGCHOINHLDJ = other.lGCHOINHLDJ;
        fPHPEJPOBGJ = other.fPHPEJPOBGJ;
        isRotate = other.isRotate;
        roomMap.copyFrom(other.roomMap);
        energyInfo.copyFrom(other.energyInfo);
        rotaterDataList.copyFrom(other.rotaterDataList);
        chargerInfo.copyFrom(other.chargerInfo);
      }
      return this;
    }

    @Override
    public RogueMapRotateInfo mergeFrom(final RogueMapRotateInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLGCHOINHLDJ()) {
        setLGCHOINHLDJ(other.lGCHOINHLDJ);
      }
      if (other.hasFPHPEJPOBGJ()) {
        setFPHPEJPOBGJ(other.fPHPEJPOBGJ);
      }
      if (other.hasIsRotate()) {
        setIsRotate(other.isRotate);
      }
      if (other.hasRoomMap()) {
        getMutableRoomMap().mergeFrom(other.roomMap);
      }
      if (other.hasEnergyInfo()) {
        getMutableEnergyInfo().mergeFrom(other.energyInfo);
      }
      if (other.hasRotaterDataList()) {
        getMutableRotaterDataList().addAll(other.rotaterDataList);
      }
      if (other.hasChargerInfo()) {
        getMutableChargerInfo().addAll(other.chargerInfo);
      }
      return this;
    }

    @Override
    public RogueMapRotateInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      lGCHOINHLDJ = 0;
      fPHPEJPOBGJ = 0;
      isRotate = false;
      roomMap.clear();
      energyInfo.clear();
      rotaterDataList.clear();
      chargerInfo.clear();
      return this;
    }

    @Override
    public RogueMapRotateInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      roomMap.clearQuick();
      energyInfo.clearQuick();
      rotaterDataList.clearQuick();
      chargerInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueMapRotateInfo)) {
        return false;
      }
      RogueMapRotateInfo other = (RogueMapRotateInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasLGCHOINHLDJ() || lGCHOINHLDJ == other.lGCHOINHLDJ)
        && (!hasFPHPEJPOBGJ() || fPHPEJPOBGJ == other.fPHPEJPOBGJ)
        && (!hasIsRotate() || isRotate == other.isRotate)
        && (!hasRoomMap() || roomMap.equals(other.roomMap))
        && (!hasEnergyInfo() || energyInfo.equals(other.energyInfo))
        && (!hasRotaterDataList() || rotaterDataList.equals(other.rotaterDataList))
        && (!hasChargerInfo() || chargerInfo.equals(other.chargerInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeInt32NoTag(lGCHOINHLDJ);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(fPHPEJPOBGJ);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 112);
        output.writeBoolNoTag(isRotate);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 42);
        output.writeMessageNoTag(roomMap);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 82);
        output.writeMessageNoTag(energyInfo);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < rotaterDataList.length(); i++) {
          output.writeRawByte((byte) 34);
          output.writeMessageNoTag(rotaterDataList.get(i));
        }
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < chargerInfo.length(); i++) {
          output.writeRawByte((byte) 66);
          output.writeMessageNoTag(chargerInfo.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt32SizeNoTag(lGCHOINHLDJ);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(fPHPEJPOBGJ);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(roomMap);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(energyInfo);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * rotaterDataList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(rotaterDataList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * chargerInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(chargerInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueMapRotateInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // lGCHOINHLDJ
            lGCHOINHLDJ = input.readInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // fPHPEJPOBGJ
            fPHPEJPOBGJ = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // isRotate
            isRotate = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // roomMap
            input.readMessage(roomMap);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // energyInfo
            input.readMessage(energyInfo);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // rotaterDataList
            tag = input.readRepeatedMessage(rotaterDataList, tag);
            bitField0_ |= 0x00000020;
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // chargerInfo
            tag = input.readRepeatedMessage(chargerInfo, tag);
            bitField0_ |= 0x00000040;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt32(FieldNames.lGCHOINHLDJ, lGCHOINHLDJ);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.fPHPEJPOBGJ, fPHPEJPOBGJ);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.isRotate, isRotate);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.roomMap, roomMap);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeMessage(FieldNames.energyInfo, energyInfo);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedMessage(FieldNames.rotaterDataList, rotaterDataList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedMessage(FieldNames.chargerInfo, chargerInfo);
      }
      output.endObject();
    }

    @Override
    public RogueMapRotateInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -846449378: {
            if (input.isAtField(FieldNames.lGCHOINHLDJ)) {
              if (!input.trySkipNullValue()) {
                lGCHOINHLDJ = input.readInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -67481297: {
            if (input.isAtField(FieldNames.fPHPEJPOBGJ)) {
              if (!input.trySkipNullValue()) {
                fPHPEJPOBGJ = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -251146459:
          case -461141488: {
            if (input.isAtField(FieldNames.isRotate)) {
              if (!input.trySkipNullValue()) {
                isRotate = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1379875457:
          case -172986376: {
            if (input.isAtField(FieldNames.roomMap)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(roomMap);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1464698710:
          case -1818804219: {
            if (input.isAtField(FieldNames.energyInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(energyInfo);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1042021119:
          case 37426251: {
            if (input.isAtField(FieldNames.rotaterDataList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(rotaterDataList);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1038073356:
          case 2135678991: {
            if (input.isAtField(FieldNames.chargerInfo)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(chargerInfo);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueMapRotateInfo clone() {
      return new RogueMapRotateInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueMapRotateInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueMapRotateInfo(), data).checkInitialized();
    }

    public static RogueMapRotateInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueMapRotateInfo(), input).checkInitialized();
    }

    public static RogueMapRotateInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueMapRotateInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueMapRotateInfo messages
     */
    public static MessageFactory<RogueMapRotateInfo> getFactory() {
      return RogueMapRotateInfoFactory.INSTANCE;
    }

    private enum RogueMapRotateInfoFactory implements MessageFactory<RogueMapRotateInfo> {
      INSTANCE;

      @Override
      public RogueMapRotateInfo create() {
        return RogueMapRotateInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName lGCHOINHLDJ = FieldName.forField("LGCHOINHLDJ");

      static final FieldName fPHPEJPOBGJ = FieldName.forField("FPHPEJPOBGJ");

      static final FieldName isRotate = FieldName.forField("isRotate", "is_rotate");

      static final FieldName roomMap = FieldName.forField("roomMap", "room_map");

      static final FieldName energyInfo = FieldName.forField("energyInfo", "energy_info");

      static final FieldName rotaterDataList = FieldName.forField("rotaterDataList", "rotater_data_list");

      static final FieldName chargerInfo = FieldName.forField("chargerInfo", "charger_info");
    }
  }
}
