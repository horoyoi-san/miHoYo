// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class FriendHistoryInfoOuterClass {
  /**
   * Protobuf type {@code FriendHistoryInfo}
   */
  public static final class FriendHistoryInfo extends ProtoMessage<FriendHistoryInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int64 last_send_time = 1;</code>
     */
    private long lastSendTime;

    /**
     * <code>optional uint32 target_uid = 2;</code>
     */
    private int targetUid;

    private FriendHistoryInfo() {
    }

    /**
     * @return a new empty instance of {@code FriendHistoryInfo}
     */
    public static FriendHistoryInfo newInstance() {
      return new FriendHistoryInfo();
    }

    /**
     * <code>optional int64 last_send_time = 1;</code>
     * @return whether the lastSendTime field is set
     */
    public boolean hasLastSendTime() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int64 last_send_time = 1;</code>
     * @return this
     */
    public FriendHistoryInfo clearLastSendTime() {
      bitField0_ &= ~0x00000001;
      lastSendTime = 0L;
      return this;
    }

    /**
     * <code>optional int64 last_send_time = 1;</code>
     * @return the lastSendTime
     */
    public long getLastSendTime() {
      return lastSendTime;
    }

    /**
     * <code>optional int64 last_send_time = 1;</code>
     * @param value the lastSendTime to set
     * @return this
     */
    public FriendHistoryInfo setLastSendTime(final long value) {
      bitField0_ |= 0x00000001;
      lastSendTime = value;
      return this;
    }

    /**
     * <code>optional uint32 target_uid = 2;</code>
     * @return whether the targetUid field is set
     */
    public boolean hasTargetUid() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 target_uid = 2;</code>
     * @return this
     */
    public FriendHistoryInfo clearTargetUid() {
      bitField0_ &= ~0x00000002;
      targetUid = 0;
      return this;
    }

    /**
     * <code>optional uint32 target_uid = 2;</code>
     * @return the targetUid
     */
    public int getTargetUid() {
      return targetUid;
    }

    /**
     * <code>optional uint32 target_uid = 2;</code>
     * @param value the targetUid to set
     * @return this
     */
    public FriendHistoryInfo setTargetUid(final int value) {
      bitField0_ |= 0x00000002;
      targetUid = value;
      return this;
    }

    @Override
    public FriendHistoryInfo copyFrom(final FriendHistoryInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        lastSendTime = other.lastSendTime;
        targetUid = other.targetUid;
      }
      return this;
    }

    @Override
    public FriendHistoryInfo mergeFrom(final FriendHistoryInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLastSendTime()) {
        setLastSendTime(other.lastSendTime);
      }
      if (other.hasTargetUid()) {
        setTargetUid(other.targetUid);
      }
      return this;
    }

    @Override
    public FriendHistoryInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      lastSendTime = 0L;
      targetUid = 0;
      return this;
    }

    @Override
    public FriendHistoryInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof FriendHistoryInfo)) {
        return false;
      }
      FriendHistoryInfo other = (FriendHistoryInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasLastSendTime() || lastSendTime == other.lastSendTime)
        && (!hasTargetUid() || targetUid == other.targetUid);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeInt64NoTag(lastSendTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(targetUid);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(lastSendTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(targetUid);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public FriendHistoryInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // lastSendTime
            lastSendTime = input.readInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // targetUid
            targetUid = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt64(FieldNames.lastSendTime, lastSendTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.targetUid, targetUid);
      }
      output.endObject();
    }

    @Override
    public FriendHistoryInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -473001173:
          case 1048410811: {
            if (input.isAtField(FieldNames.lastSendTime)) {
              if (!input.trySkipNullValue()) {
                lastSendTime = input.readInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -815586049:
          case 486945954: {
            if (input.isAtField(FieldNames.targetUid)) {
              if (!input.trySkipNullValue()) {
                targetUid = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public FriendHistoryInfo clone() {
      return new FriendHistoryInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static FriendHistoryInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new FriendHistoryInfo(), data).checkInitialized();
    }

    public static FriendHistoryInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FriendHistoryInfo(), input).checkInitialized();
    }

    public static FriendHistoryInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new FriendHistoryInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating FriendHistoryInfo messages
     */
    public static MessageFactory<FriendHistoryInfo> getFactory() {
      return FriendHistoryInfoFactory.INSTANCE;
    }

    private enum FriendHistoryInfoFactory implements MessageFactory<FriendHistoryInfo> {
      INSTANCE;

      @Override
      public FriendHistoryInfo create() {
        return FriendHistoryInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName lastSendTime = FieldName.forField("lastSendTime", "last_send_time");

      static final FieldName targetUid = FieldName.forField("targetUid", "target_uid");
    }
  }
}
