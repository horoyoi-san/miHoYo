// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class UpdateMarkChestCsReqOuterClass {
  /**
   * Protobuf type {@code UpdateMarkChestCsReq}
   */
  public static final class UpdateMarkChestCsReq extends ProtoMessage<UpdateMarkChestCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 OMBECIMNGEE = 10;</code>
     */
    private int oMBECIMNGEE;

    /**
     * <code>optional uint32 func_id = 15;</code>
     */
    private int funcId;

    /**
     * <code>repeated .MarkChestInfo mark_chest_info_list = 8;</code>
     */
    private final RepeatedMessage<MarkChestInfoOuterClass.MarkChestInfo> markChestInfoList = RepeatedMessage.newEmptyInstance(MarkChestInfoOuterClass.MarkChestInfo.getFactory());

    private UpdateMarkChestCsReq() {
    }

    /**
     * @return a new empty instance of {@code UpdateMarkChestCsReq}
     */
    public static UpdateMarkChestCsReq newInstance() {
      return new UpdateMarkChestCsReq();
    }

    /**
     * <code>optional uint32 OMBECIMNGEE = 10;</code>
     * @return whether the oMBECIMNGEE field is set
     */
    public boolean hasOMBECIMNGEE() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 OMBECIMNGEE = 10;</code>
     * @return this
     */
    public UpdateMarkChestCsReq clearOMBECIMNGEE() {
      bitField0_ &= ~0x00000001;
      oMBECIMNGEE = 0;
      return this;
    }

    /**
     * <code>optional uint32 OMBECIMNGEE = 10;</code>
     * @return the oMBECIMNGEE
     */
    public int getOMBECIMNGEE() {
      return oMBECIMNGEE;
    }

    /**
     * <code>optional uint32 OMBECIMNGEE = 10;</code>
     * @param value the oMBECIMNGEE to set
     * @return this
     */
    public UpdateMarkChestCsReq setOMBECIMNGEE(final int value) {
      bitField0_ |= 0x00000001;
      oMBECIMNGEE = value;
      return this;
    }

    /**
     * <code>optional uint32 func_id = 15;</code>
     * @return whether the funcId field is set
     */
    public boolean hasFuncId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 func_id = 15;</code>
     * @return this
     */
    public UpdateMarkChestCsReq clearFuncId() {
      bitField0_ &= ~0x00000002;
      funcId = 0;
      return this;
    }

    /**
     * <code>optional uint32 func_id = 15;</code>
     * @return the funcId
     */
    public int getFuncId() {
      return funcId;
    }

    /**
     * <code>optional uint32 func_id = 15;</code>
     * @param value the funcId to set
     * @return this
     */
    public UpdateMarkChestCsReq setFuncId(final int value) {
      bitField0_ |= 0x00000002;
      funcId = value;
      return this;
    }

    /**
     * <code>repeated .MarkChestInfo mark_chest_info_list = 8;</code>
     * @return whether the markChestInfoList field is set
     */
    public boolean hasMarkChestInfoList() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated .MarkChestInfo mark_chest_info_list = 8;</code>
     * @return this
     */
    public UpdateMarkChestCsReq clearMarkChestInfoList() {
      bitField0_ &= ~0x00000004;
      markChestInfoList.clear();
      return this;
    }

    /**
     * <code>repeated .MarkChestInfo mark_chest_info_list = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMarkChestInfoList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MarkChestInfoOuterClass.MarkChestInfo> getMarkChestInfoList() {
      return markChestInfoList;
    }

    /**
     * <code>repeated .MarkChestInfo mark_chest_info_list = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MarkChestInfoOuterClass.MarkChestInfo> getMutableMarkChestInfoList() {
      bitField0_ |= 0x00000004;
      return markChestInfoList;
    }

    /**
     * <code>repeated .MarkChestInfo mark_chest_info_list = 8;</code>
     * @param value the markChestInfoList to add
     * @return this
     */
    public UpdateMarkChestCsReq addMarkChestInfoList(
        final MarkChestInfoOuterClass.MarkChestInfo value) {
      bitField0_ |= 0x00000004;
      markChestInfoList.add(value);
      return this;
    }

    /**
     * <code>repeated .MarkChestInfo mark_chest_info_list = 8;</code>
     * @param values the markChestInfoList to add
     * @return this
     */
    public UpdateMarkChestCsReq addAllMarkChestInfoList(
        final MarkChestInfoOuterClass.MarkChestInfo... values) {
      bitField0_ |= 0x00000004;
      markChestInfoList.addAll(values);
      return this;
    }

    @Override
    public UpdateMarkChestCsReq copyFrom(final UpdateMarkChestCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        oMBECIMNGEE = other.oMBECIMNGEE;
        funcId = other.funcId;
        markChestInfoList.copyFrom(other.markChestInfoList);
      }
      return this;
    }

    @Override
    public UpdateMarkChestCsReq mergeFrom(final UpdateMarkChestCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasOMBECIMNGEE()) {
        setOMBECIMNGEE(other.oMBECIMNGEE);
      }
      if (other.hasFuncId()) {
        setFuncId(other.funcId);
      }
      if (other.hasMarkChestInfoList()) {
        getMutableMarkChestInfoList().addAll(other.markChestInfoList);
      }
      return this;
    }

    @Override
    public UpdateMarkChestCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      oMBECIMNGEE = 0;
      funcId = 0;
      markChestInfoList.clear();
      return this;
    }

    @Override
    public UpdateMarkChestCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      markChestInfoList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof UpdateMarkChestCsReq)) {
        return false;
      }
      UpdateMarkChestCsReq other = (UpdateMarkChestCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasOMBECIMNGEE() || oMBECIMNGEE == other.oMBECIMNGEE)
        && (!hasFuncId() || funcId == other.funcId)
        && (!hasMarkChestInfoList() || markChestInfoList.equals(other.markChestInfoList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(oMBECIMNGEE);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(funcId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < markChestInfoList.length(); i++) {
          output.writeRawByte((byte) 66);
          output.writeMessageNoTag(markChestInfoList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oMBECIMNGEE);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(funcId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * markChestInfoList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(markChestInfoList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public UpdateMarkChestCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // oMBECIMNGEE
            oMBECIMNGEE = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // funcId
            funcId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // markChestInfoList
            tag = input.readRepeatedMessage(markChestInfoList, tag);
            bitField0_ |= 0x00000004;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.oMBECIMNGEE, oMBECIMNGEE);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.funcId, funcId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedMessage(FieldNames.markChestInfoList, markChestInfoList);
      }
      output.endObject();
    }

    @Override
    public UpdateMarkChestCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -13318273: {
            if (input.isAtField(FieldNames.oMBECIMNGEE)) {
              if (!input.trySkipNullValue()) {
                oMBECIMNGEE = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1263367425:
          case -509663114: {
            if (input.isAtField(FieldNames.funcId)) {
              if (!input.trySkipNullValue()) {
                funcId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2128373056:
          case -79054753: {
            if (input.isAtField(FieldNames.markChestInfoList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(markChestInfoList);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public UpdateMarkChestCsReq clone() {
      return new UpdateMarkChestCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static UpdateMarkChestCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new UpdateMarkChestCsReq(), data).checkInitialized();
    }

    public static UpdateMarkChestCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new UpdateMarkChestCsReq(), input).checkInitialized();
    }

    public static UpdateMarkChestCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new UpdateMarkChestCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating UpdateMarkChestCsReq messages
     */
    public static MessageFactory<UpdateMarkChestCsReq> getFactory() {
      return UpdateMarkChestCsReqFactory.INSTANCE;
    }

    private enum UpdateMarkChestCsReqFactory implements MessageFactory<UpdateMarkChestCsReq> {
      INSTANCE;

      @Override
      public UpdateMarkChestCsReq create() {
        return UpdateMarkChestCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName oMBECIMNGEE = FieldName.forField("OMBECIMNGEE");

      static final FieldName funcId = FieldName.forField("funcId", "func_id");

      static final FieldName markChestInfoList = FieldName.forField("markChestInfoList", "mark_chest_info_list");
    }
  }
}
