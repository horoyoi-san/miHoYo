// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class SectionStatusOuterClass {
  /**
   * Protobuf type {@code SectionStatus}
   */
  public static final class SectionStatus extends ProtoMessage<SectionStatus> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 section_id = 15;</code>
     */
    private int sectionId;

    /**
     * <code>optional .EPNMFKEIHDL CGIHMNIOCGJ = 5;</code>
     */
    private int cGIHMNIOCGJ;

    private SectionStatus() {
    }

    /**
     * @return a new empty instance of {@code SectionStatus}
     */
    public static SectionStatus newInstance() {
      return new SectionStatus();
    }

    /**
     * <code>optional uint32 section_id = 15;</code>
     * @return whether the sectionId field is set
     */
    public boolean hasSectionId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 section_id = 15;</code>
     * @return this
     */
    public SectionStatus clearSectionId() {
      bitField0_ &= ~0x00000001;
      sectionId = 0;
      return this;
    }

    /**
     * <code>optional uint32 section_id = 15;</code>
     * @return the sectionId
     */
    public int getSectionId() {
      return sectionId;
    }

    /**
     * <code>optional uint32 section_id = 15;</code>
     * @param value the sectionId to set
     * @return this
     */
    public SectionStatus setSectionId(final int value) {
      bitField0_ |= 0x00000001;
      sectionId = value;
      return this;
    }

    /**
     * <code>optional .EPNMFKEIHDL CGIHMNIOCGJ = 5;</code>
     * @return whether the cGIHMNIOCGJ field is set
     */
    public boolean hasCGIHMNIOCGJ() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .EPNMFKEIHDL CGIHMNIOCGJ = 5;</code>
     * @return this
     */
    public SectionStatus clearCGIHMNIOCGJ() {
      bitField0_ &= ~0x00000002;
      cGIHMNIOCGJ = 0;
      return this;
    }

    /**
     * <code>optional .EPNMFKEIHDL CGIHMNIOCGJ = 5;</code>
     * @return the cGIHMNIOCGJ
     */
    public EPNMFKEIHDLOuterClass.EPNMFKEIHDL getCGIHMNIOCGJ() {
      return EPNMFKEIHDLOuterClass.EPNMFKEIHDL.forNumber(cGIHMNIOCGJ);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link SectionStatus#getCGIHMNIOCGJ()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getCGIHMNIOCGJValue() {
      return cGIHMNIOCGJ;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link EPNMFKEIHDLOuterClass.EPNMFKEIHDL}. Setting an invalid value
     * can cause {@link SectionStatus#getCGIHMNIOCGJ()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public SectionStatus setCGIHMNIOCGJValue(final int value) {
      bitField0_ |= 0x00000002;
      cGIHMNIOCGJ = value;
      return this;
    }

    /**
     * <code>optional .EPNMFKEIHDL CGIHMNIOCGJ = 5;</code>
     * @param value the cGIHMNIOCGJ to set
     * @return this
     */
    public SectionStatus setCGIHMNIOCGJ(final EPNMFKEIHDLOuterClass.EPNMFKEIHDL value) {
      bitField0_ |= 0x00000002;
      cGIHMNIOCGJ = value.getNumber();
      return this;
    }

    @Override
    public SectionStatus copyFrom(final SectionStatus other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        sectionId = other.sectionId;
        cGIHMNIOCGJ = other.cGIHMNIOCGJ;
      }
      return this;
    }

    @Override
    public SectionStatus mergeFrom(final SectionStatus other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasSectionId()) {
        setSectionId(other.sectionId);
      }
      if (other.hasCGIHMNIOCGJ()) {
        setCGIHMNIOCGJValue(other.cGIHMNIOCGJ);
      }
      return this;
    }

    @Override
    public SectionStatus clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      sectionId = 0;
      cGIHMNIOCGJ = 0;
      return this;
    }

    @Override
    public SectionStatus clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SectionStatus)) {
        return false;
      }
      SectionStatus other = (SectionStatus) o;
      return bitField0_ == other.bitField0_
        && (!hasSectionId() || sectionId == other.sectionId)
        && (!hasCGIHMNIOCGJ() || cGIHMNIOCGJ == other.cGIHMNIOCGJ);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(sectionId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeEnumNoTag(cGIHMNIOCGJ);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(sectionId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(cGIHMNIOCGJ);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SectionStatus mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 120: {
            // sectionId
            sectionId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // cGIHMNIOCGJ
            final int value = input.readInt32();
            if (EPNMFKEIHDLOuterClass.EPNMFKEIHDL.forNumber(value) != null) {
              cGIHMNIOCGJ = value;
              bitField0_ |= 0x00000002;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.sectionId, sectionId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeEnum(FieldNames.cGIHMNIOCGJ, cGIHMNIOCGJ, EPNMFKEIHDLOuterClass.EPNMFKEIHDL.converter());
      }
      output.endObject();
    }

    @Override
    public SectionStatus mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -678731040:
          case 434195637: {
            if (input.isAtField(FieldNames.sectionId)) {
              if (!input.trySkipNullValue()) {
                sectionId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1449860452: {
            if (input.isAtField(FieldNames.cGIHMNIOCGJ)) {
              if (!input.trySkipNullValue()) {
                final EPNMFKEIHDLOuterClass.EPNMFKEIHDL value = input.readEnum(EPNMFKEIHDLOuterClass.EPNMFKEIHDL.converter());
                if (value != null) {
                  cGIHMNIOCGJ = value.getNumber();
                  bitField0_ |= 0x00000002;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SectionStatus clone() {
      return new SectionStatus().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SectionStatus parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SectionStatus(), data).checkInitialized();
    }

    public static SectionStatus parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SectionStatus(), input).checkInitialized();
    }

    public static SectionStatus parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SectionStatus(), input).checkInitialized();
    }

    /**
     * @return factory for creating SectionStatus messages
     */
    public static MessageFactory<SectionStatus> getFactory() {
      return SectionStatusFactory.INSTANCE;
    }

    private enum SectionStatusFactory implements MessageFactory<SectionStatus> {
      INSTANCE;

      @Override
      public SectionStatus create() {
        return SectionStatus.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName sectionId = FieldName.forField("sectionId", "section_id");

      static final FieldName cGIHMNIOCGJ = FieldName.forField("CGIHMNIOCGJ");
    }
  }
}
