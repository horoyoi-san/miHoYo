// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class MazeGroupOuterClass {
  /**
   * Protobuf type {@code MazeGroup}
   */
  public static final class MazeGroup extends ProtoMessage<MazeGroup> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int64 INLDCCLIOAN = 4;</code>
     */
    private long iNLDCCLIOAN;

    /**
     * <code>optional uint32 group_id = 5;</code>
     */
    private int groupId;

    /**
     * <code>optional bool ILBEAAOOJJP = 11;</code>
     */
    private boolean iLBEAAOOJJP;

    /**
     * <code>repeated uint32 NOBKEONAKLE = 10;</code>
     */
    private final RepeatedInt nOBKEONAKLE = RepeatedInt.newEmptyInstance();

    private MazeGroup() {
    }

    /**
     * @return a new empty instance of {@code MazeGroup}
     */
    public static MazeGroup newInstance() {
      return new MazeGroup();
    }

    /**
     * <code>optional int64 INLDCCLIOAN = 4;</code>
     * @return whether the iNLDCCLIOAN field is set
     */
    public boolean hasINLDCCLIOAN() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int64 INLDCCLIOAN = 4;</code>
     * @return this
     */
    public MazeGroup clearINLDCCLIOAN() {
      bitField0_ &= ~0x00000001;
      iNLDCCLIOAN = 0L;
      return this;
    }

    /**
     * <code>optional int64 INLDCCLIOAN = 4;</code>
     * @return the iNLDCCLIOAN
     */
    public long getINLDCCLIOAN() {
      return iNLDCCLIOAN;
    }

    /**
     * <code>optional int64 INLDCCLIOAN = 4;</code>
     * @param value the iNLDCCLIOAN to set
     * @return this
     */
    public MazeGroup setINLDCCLIOAN(final long value) {
      bitField0_ |= 0x00000001;
      iNLDCCLIOAN = value;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 5;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 group_id = 5;</code>
     * @return this
     */
    public MazeGroup clearGroupId() {
      bitField0_ &= ~0x00000002;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 5;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 group_id = 5;</code>
     * @param value the groupId to set
     * @return this
     */
    public MazeGroup setGroupId(final int value) {
      bitField0_ |= 0x00000002;
      groupId = value;
      return this;
    }

    /**
     * <code>optional bool ILBEAAOOJJP = 11;</code>
     * @return whether the iLBEAAOOJJP field is set
     */
    public boolean hasILBEAAOOJJP() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool ILBEAAOOJJP = 11;</code>
     * @return this
     */
    public MazeGroup clearILBEAAOOJJP() {
      bitField0_ &= ~0x00000004;
      iLBEAAOOJJP = false;
      return this;
    }

    /**
     * <code>optional bool ILBEAAOOJJP = 11;</code>
     * @return the iLBEAAOOJJP
     */
    public boolean getILBEAAOOJJP() {
      return iLBEAAOOJJP;
    }

    /**
     * <code>optional bool ILBEAAOOJJP = 11;</code>
     * @param value the iLBEAAOOJJP to set
     * @return this
     */
    public MazeGroup setILBEAAOOJJP(final boolean value) {
      bitField0_ |= 0x00000004;
      iLBEAAOOJJP = value;
      return this;
    }

    /**
     * <code>repeated uint32 NOBKEONAKLE = 10;</code>
     * @return whether the nOBKEONAKLE field is set
     */
    public boolean hasNOBKEONAKLE() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 NOBKEONAKLE = 10;</code>
     * @return this
     */
    public MazeGroup clearNOBKEONAKLE() {
      bitField0_ &= ~0x00000008;
      nOBKEONAKLE.clear();
      return this;
    }

    /**
     * <code>repeated uint32 NOBKEONAKLE = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableNOBKEONAKLE()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getNOBKEONAKLE() {
      return nOBKEONAKLE;
    }

    /**
     * <code>repeated uint32 NOBKEONAKLE = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableNOBKEONAKLE() {
      bitField0_ |= 0x00000008;
      return nOBKEONAKLE;
    }

    /**
     * <code>repeated uint32 NOBKEONAKLE = 10;</code>
     * @param value the nOBKEONAKLE to add
     * @return this
     */
    public MazeGroup addNOBKEONAKLE(final int value) {
      bitField0_ |= 0x00000008;
      nOBKEONAKLE.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 NOBKEONAKLE = 10;</code>
     * @param values the nOBKEONAKLE to add
     * @return this
     */
    public MazeGroup addAllNOBKEONAKLE(final int... values) {
      bitField0_ |= 0x00000008;
      nOBKEONAKLE.addAll(values);
      return this;
    }

    @Override
    public MazeGroup copyFrom(final MazeGroup other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        iNLDCCLIOAN = other.iNLDCCLIOAN;
        groupId = other.groupId;
        iLBEAAOOJJP = other.iLBEAAOOJJP;
        nOBKEONAKLE.copyFrom(other.nOBKEONAKLE);
      }
      return this;
    }

    @Override
    public MazeGroup mergeFrom(final MazeGroup other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasINLDCCLIOAN()) {
        setINLDCCLIOAN(other.iNLDCCLIOAN);
      }
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasILBEAAOOJJP()) {
        setILBEAAOOJJP(other.iLBEAAOOJJP);
      }
      if (other.hasNOBKEONAKLE()) {
        getMutableNOBKEONAKLE().addAll(other.nOBKEONAKLE);
      }
      return this;
    }

    @Override
    public MazeGroup clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      iNLDCCLIOAN = 0L;
      groupId = 0;
      iLBEAAOOJJP = false;
      nOBKEONAKLE.clear();
      return this;
    }

    @Override
    public MazeGroup clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      nOBKEONAKLE.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MazeGroup)) {
        return false;
      }
      MazeGroup other = (MazeGroup) o;
      return bitField0_ == other.bitField0_
        && (!hasINLDCCLIOAN() || iNLDCCLIOAN == other.iNLDCCLIOAN)
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasILBEAAOOJJP() || iLBEAAOOJJP == other.iLBEAAOOJJP)
        && (!hasNOBKEONAKLE() || nOBKEONAKLE.equals(other.nOBKEONAKLE));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeInt64NoTag(iNLDCCLIOAN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 88);
        output.writeBoolNoTag(iLBEAAOOJJP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < nOBKEONAKLE.length(); i++) {
          output.writeRawByte((byte) 80);
          output.writeUInt32NoTag(nOBKEONAKLE.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(iNLDCCLIOAN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * nOBKEONAKLE.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(nOBKEONAKLE);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MazeGroup mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // iNLDCCLIOAN
            iNLDCCLIOAN = input.readInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // iLBEAAOOJJP
            iLBEAAOOJJP = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // nOBKEONAKLE [packed=true]
            input.readPackedUInt32(nOBKEONAKLE, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 80: {
            // nOBKEONAKLE [packed=false]
            tag = input.readRepeatedUInt32(nOBKEONAKLE, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt64(FieldNames.iNLDCCLIOAN, iNLDCCLIOAN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.iLBEAAOOJJP, iLBEAAOOJJP);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.nOBKEONAKLE, nOBKEONAKLE);
      }
      output.endObject();
    }

    @Override
    public MazeGroup mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -828383806: {
            if (input.isAtField(FieldNames.iNLDCCLIOAN)) {
              if (!input.trySkipNullValue()) {
                iNLDCCLIOAN = input.readInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 372808106: {
            if (input.isAtField(FieldNames.iLBEAAOOJJP)) {
              if (!input.trySkipNullValue()) {
                iLBEAAOOJJP = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 909888765: {
            if (input.isAtField(FieldNames.nOBKEONAKLE)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(nOBKEONAKLE);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MazeGroup clone() {
      return new MazeGroup().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MazeGroup parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MazeGroup(), data).checkInitialized();
    }

    public static MazeGroup parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MazeGroup(), input).checkInitialized();
    }

    public static MazeGroup parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MazeGroup(), input).checkInitialized();
    }

    /**
     * @return factory for creating MazeGroup messages
     */
    public static MessageFactory<MazeGroup> getFactory() {
      return MazeGroupFactory.INSTANCE;
    }

    private enum MazeGroupFactory implements MessageFactory<MazeGroup> {
      INSTANCE;

      @Override
      public MazeGroup create() {
        return MazeGroup.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName iNLDCCLIOAN = FieldName.forField("INLDCCLIOAN");

      static final FieldName groupId = FieldName.forField("groupId", "group_id");

      static final FieldName iLBEAAOOJJP = FieldName.forField("ILBEAAOOJJP");

      static final FieldName nOBKEONAKLE = FieldName.forField("NOBKEONAKLE");
    }
  }
}
