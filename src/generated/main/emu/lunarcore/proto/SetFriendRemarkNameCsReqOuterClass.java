// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class SetFriendRemarkNameCsReqOuterClass {
  /**
   * Protobuf type {@code SetFriendRemarkNameCsReq}
   */
  public static final class SetFriendRemarkNameCsReq extends ProtoMessage<SetFriendRemarkNameCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 uid = 8;</code>
     */
    private int uid;

    /**
     * <code>optional uint32 reason = 12;</code>
     */
    private int reason;

    /**
     * <code>optional string remark_name = 5;</code>
     */
    private final Utf8String remarkName = Utf8String.newEmptyInstance();

    private SetFriendRemarkNameCsReq() {
    }

    /**
     * @return a new empty instance of {@code SetFriendRemarkNameCsReq}
     */
    public static SetFriendRemarkNameCsReq newInstance() {
      return new SetFriendRemarkNameCsReq();
    }

    /**
     * <code>optional uint32 uid = 8;</code>
     * @return whether the uid field is set
     */
    public boolean hasUid() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 uid = 8;</code>
     * @return this
     */
    public SetFriendRemarkNameCsReq clearUid() {
      bitField0_ &= ~0x00000001;
      uid = 0;
      return this;
    }

    /**
     * <code>optional uint32 uid = 8;</code>
     * @return the uid
     */
    public int getUid() {
      return uid;
    }

    /**
     * <code>optional uint32 uid = 8;</code>
     * @param value the uid to set
     * @return this
     */
    public SetFriendRemarkNameCsReq setUid(final int value) {
      bitField0_ |= 0x00000001;
      uid = value;
      return this;
    }

    /**
     * <code>optional uint32 reason = 12;</code>
     * @return whether the reason field is set
     */
    public boolean hasReason() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 reason = 12;</code>
     * @return this
     */
    public SetFriendRemarkNameCsReq clearReason() {
      bitField0_ &= ~0x00000002;
      reason = 0;
      return this;
    }

    /**
     * <code>optional uint32 reason = 12;</code>
     * @return the reason
     */
    public int getReason() {
      return reason;
    }

    /**
     * <code>optional uint32 reason = 12;</code>
     * @param value the reason to set
     * @return this
     */
    public SetFriendRemarkNameCsReq setReason(final int value) {
      bitField0_ |= 0x00000002;
      reason = value;
      return this;
    }

    /**
     * <code>optional string remark_name = 5;</code>
     * @return whether the remarkName field is set
     */
    public boolean hasRemarkName() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional string remark_name = 5;</code>
     * @return this
     */
    public SetFriendRemarkNameCsReq clearRemarkName() {
      bitField0_ &= ~0x00000004;
      remarkName.clear();
      return this;
    }

    /**
     * <code>optional string remark_name = 5;</code>
     * @return the remarkName
     */
    public String getRemarkName() {
      return remarkName.getString();
    }

    /**
     * <code>optional string remark_name = 5;</code>
     * @return internal {@code Utf8String} representation of remarkName for reading
     */
    public Utf8String getRemarkNameBytes() {
      return this.remarkName;
    }

    /**
     * <code>optional string remark_name = 5;</code>
     * @return internal {@code Utf8String} representation of remarkName for modifications
     */
    public Utf8String getMutableRemarkNameBytes() {
      bitField0_ |= 0x00000004;
      return this.remarkName;
    }

    /**
     * <code>optional string remark_name = 5;</code>
     * @param value the remarkName to set
     * @return this
     */
    public SetFriendRemarkNameCsReq setRemarkName(final CharSequence value) {
      bitField0_ |= 0x00000004;
      remarkName.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string remark_name = 5;</code>
     * @param value the remarkName to set
     * @return this
     */
    public SetFriendRemarkNameCsReq setRemarkName(final Utf8String value) {
      bitField0_ |= 0x00000004;
      remarkName.copyFrom(value);
      return this;
    }

    @Override
    public SetFriendRemarkNameCsReq copyFrom(final SetFriendRemarkNameCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        uid = other.uid;
        reason = other.reason;
        remarkName.copyFrom(other.remarkName);
      }
      return this;
    }

    @Override
    public SetFriendRemarkNameCsReq mergeFrom(final SetFriendRemarkNameCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasUid()) {
        setUid(other.uid);
      }
      if (other.hasReason()) {
        setReason(other.reason);
      }
      if (other.hasRemarkName()) {
        getMutableRemarkNameBytes().copyFrom(other.remarkName);
      }
      return this;
    }

    @Override
    public SetFriendRemarkNameCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      uid = 0;
      reason = 0;
      remarkName.clear();
      return this;
    }

    @Override
    public SetFriendRemarkNameCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      remarkName.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SetFriendRemarkNameCsReq)) {
        return false;
      }
      SetFriendRemarkNameCsReq other = (SetFriendRemarkNameCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasUid() || uid == other.uid)
        && (!hasReason() || reason == other.reason)
        && (!hasRemarkName() || remarkName.equals(other.remarkName));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(uid);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(reason);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 42);
        output.writeStringNoTag(remarkName);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(uid);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(reason);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(remarkName);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SetFriendRemarkNameCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // uid
            uid = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // reason
            reason = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // remarkName
            input.readString(remarkName);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.uid, uid);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.reason, reason);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeString(FieldNames.remarkName, remarkName);
      }
      output.endObject();
    }

    @Override
    public SetFriendRemarkNameCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 115792: {
            if (input.isAtField(FieldNames.uid)) {
              if (!input.trySkipNullValue()) {
                uid = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -934964668: {
            if (input.isAtField(FieldNames.reason)) {
              if (!input.trySkipNullValue()) {
                reason = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1449259563:
          case 1993449450: {
            if (input.isAtField(FieldNames.remarkName)) {
              if (!input.trySkipNullValue()) {
                input.readString(remarkName);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SetFriendRemarkNameCsReq clone() {
      return new SetFriendRemarkNameCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SetFriendRemarkNameCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SetFriendRemarkNameCsReq(), data).checkInitialized();
    }

    public static SetFriendRemarkNameCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SetFriendRemarkNameCsReq(), input).checkInitialized();
    }

    public static SetFriendRemarkNameCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SetFriendRemarkNameCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating SetFriendRemarkNameCsReq messages
     */
    public static MessageFactory<SetFriendRemarkNameCsReq> getFactory() {
      return SetFriendRemarkNameCsReqFactory.INSTANCE;
    }

    private enum SetFriendRemarkNameCsReqFactory implements MessageFactory<SetFriendRemarkNameCsReq> {
      INSTANCE;

      @Override
      public SetFriendRemarkNameCsReq create() {
        return SetFriendRemarkNameCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName uid = FieldName.forField("uid");

      static final FieldName reason = FieldName.forField("reason");

      static final FieldName remarkName = FieldName.forField("remarkName", "remark_name");
    }
  }
}
