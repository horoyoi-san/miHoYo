// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedMessage;

public final class EraFlipperDataTypeInfoOuterClass {
  /**
   * Protobuf type {@code EraFlipperDataTypeInfo}
   */
  public static final class EraFlipperDataTypeInfo extends ProtoMessage<EraFlipperDataTypeInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>repeated .EraFlipperDataType data_list = 6;</code>
     */
    private final RepeatedMessage<EraFlipperDataTypeOuterClass.EraFlipperDataType> dataList = RepeatedMessage.newEmptyInstance(EraFlipperDataTypeOuterClass.EraFlipperDataType.getFactory());

    private EraFlipperDataTypeInfo() {
    }

    /**
     * @return a new empty instance of {@code EraFlipperDataTypeInfo}
     */
    public static EraFlipperDataTypeInfo newInstance() {
      return new EraFlipperDataTypeInfo();
    }

    /**
     * <code>repeated .EraFlipperDataType data_list = 6;</code>
     * @return whether the dataList field is set
     */
    public boolean hasDataList() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>repeated .EraFlipperDataType data_list = 6;</code>
     * @return this
     */
    public EraFlipperDataTypeInfo clearDataList() {
      bitField0_ &= ~0x00000001;
      dataList.clear();
      return this;
    }

    /**
     * <code>repeated .EraFlipperDataType data_list = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableDataList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<EraFlipperDataTypeOuterClass.EraFlipperDataType> getDataList() {
      return dataList;
    }

    /**
     * <code>repeated .EraFlipperDataType data_list = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<EraFlipperDataTypeOuterClass.EraFlipperDataType> getMutableDataList() {
      bitField0_ |= 0x00000001;
      return dataList;
    }

    /**
     * <code>repeated .EraFlipperDataType data_list = 6;</code>
     * @param value the dataList to add
     * @return this
     */
    public EraFlipperDataTypeInfo addDataList(
        final EraFlipperDataTypeOuterClass.EraFlipperDataType value) {
      bitField0_ |= 0x00000001;
      dataList.add(value);
      return this;
    }

    /**
     * <code>repeated .EraFlipperDataType data_list = 6;</code>
     * @param values the dataList to add
     * @return this
     */
    public EraFlipperDataTypeInfo addAllDataList(
        final EraFlipperDataTypeOuterClass.EraFlipperDataType... values) {
      bitField0_ |= 0x00000001;
      dataList.addAll(values);
      return this;
    }

    @Override
    public EraFlipperDataTypeInfo copyFrom(final EraFlipperDataTypeInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        dataList.copyFrom(other.dataList);
      }
      return this;
    }

    @Override
    public EraFlipperDataTypeInfo mergeFrom(final EraFlipperDataTypeInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasDataList()) {
        getMutableDataList().addAll(other.dataList);
      }
      return this;
    }

    @Override
    public EraFlipperDataTypeInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      dataList.clear();
      return this;
    }

    @Override
    public EraFlipperDataTypeInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      dataList.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof EraFlipperDataTypeInfo)) {
        return false;
      }
      EraFlipperDataTypeInfo other = (EraFlipperDataTypeInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasDataList() || dataList.equals(other.dataList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        for (int i = 0; i < dataList.length(); i++) {
          output.writeRawByte((byte) 50);
          output.writeMessageNoTag(dataList.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += (1 * dataList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(dataList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public EraFlipperDataTypeInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 50: {
            // dataList
            tag = input.readRepeatedMessage(dataList, tag);
            bitField0_ |= 0x00000001;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRepeatedMessage(FieldNames.dataList, dataList);
      }
      output.endObject();
    }

    @Override
    public EraFlipperDataTypeInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1788817256:
          case -363613165: {
            if (input.isAtField(FieldNames.dataList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(dataList);
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public EraFlipperDataTypeInfo clone() {
      return new EraFlipperDataTypeInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static EraFlipperDataTypeInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new EraFlipperDataTypeInfo(), data).checkInitialized();
    }

    public static EraFlipperDataTypeInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new EraFlipperDataTypeInfo(), input).checkInitialized();
    }

    public static EraFlipperDataTypeInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new EraFlipperDataTypeInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating EraFlipperDataTypeInfo messages
     */
    public static MessageFactory<EraFlipperDataTypeInfo> getFactory() {
      return EraFlipperDataTypeInfoFactory.INSTANCE;
    }

    private enum EraFlipperDataTypeInfoFactory implements MessageFactory<EraFlipperDataTypeInfo> {
      INSTANCE;

      @Override
      public EraFlipperDataTypeInfo create() {
        return EraFlipperDataTypeInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName dataList = FieldName.forField("dataList", "data_list");
    }
  }
}
